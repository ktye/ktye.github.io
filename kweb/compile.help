
The ast of a program is stored as a k table with columns: T P I S
A table with a parent vector is an example of tree table.

T node type
P parent
I int value
S symbol value

Select the program with the drop down on the left.
Most are small examples, but the last is the full source of the k interpreter (30k nodes).

From a parent vector P we can compute:

np:{n:(&#x){x[y]+:1}/x;n[0]-:1}  /number of children
dp:{+/0<(x@)\:!#x}               /depth
lp:{(~~)#@[&#x;x i;i:!#x]}       /last child

c is a boolean list of the checked state of each node (toggled by double click).
A node is visible if all parents are checked:

vc:{[c;p]&1,1_&/1_c@(P@)\:!#p}

To draw a tree, e.g. (+ 1 (- (* 2 3)) (% 4))
          i  d  P        (1)              (2)              (3)
 ┬     +  0  0  0         ┬     +          ┬     +          ┬     +
 └┬    1  1  1  0          ┬    1          └┬    1          └┬    1
  ├┬   -  2  2  1           ┬   -           ├┬   -           ├┬   -
  │└┬  *  3  3  2            ┬  *            └┬  *           │└┬  *
  │ ├─ 2  4  4  3             ─ 2             ├─ 2           │ ├─ 2
  │ └─ 3  5  4  3             ─ 3             └─ 3           │ └─ 3
  └┬   %  6  1  1           ┬   %           └┬   %           └┬   %
   └─  4  7  2  6            ─  4            └─  4            └─  4

 (1) draw at depth d:                  ┬ for nodes ─ for leaves
 (2) draw at depth d-1:                └ if last child, ├ otherwise
 (3) connect with parent at depth d-1: │ for rows 1+P i..i-1

drawtree:{[P]
 d:dp P                         /depth
 r:m:1+|/d                      /1+max depth
 a:~np P                        /child nodes
 w: lp P                        /last child nodes
 t:!#P
 r:((d w)+r*{x+!y-x}'[1+P w;w]  /step(3)    "|"
    (1_d)+r*1_t                 /step(2)    "+"
    (d w)+r*w)-1                /last child "L"
 e:@[(m*#P)#" ";r;"|+L"]
 e:@[e;d+m*!#P;"T-"a];(#P)^e}   /step (1)


A compiler backend implements a function per node type to transform the node into string form.
e.g. go transforms the table to a string of go program source code:

it folds the table in reverse order  f/[();|!#P;|n]
the first argument is a stack (of string results) and n is the child count per node:
 n:(&#P){x[y]+:1}/P; n[0]-:1
for each node, f cuts the number of children from the stack, calls the emitter based on the node's type
with arguments x:node id, and y the evaluated children in string form.
the result is catenated to the stack.

ast transformations(are done on the table before flattening), e.g.:
 -rename builtin functions [c]
 -rewrite cond/swtich expressions as statements (return or assign each) [go]
  same for c but keep ternary expressions
 -remove explicit zero assignments [go wa] todo
 

node type                    i-value             s-value
 prg     root node           -                   prog/libname    first node only
 mem     memory segment      #64k blocks         `a|`b           a|b: memory1|memory2
 con     constant            -                   name            child: lit
 var     global variable     -                   name            child: lit
 lit     literal (con|var)   val(32bit)|C-index  type
 tab     func table entry    index               func name
 fun     function            exported            func name       children: args res locs ast dfr
 arg     func argument       -                   type            child: sym
 sym     symbol              1(global)|0N(func)  name
 res     return value        -                   type            unnamed
 loc     local var decl      -                   type            child: sym
 ast     func ast root       -                   -               one per func
 stm     statement list      -                   -
 ret     return              -                   `|type          children: return values, s-type only for single res
 cal     function call       func node           func name       children: args
 cli     indirect call       #args               res-type        children: func-expr args arg-types
 drp     drop return vals    -                   -               child: cal
 get     get local           -                   varname
 Get     get global          -                   varname
 lod     load                -                   type(bijf)      child:    addr
 sto     store               -                   type(bijf)      children: addr, value
 asn     assignment          1(global)           varname         children: expr
 cst     cast                -                   dst type        2 children: typ(src), arg
 typ     type                -                   type
 cnd     if condition        -                   `|result-type   2|3 children: if then [else]
 swc     switch              1(has default)      `|result-type   children: expr cases [default]
 jmp     break/continue      1(break)|0(cont)    label
 for     loop                1(simple)           label           children: (cond|nop) (post|nop) body
 dfr     defer stmt node     -                   -               child: cal
 nop     ignore              -                   -
unary operator nodes
 neg|not                     1                   type            1 child
binary operator nodes
 eql|les|mor|gte|lte|and|orr 2                   type            2 children
 add|sub|mul|div|mod|shr|shl	
 xor|neq|ant(andnot)|bnd|bor(&& ||)			     
 
types: `i`u`j`k`f!(i32;u32;i64;u64;f64)
