online:ktye.github.io  (wasm needs multi-value/bulk-memory/simd128)
test:  ktye.github.io/#test
src:   github.com/ktye/i
jit:   wavm run --mount-root . k.wat [args]  (github.com/WAVM/WAVM)
build: go install ktye.github.com/wg/cmd/wg  (compile wasm from go)
       wg . > k.wat         (wat2wasm: github.com/WebAssembly/wabt)
       wat2wasm --enable-bulk-memory --enable-simd k.wat  -o k.wasm


args:     data file.k file.t                  (assign/execute/test)
web(drop) data file.k file.t                     `file<c (download)

repl:  \\(exit) \t1000 expr(bench) \m(totalmem) \c(clear+checkrefs)

+ flp add       '  ech  bin                b bool     1b    110b   
- neg sub       /  rdc  mod                c char     "x"   "ab"        
* fst mul       \  scn  div                i int      2     1 2         
% sqr div       ': ecp                     s symbol   `a    ``c`d       
! til wer       /: ecr  split   fix        f float    2.    1. 2.    
& wer min       \: ecl  join    fix        z complex  1a    1a20 2a     
| rev max       while[c;a;b;..]            L list     (1;2 3)      
< asc les       $[a;b;...]      cond       D dict     `a`b!1 2
> dsc mor       @[x;i;+;y]      amend      T table    +`a`b!.. 
= grp eql       .[x;i;+;y]      dmend      v verb     +
~ not mtc       {a+b}.d         env        c comp     1+/*%  
, enl cat       k?t             group      d derived  +/
^ srt cut       k!t             key        l lambda   {x+y}
# cnt tak       t,d t,t t,'t(h) join
_ flr drp       t{a>5}          where     exec: t~`v: push
$ str cst       c:<`file(read)             v:  0..63   monadic
? unq fnd       `file<c(write)                64..127  dyadic
@ typ atx       `@i(verb) (+)~`2             128       pop + dyadic
. val cal       .(1;2;`64+(+))  exec         129..255  tetradic
                                             256       drop
built-ins(monadic):                          320/384   jmp, jmp-ifz
in find abs imag conj angle solve dot        448..     quoted verb
predefined:ej avg var std
rand: ?n(uniform) ?-n(normal) ?z(binormal) n?n(with) -n?n(w/o) n?L