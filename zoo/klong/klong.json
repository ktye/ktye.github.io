{"Makefile":["CFLAGS=\t-g -Wall -pedantic -O3","CC=\tcc $(CFLAGS)","V=\t20200401","R=\t20200403","","# Compile-time options","# SAFE = disable the .sys() function and the ]i and ]! meta commands","#        (or just run \"make kg.safe\")","# EDIT = include line editor and history (needs some POSIX functions)","#OPTIONS= -DEDIT","","# Modules to load into image file","MODULES=-l nstat -l nplot -l time","","all:\tkg klong.image","","klong.image:\tkg","\t./kg -n $(MODULES) -o klong.image","\tcp klong.image lib","","kg:\tkg.o s9core.o","\t$(CC) -o kg kg.o s9core.o","","kg.safe:\tkg.c s9core.o","\t$(CC) -o kg.safe -DSAFE kg.c s9core.o","","kg.o:\tkg.c s9core.h s9import.h","\t$(CC) $(OPTIONS) -o kg.o -c kg.c","","s9core.o:\ts9core.c s9core.h s9import.h","\t$(CC) -o s9core.o -c s9core.c","","kg.wasm:\ts9core.c s9core.h wasm.c wasm.h kg.c","\tclang -Dwasm -Wfatal-errors -Wno-builtin-requires-header -Oz --target=wasm32 -mbulk-memory --no-standard-libraries -Wl,--export=__heap_base,--export=kginit,--export=rep,--export=load_image_file,--allow-undefined -Wl,--no-entry -o kg.wasm s9core.c wasm.c kg.c","","test:\tkg test.kg","\t./kg -n test.kg","","clean:","\trm -f *.o a.out kg klong.image lib/klong.image kg.safe \\","\t*.core klong$(V).tgz klong$(R).tgz","","arc:\tclean","\tcd ..; tar -cvf - klong | gzip -9c \u003eklong$(V).tgz","\tmv -f ../klong$(V).tgz .","","version:","\tvi kg.c klong-ref.txt CHANGES Makefile","","dist:\tclean","\tcd ..; tar -cvf - `cat klong/_nodist` klong | gzip -9c \u003eklong$(R).tgz","\tmv ../klong$(R).tgz .","","csums:","\tcsum -u \u003c_csums \u003e_csums.new","\tmv _csums.new _csums","","mksums:\tclean","\tfind . -type f | grep -v _csums | grep -v klong2015 | csum \u003e_csums",""],"kg.c":["/*"," * Klong interpreter"," * Nils M Holm, 2015--2020"," * In the public domain"," *"," * Under jurisdictions without a public domain, the CC0 applies."," * See the file CC0 for a copy of the license."," */","","#include \"s9core.h\"","#include \"s9import.h\"","","#define VERSION\t\t\"20200403\"","","#ifdef plan9"," #define handle_sigquit()"," #define handle_sigint()\tnotify(keyboard_interrupt)","#else"," #ifndef wasm","  #include \u003ctime.h\u003e","  #include \u003csignal.h\u003e"," #else","  #ifdef EDIT","   #include \u003cunistd.h\u003e","   #include \u003ctermios.h\u003e","  #endif","  #define handle_sigquit()\tsignal(SIGQUIT, keyboard_quit)","  #define handle_sigint()\tsignal(SIGINT, keyboard_interrupt)"," #endif","#endif","","#define TOKEN_LENGTH\t256","#define MIN_DICT_LEN\t13","","#define NTRACE\t\t10","","#define DFLPATH\t\t\".:lib\"","","#define T_DICTIONARY\t(USER_SPECIALS-1)","#define T_VARIABLE\t(USER_SPECIALS-2)","#define T_PRIMOP\t(USER_SPECIALS-3)","#define T_BARRIER\t(USER_SPECIALS-4)","#define STRING_NIL\t(USER_SPECIALS-5)","#define NO_VALUE\t(USER_SPECIALS-6)","","#define list_p(x) \\","\t(pair_p(x) || NIL == (x))","","#define dictionary_p(n) \\","        (!special_p(n) \u0026\u0026 (tag(n) \u0026 S9_ATOM_TAG) \u0026\u0026 car(n) == T_DICTIONARY)","#define dict_data(x)\tcddr(x)","#define dict_table(x)\tvector(dict_data(x))","#define dict_len(x)\tvector_len(cddr(x))","#define dict_size(x)\tcadr(x)","","#define fun_immed(x)\tcadr(x)","#define fun_arity(x)\tcaddr(x)","#define fun_body(x)\tcdddr(x)","","#define variable_p(n) \\","        (!special_p(n) \u0026\u0026 (tag(n) \u0026 S9_ATOM_TAG) \u0026\u0026 car(n) == T_VARIABLE)","#define var_symbol(x)\tcadr(x)","#define var_name(x)\tsymbol_name(var_symbol(x))","#define var_value(x)\tcddr(x)","","#define primop_p(n) \\","        (!special_p(n) \u0026\u0026 (tag(n) \u0026 S9_ATOM_TAG) \u0026\u0026 car(n) == T_PRIMOP)","#define primop_slot(x)\tcadr(x)","","#define syntax_body(x)\tcdr(x)","","cell\tDstack;","cell\tSys_dict;","cell\tSafe_dict;","cell\tFrame;","int\tState;","cell\tTmp;","cell\tLocals;","cell\tBarrier;","cell\tS, F;","cell\tProg, P;","cell\tTok, T;","cell\tEpsilon_var;","cell\tLoading;","cell\tModule;","cell\tMod_funvars;","char\tModname[TOKEN_LENGTH+1];","cell\tLocnames;","cell\tLocal_id;","int\tTo_chan, From_chan;","int\tProg_chan;","cell\tTrace[NTRACE];","int\tTraceptr;","int\tReport;","int\tQuiet;","int\tScript;","int\tDebug;","int\tTranscript;","char\tInbuf[TOKEN_LENGTH+1];","int\tListlev;","int\tIncond;","int\tInfun;","int\tLine;","int\tDisplay;","char\tImage_path[TOKEN_LENGTH+13];","","volatile int\tIntr;","","/* VM opcode symbols */","","cell\tS_amend, S_amendd, S_argv, S_atom, S_call0, S_call1, S_call2,","\tS_call3, S_char, S_clear, S_conv, S_cut, S_def, S_div, S_down,","\tS_drop, S_each, S_each2, S_eachl, S_eachp, S_eachr, S_enum,","\tS_eq, S_expand, S_find, S_first, S_floor, S_form, S_format,","\tS_format2, S_fun0, S_fun1, S_fun2, S_fun3, S_group, S_gt,","\tS_host, S_if, S_imm1, S_imm2, S_index, S_indexd, S_intdiv,","\tS_it, S_iter, S_join, S_list, S_lslit, S_lt, S_match, S_max,","\tS_min, S_minus, S_newdict, S_neg, S_not, S_over, S_over2, S_plus,","\tS_pop0, S_pop1, S_pop2, S_pop3, S_power, S_prog, S_range,","\tS_recip, S_rem, S_reshape, S_rev, S_rot, S_sconv, S_siter,","\tS_sover, S_sover2, S_swhile, S_shape, S_size, S_split, S_swap,","\tS_syscall, S_take, S_thisfn, S_times, S_transp, S_up, S_undef,","\tS_while, S_x, S_y, S_z, S_fastpow, S_edit, S_cols;","","cell\tHL_power;","","enum Adverb_states {","\tS_EVAL, S_APPIF, S_APPLY, S_EACH, S_EACH2, S_EACHL, S_EACHP,","\tS_EACHR, S_OVER, S_CONV, S_ITER, S_WPRED, S_WEXPR, S_S_OVER,","\tS_S_CONV, S_S_ITER, S_S_WPRED, S_S_WEXPR","};","","struct OP_ {","\tchar\t*name;","\tint\tsyntax;","\tvoid\t(*handler)(void);","};","","#define OP\tstruct OP_","","struct SYS_ {","\tchar\t*name;","\tint\tarity;","\tvoid\t(*handler)(void);","};","","#define SYS\tstruct SYS_","","cell *GC_root[] = {","\t\u0026S, \u0026F, \u0026Dstack, \u0026Frame, \u0026Sys_dict, \u0026Safe_dict, \u0026Tmp, \u0026Barrier,","\t\u0026Tok, \u0026Prog, \u0026P, \u0026T, \u0026S_it, \u0026Locals, \u0026Module, \u0026Mod_funvars,","\t\u0026Locnames, \u0026Loading, NULL","};","","cell *Image_vars[] = {","\t\u0026Barrier, \u0026Dstack, \u0026Epsilon_var, \u0026F, \u0026Frame, \u0026Loading,","\t\u0026Local_id, \u0026Locals, \u0026Locnames, \u0026Mod_funvars, \u0026Module,","\t\u0026P, \u0026Prog, \u0026S, \u0026Safe_dict, \u0026Sys_dict, \u0026T, \u0026Tmp, \u0026Tok,","\t\u0026S_amend, \u0026S_amendd, \u0026S_argv, \u0026S_atom, \u0026S_call0, \u0026S_call1,","\t\u0026S_call2, \u0026S_call3, \u0026S_char, \u0026S_clear, \u0026S_conv, \u0026S_cut, \u0026S_def,","\t\u0026S_div, \u0026S_down, \u0026S_drop, \u0026S_each, \u0026S_each2, \u0026S_eachl, \u0026S_eachp,","\t\u0026S_eachr, \u0026S_enum, \u0026S_eq, \u0026S_expand, \u0026S_find, \u0026S_first, \u0026S_floor,","\t\u0026S_form, \u0026S_format, \u0026S_format2, \u0026S_fun0, \u0026S_fun1, \u0026S_fun2, \u0026S_fun3,","\t\u0026S_group, \u0026S_gt, \u0026S_host, \u0026S_if, \u0026S_imm1, \u0026S_imm2, \u0026S_index,","\t\u0026S_indexd, \u0026S_intdiv, \u0026S_it, \u0026S_iter, \u0026S_join, \u0026S_list, \u0026S_lslit,","\t\u0026S_lt, \u0026S_match, \u0026S_max, \u0026S_min, \u0026S_minus, \u0026S_neg, \u0026S_newdict,","\t\u0026S_not, \u0026S_over, \u0026S_over2, \u0026S_plus, \u0026S_pop0, \u0026S_pop1, \u0026S_pop2,","\t\u0026S_pop3, \u0026S_power, \u0026S_prog, \u0026S_range, \u0026S_recip, \u0026S_rem, \u0026S_reshape,","\t\u0026S_rev, \u0026S_rot, \u0026S_sconv, \u0026S_siter, \u0026S_sover, \u0026S_sover2, \u0026S_swhile,","\t\u0026S_shape, \u0026S_size, \u0026S_split, \u0026S_swap, \u0026S_syscall, \u0026S_take,","\t\u0026S_thisfn, \u0026S_times, \u0026S_transp, \u0026S_up, \u0026S_undef, \u0026S_while, \u0026S_x,","\t\u0026S_y, \u0026S_z, \u0026HL_power, \u0026S_fastpow, \u0026S_edit, \u0026S_cols,","\tNULL","};","","/*"," * Allocators"," */","","/* From http://planetmath.org/goodhashtableprimes */","","static int hashsize(int n) {","        if (n \u003c 5) return 5;","\tif (n \u003c 11) return 11;","\tif (n \u003c 23) return 23;","\tif (n \u003c 47) return 47;","\tif (n \u003c 97) return 97;","\tif (n \u003c 193) return 193;","\tif (n \u003c 389) return 389;","\tif (n \u003c 769) return 769;","\tif (n \u003c 1543) return 1543;","\tif (n \u003c 3079) return 3079;","\tif (n \u003c 6151) return 6151;","\tif (n \u003c 12289) return 12289;","\tif (n \u003c 24593) return 24593;","\tif (n \u003c 49157) return 49157;","\tif (n \u003c 98317) return 98317;","\tif (n \u003c 196613) return 196613;","\tif (n \u003c 786433) return 786433;","\tif (n \u003c 1572869) return 1572869;","\tif (n \u003c 3145739) return 3145739;","\tif (n \u003c 6291469) return 6291469;","\tif (n \u003c 12582917) return 12582917;","\tif (n \u003c 25165843) return 25165843;","\tif (n \u003c 50331653) return 50331653;","\tif (n \u003c 100663319) return 100663319;","\tif (n \u003c 201326611) return 201326611;","\tif (n \u003c 402653189) return 402653189;","\tif (n \u003c 805306457) return 805306457;","\treturn 1610612741;","}","","static cell make_dict(int k) {","\tcell\td;","\tint\ti;","","\tk = hashsize(k);","\td = make_vector(k);","\tfor (i = 0; i \u003c k; i++)","\t\tvector(d)[i] = NIL;","\td = new_atom(0, d);","\td = new_atom(T_DICTIONARY, d);","\treturn d;","}","","static cell make_function(cell body, int immed, int arity) {","\treturn new_atom(T_FUNCTION,","\t\t\tnew_atom(immed,","\t\t\t\tnew_atom(arity, body)));","}","","static cell find_var(char *s) {","\tcell\tp;","","\tfor (p = Sys_dict; p != NIL; p = cdr(p)) {","\t\tif (strcmp(s, var_name(car(p))) == 0)","\t\t\treturn car(p);","\t}","\treturn UNDEFINED;","}","","static cell make_variable(char *s, cell v) {","\tcell\tn;","\tchar\tname[TOKEN_LENGTH+1];","","\tn = find_var(s);","\tif (n != UNDEFINED) return n;","\tstrcpy(name, s);","\tsave(v);","\tn = symbol_ref(name);","\tn = cons(n, v);","\tn = new_atom(T_VARIABLE, n);","\tSys_dict = cons(n, Sys_dict);","\tunsave(1);","\treturn n;","}","","static cell var_ref(char *s) {","\treturn make_variable(s, NIL);","}","","static cell make_primop(int slot, int syntax) {","\tcell\tn;","","\tn = new_atom(slot, NIL);","\treturn new_atom(syntax? T_SYNTAX: T_PRIMOP, n);","}","","/*"," * Error handling"," */","","void kg_write(cell x);","","static void printtrace(void) {","\tint\ti, j;","","\tprints(\"kg: trace:\");","\ti = Traceptr;","\tfor (j=0; j\u003cNTRACE; j++) {","\t\tif (i \u003e= NTRACE)","\t\t\ti = 0;","\t\tif (Trace[i] != UNDEFINED) {","\t\t\tprints(\" \");","\t\t\tprints(symbol_name(Trace[i]));","\t\t}","\t\ti++;","\t}","\tnl();","}","","static cell error(char *msg, cell arg) {","\tint\tp = set_output_port(Error_port);","\tchar\tbuf[100];","\tchar    *s;","","\tIncond = 0;","\tInfun = 0;","\tListlev = 0;","\tif (0 == Report) {","\t\ts9_abort();","\t\treturn UNDEFINED;","\t}","\tif (s9_aborted())","\t\treturn UNDEFINED;","\ts9_abort();","\tif (Quiet)","\t\tset_output_port(Error_port);","\tprints(\"kg: error: \");","\tif (Loading != NIL) {","\t\tkg_write(car(Loading));","\t\t//sprintf(buf, \": %d: \", Line);","\t\tbuf[0] = '\\0';","\t\ts = strcat(buf, \": \");","\t\ts = strcati(s, Line);","\t\ts = strcat(s, \": \");","\t\tprints(buf);","\t}","\tprints(msg);","\tif (arg != VOID) {","\t\tprints(\": \");","\t\tkg_write(arg);","\t}","\tnl();","\tif (Debug) {","\t\tprinttrace();","\t}","\tset_output_port(p);","\tif (Quiet)","\t\tbye(1);","\treturn UNDEFINED;","}","","/*"," * Reader"," */","","#ifdef EDIT",""," #define bell() write(1, \"\\007\", 1)"," #define back() write(1, \"\\b\", 1);",""," static void refresh(char *s, int k) {","\tint\ti;","","\tfor (i=0; i \u003c k; i++)","\t\twrite(1, \u0026s[i], 1);","\twrite(1, \" \", 1);","\tfor (i=0; i \u003c= k; i++)","\t\tback();"," }",""," static int intvalue(cell x);",""," #define MAXHIST 20",""," char\tHistory[MAXHIST][TOKEN_LENGTH+1];"," int    Hin = 0, Hout = 0, Hnum = 0;",""," static void erase(char *s, int p, int k) {","\tint\ti;","","\twrite(1, \u0026s[p], k-p);","\tfor (i=0; i\u003ck; i++) {","\t\tback();","\t\twrite(1,\" \",1);","\t\tback();","\t}"," }",""," static char *editline(char *s, int lim) {","\tchar\t\tc;","\tint\t\tp = 0, k = 0, i;","\tstruct termios\tt, r;","","\tif (lim \u003e intvalue(var_value(S_cols))-9)","\t\tlim = intvalue(var_value(S_cols))-9;","\ttcgetattr(0, \u0026t);","\ttcgetattr(0, \u0026r);","\tcfmakeraw(\u0026r);","\ttcsetattr(0, TCSANOW, \u0026r);","\tfor (;;) {","\t\tread(0, \u0026c, 1);","\t\tif ('\\r' == c) {","\t\t\tbreak;","\t\t}","\t\telse if ('C'-'@' == c) {","\t\t\ttcsetattr(0, TCSANOW, \u0026t);","\t\t\terror(\"interrupted\", VOID);","\t\t\tIntr = 1;","\t\t\treturn NULL;","\t\t}","\t\telse if ('B'-'@' == c \u0026\u0026 p \u003e 0) {","\t\t\tp--;","\t\t\tback();","\t\t}","\t\telse if ('F'-'@' == c \u0026\u0026 p \u003c k) {","\t\t\twrite(1, \u0026s[p], 1);","\t\t\tp++;","\t\t}","\t\telse if ('A'-'@' == c) {","\t\t\twhile (p \u003e 0) {","\t\t\t\tback();","\t\t\t\tp--;","\t\t\t}","\t\t}","\t\telse if ('E'-'@' == c) {","\t\t\twrite(1, \u0026s[p], k-p);","\t\t\tp = k;","\t\t}","\t\telse if ('D'-'@' == c) {","\t\t\tif (0 == k) {","\t\t\t\ttcsetattr(0, TCSANOW, \u0026t);","\t\t\t\treturn NULL;","\t\t\t}","\t\t\tfor (i=p; i\u003ck-1; i++)","\t\t\t\ts[i] = s[i+1];","\t\t\tk--;","\t\t\trefresh(\u0026s[p], k-p);","\t\t}","\t\telse if (('P'-'@' == c || 'N'-'@' == c) \u0026\u0026 Hnum \u003e 0) {","\t\t\tif (p != 0 \u0026\u0026 p != k) {","\t\t\t\tbell();","\t\t\t\tcontinue;","\t\t\t}","\t\t\terase(s, p, k);","\t\t\tif ('N'-'@' == c \u0026\u0026 ++Hout \u003e= Hnum) Hout = 0;","\t\t\tstrcpy(s, History[Hout]);","\t\t\tp = k = strlen(s);","\t\t\twrite(1,s,k);","\t\t\tif ('P'-'@' == c \u0026\u0026 --Hout \u003c 0) Hout = Hnum-1;","\t\t}","\t\telse if ('H'-'@' == c \u0026\u0026 p \u003e 0) {","\t\t\tp--;","\t\t\tfor (i=p; i\u003ck-1; i++)","\t\t\t\ts[i] = s[i+1];","\t\t\tk--;","\t\t\tback();","\t\t\trefresh(\u0026s[p], k-p);","\t\t}","\t\telse if ('U'-'@' == c) {","\t\t\terase(s, p, k);","\t\t\tp = k = 0;","\t\t}","\t\telse if (' ' \u003c= c \u0026\u0026 c \u003c= '~') {","\t\t\tif (k \u003e= lim-1) {","\t\t\t\tbell();","\t\t\t\tcontinue;","\t\t\t}","\t\t\tk++;","\t\t\tfor (i=k; i\u003ep; i--)","\t\t\t\ts[i] = s[i-1];","\t\t\ts[p] = c;","\t\t\trefresh(\u0026s[p], k-p);","\t\t\twrite(1, \u0026s[p], 1);","\t\t\tp++;","\t\t}","\t\telse {","\t\t\tbell();","\t\t}","\t}","\tLine++;","\ts[k] = 0;","\ttcsetattr(0, TCSANOW, \u0026t);","\tnl();","\tHout = Hin-1;","\tif (Hout \u003c 0) Hout = Hnum-1;","\tif (k \u003e 0) {","\t\tHout = Hin;","\t\tstrcpy(History[Hin], s);","\t\tif (++Hin \u003e Hnum) Hnum = Hin;","\t\tif (Hin \u003e= MAXHIST) Hin = 0;","\t}","\treturn s;"," }","","static int false_p(cell);","","#endif /* EDIT */","","static char *kg_getline(char *s, int k) {","\tint\tc = 0;","\tchar\t*p = s;","","#ifdef EDIT","\tif (input_port() == 0 \u0026\u0026 !false_p(var_value(S_edit)))","\t\treturn editline(s, k);","#endif","\twhile (k--) {","\t\tc = readc();","\t\tif (EOF == c || '\\n' == c)","\t\t\tbreak;","\t\t*s++ = c;","\t}","\tLine++;","\t*s = 0;","\treturn EOF == c \u0026\u0026 p == s? NULL: p;","}","","#define is_white(c) \\","\t(' '  == (c) ||\t\\","\t '\\t' == (c) ||\t\\","\t '\\n' == (c) ||\t\\","\t '\\r' == (c) ||\t\\","\t '\\f' == (c))","","#define is_symbolic(c) \\","\t(isalpha(c) || isdigit(c) || (c) == '.')","","#define is_special(c) \\","\t(!isalpha(c) \u0026\u0026 !isdigit(c) \u0026\u0026 (c) \u003e= ' ')","","static int skip_white(void) {","\tint\tc;","","\tfor (;;) {","\t\tc = readc();","\t\twhile (is_white(c) \u0026\u0026 (NIL == Loading || c != '\\n'))","\t\t\tc = readc();","\t\tif ('\\n' == c)","\t\t\tLine++;","\t\tif (Loading != NIL \u0026\u0026 '\\n' == c) {","\t\t\tif (Listlev \u003e 0 || Incond || Infun)","\t\t\t\tcontinue;","\t\t\treturn EOF;","\t\t}","\t\treturn c;","\t}","}","","static void comment(void) {","\tint\tc;","","\tc = readc();","\tfor (;;) {","\t\tif (EOF == c) {","\t\t\terror(\"missing end of comment\", VOID);","\t\t\treturn;","\t\t}","\t\tif ('\"' == c) {","\t\t\tc = readc();","\t\t\tif (c != '\"') {","\t\t\t\trejectc(c);","\t\t\t\tbreak;","\t\t\t}","\t\t}","\t\tc = readc();","\t}","}","","static int skip(void) {","\tint\tc;","","\tfor (;;) {","\t\tif (Intr) return EOF;","\t\tc = skip_white();","\t\tif (EOF == c) {","\t\t\tif (input_port() \u003c 0 \u0026\u0026 (Listlev || Incond || Infun))","\t\t\t{","\t\t\t\tif (!Quiet) {","\t\t\t\t\tprints(\"        \");","\t\t\t\t\tflush();","\t\t\t\t}","\t\t\t\tclose_input_string();","\t\t\t\tif (kg_getline(Inbuf, TOKEN_LENGTH) == NULL)","\t\t\t\t\treturn EOF;","\t\t\t\topen_input_string(Inbuf);","\t\t\t}","\t\t\telse {","\t\t\t\treturn EOF;","\t\t\t}","\t\t}","\t\telse if (':' == c) {","\t\t\tc = readc();","\t\t\tif (c != '\"') {","\t\t\t\trejectc(c);","\t\t\t\treturn ':';","\t\t\t}","\t\t\tcomment();","\t\t}","\t\telse {","\t\t\treturn c;","\t\t}","\t}","}","","static cell read_string(void) {","\tint\tc, i;","\tchar\ts[TOKEN_LENGTH+1];","","\ti = 0;","\tc = readc();","\tfor (;;) {","\t\tif (EOF == c)","\t\t\treturn error(\"missing end of string\", VOID);","\t\tif ('\"' == c) {","\t\t\tc = readc();","\t\t\tif (c != '\"') {","\t\t\t\trejectc(c);","\t\t\t\tbreak;","\t\t\t}","\t\t}","\t\tif (i \u003c TOKEN_LENGTH)","\t\t\ts[i++] = c;","\t\telse if (TOKEN_LENGTH == i) {","\t\t\ti++;","\t\t\terror(\"string too long\", make_string(s, i));","\t\t}","\t\tc = readc();","\t}","\ts[i] = 0;","\treturn make_string(s, i);","}","","static void mkglobal(char *s) {","\tchar\t*p;","","\tif ((p = strchr(s, '`')) != NULL)","\t\t*p = 0;","}","","static int is_local(char *s) {","\treturn strchr(s, '`') != NULL;","}","","static int is_funvar(char *s) {","\tcell\tm, p;","","\tfor (m = Mod_funvars; m != NIL; m = cdr(m)) {","\t\tfor (p = car(m); p != NIL; p = cdr(p)) {","\t\t\tif (!strcmp(symbol_name(car(p)), s))","\t\t\t\treturn 1;","\t\t}","\t}","\treturn 0;","}","","static int in_module(char *s) {","\tcell\tm;","\tchar\tb[TOKEN_LENGTH+1];","\tint\tg;","","\tif (UNDEFINED == Module)","\t\treturn 0;","\tif (is_funvar(s))","\t\treturn 0;","\tg = !is_local(s);","\tfor (m = Module; m != NIL; m = cdr(m)) {","\t\tstrcpy(b, var_name(car(m)));","\t\tif (g) {","\t\t\tmkglobal(b);","\t\t}","\t\tif (!strcmp(s, b))","\t\t\treturn 1;","\t}","\treturn 0;","}","","static char *mklocal(char *s) {","\tcell\tloc, p;","\tint\tid;","\tchar\tb[TOKEN_LENGTH+1];","\tchar    *q;","","\tfor (loc = Locnames; loc != NIL; loc = cdr(loc)) {","\t\tid = caar(loc);","\t\tfor (p = cdar(loc); p != NIL; p = cdr(p)) {","\t\t\tstrcpy(b, symbol_name(car(p)));","\t\t\tmkglobal(b);","\t\t\tif (!strcmp(s, b)) {","\t\t\t\t// sprintf(s, \"%s`%d\", b, id);","\t\t\t\ts[0] = '\\0';","\t\t\t\tq = strcat(s, b);","\t\t\t\tq[0] = '`';","\t\t\t\tq++;","\t\t\t\tq = strcati(q, id);","\t\t\t\treturn s;","\t\t\t}","\t\t}","\t}","\treturn NULL;","}","","static void mkmodlocal(char *s) {","\tif (strlen(s)+strlen(Modname) \u003e= TOKEN_LENGTH-1)","\t\terror(\"in-module symbol too long\", make_string(s,strlen(s)));","\tstrcat(s, \"`\");","\tstrcat(s, Modname);","}","","static cell read_sym(int c, int mod) {","\tchar\ts[TOKEN_LENGTH+1];","\tint\ti;","","\ti = 0;","\twhile (is_symbolic(c)) {","\t\tif (i \u003c TOKEN_LENGTH)","\t\t\ts[i++] = c;","\t\telse if (TOKEN_LENGTH == i) {","\t\t\ti++;","\t\t\terror(\"symbol too long\", make_string(s, i));","\t\t}","\t\tc = readc();","\t}","\trejectc(c);","\ts[i] = 0;","\tif (mklocal(s) != NULL)","\t\t;","\telse if (0 == s[1] \u0026\u0026 ('x' == *s || 'y' == *s || 'z' == *s))","\t\t;","\telse if (mod \u0026\u0026","\t\t (in_module(s) ||","\t\t (Module != UNDEFINED \u0026\u0026 find_var(s) == UNDEFINED))","\t) {","\t\tmkmodlocal(s);","\t}","\tif (Listlev)","\t\treturn symbol_ref(s);","\treturn make_variable(s, NO_VALUE);","}","","static cell read_num(int c) {","\tchar\ts[TOKEN_LENGTH+1];","\tint\ti, c2 = 0;","","\ti = 0;","\tif ('-' == c) {","\t\ts[i++] = c;","\t\tc = readc();","\t}","\twhile (\tisdigit(c) ||","\t\t'.' == c ||","\t\t'e' == c ||","\t\t('e' == c2 \u0026\u0026 '+' == c) ||","\t\t('e' == c2 \u0026\u0026 '-' == c))","\t{","\t\tif (i \u003c TOKEN_LENGTH)","\t\t\ts[i++] = c;","\t\telse if (TOKEN_LENGTH == i) {","\t\t\ti++;","\t\t\terror(\"number too long\", make_string(s, i));","\t\t}","\t\tc2 = c;","\t\tc = readc();","\t}","\trejectc(c);","\ts[i] = 0;","\tif (!string_numeric_p(s))","\t\treturn error(\"invalid number\", make_string(s, i));","\treturn string_to_number(s);","}","","static cell read_char(void) {","\treturn make_char(readc());","}","","static cell read_xnum(int pre, int neg) {","\tchar\tdigits[] = \"0123456789abcdef\";","\tchar\tbuf[100];","\tchar    *s;","\tcell\tbase, num;","\tint\tc, p, nd;","\tint\tradix;","","\tc = pre;","\tswitch (c) {","\tcase 'b':","\t\tradix = 2; break;","\tcase 'o':","\t\tradix = 8; break;","\tcase 'x':","\t\tradix = 16; break;","\tdefault:","\t\tradix = 10; break;","\t}","\tbase = make_integer(radix);","\tsave(base);","\tnum = Zero;","\tsave(num);","\tif (radix != 10)","\t\tc = tolower(readc());","\tnd = 0;","\twhile (1) {","\t\tp = 0;","\t\twhile (digits[p] \u0026\u0026 digits[p] != c)","\t\t\tp++;","\t\tif (p \u003e= radix) {","\t\t\tif (0 == nd) {","\t\t\t\t// sprintf(buf, \"invalid digit in #%c number\",","\t\t\t\t//\tpre);","\t\t\t\tbuf[0] = '\\0';","\t\t\t\ts = strcat(buf, \"invalid digid in #\");","\t\t\t\ts = strcati(s, pre);","\t\t\t\ts = strcat(s, \" number\");","\t\t\t\tunsave(2);","\t\t\t\treturn error(buf, make_char(c));","\t\t\t}","\t\t\tbreak;","\t\t}","\t\tnum = bignum_multiply(num, base);","\t\tcar(Stack) = num;","\t\tnum = bignum_add(num, make_integer(p));","\t\tcar(Stack) = num;","\t\tnd++;","\t\tc = tolower(readc());","\t}","\tunsave(2);","\tif (!nd) {","\t\t// sprintf(buf, \"digits expected after #%c\", pre);","\t\tbuf[0] = '\\0';","\t\ts = strcat(buf, \"digits expected after #\");","\t\ts = strcati(s, pre);","\t\treturn error(buf, VOID);","\t}","\trejectc(c);","\treturn neg? bignum_negate(num): num;","}","","static cell kg_read(void);","","static cell read_list(int dlm) {","\tint\tc, k = 0;","\tcell\ta, n;","","\tListlev++;","\ta = cons(NIL, NIL);","\tsave(a);","\tc = skip();","\twhile (c != dlm) {","\t\trejectc(c);","\t\tn = kg_read();","\t\tif (eof_p(n)) {","\t\t\tunsave(1);","\t\t\treturn error(\"unexpected end of list/dict\", VOID);","\t\t}","\t\tcar(a) = n;","\t\tc = skip();","\t\tif (c != dlm) {","\t\t\tn = cons(NIL, NIL);","\t\t\tcdr(a) = n;","\t\t\ta = cdr(a);","\t\t}","\t\tk++;","\t}","\tListlev--;","\ta = unsave(1);","\tif (0 == k)","\t\treturn NIL;","\treturn a;","}","","static int string_hash(char *s) {","\tunsigned\th = 0xdeadbeef;","","\twhile (*s)","\t\th = ((h \u003c\u003c 5) + h) ^ *s++;","\treturn abs((int) h);","}","","static int hash(cell x, int k) {","\tint\tof;","","\tif (0 == k)","\t\treturn 0;","\tif (integer_p(x))","\t\treturn abs(bignum_to_int(x, \u0026of) % k);","\tif (char_p(x))","\t\treturn char_value(x) % k;","\tif (string_p(x))","\t\treturn abs(string_hash(string(x)) % k);","\tif (symbol_p(x))","\t\treturn abs(string_hash(symbol_name(x)) % k);","\tif (variable_p(x))","\t\treturn abs(string_hash(var_name(x)) % k);","\tif (pair_p(x))","\t\treturn abs((length(x) * hash(car(x), k)) % k);","\treturn 0;","}","","static int tuple_p(cell x) {","\treturn pair_p(x) \u0026\u0026 pair_p(cdr(x)) \u0026\u0026 NIL == cddr(x);","}","","static cell list_to_dict(cell x) {","\tcell\td, *v, e;","\tint\tn, k, i, h;","","\tsave(x);","\tn = length(x);","\tk = hashsize(n);","\td = make_vector(k);","\tsave(d);","\tv = vector(d);","\tfor (i = 0; i \u003c k; i++)","\t\tv[i] = NIL;","\twhile (x != NIL) {","\t\tif (!tuple_p(car(x))) {","\t\t\tunsave(2);","\t\t\treturn error(\"malformed dictionary entry\", car(x));","\t\t}","\t\th = hash(caar(x), k);","\t\tv = vector(d);","\t\te = cons(car(x), v[h]);","\t\tv = vector(d);","\t\tv[h] = e;","\t\tx = cdr(x);","\t}","\tunsave(2);","\td = new_atom(n, d);","\treturn new_atom(T_DICTIONARY, d);","}","","static cell read_dict(void) {","\tcell\tx;","","\tx = read_list('}');","\treturn list_to_dict(x);","}","","static cell shifted(void) {","\tint\tc;","\tchar\tbuf[3];","\tcell\tn;","","\tc = readc();","\tif (isalpha(c) || '.' == c) {","\t\tn = read_sym(c, 0);","\t\tif (variable_p(n))","\t\t\treturn var_symbol(n);","\t\treturn n;","\t}","\telse if ('\"' == c || isdigit(c)) {","\t\trejectc(c);","\t\treturn kg_read();","\t}","\telse if ('{' == c) {","\t\treturn read_dict();","\t}","\telse {","\t\tbuf[0] = ':';","\t\tbuf[1] = c;","\t\tbuf[2] = 0;","\t\treturn symbol_ref(buf);","\t}","}","","static cell read_op(int c) {","\tchar\tbuf[3];","","\tbuf[1] = buf[2] = 0;","\tbuf[0] = c;","\tif ('\\\\' == c) {","\t\tc = readc();","\t\tif ('~' == c || '*' == c)","\t\t\tbuf[1] = c;","\t\telse","\t\t\trejectc(c);","\t}","\treturn symbol_ref(buf);","}","","#ifdef plan9","static int system(char *cmd) {","\tint\tr;","\tWaitmsg\t*w;","","\tr = fork();","\tif (r \u003c 0) {","\t\treturn -1;","\t}","\telse if (0 == r) {","\t\texecl(\"/bin/rc\", \"/bin/rc\", \"-c\", cmd, 0);","\t\texits(\"execl() failed\");","\t}","\telse {","\t\tw = wait();","\t\tr = w-\u003emsg[0] != 0;","\t\tfree(w);","\t}","\treturn r;","}","#endif","","static void inventory(char *buf) {","\tchar\tcmd[TOKEN_LENGTH+20], kpbuf[TOKEN_LENGTH+1];","\tchar\t*p, *s;","","#ifdef SAFE","\terror(\"shell access disabled\", VOID);","\treturn;","#else","\tif (buf[0]) {","\t\tp = buf;","\t\tsprintf(cmd, \"cd %s; ls *.kg\", buf);","\t}","\telse {","\t\tp = getenv(\"KLONGPATH\");","\t\tif (NULL == p)","\t\t\tp = DFLPATH;","\t\tstrncpy(kpbuf, p, TOKEN_LENGTH);","\t\tkpbuf[TOKEN_LENGTH] = 0;","\t\tp = kpbuf;","\t\tif (strlen(p) \u003e= TOKEN_LENGTH) {","\t\t\terror(\"KLONGPATH too long!\", VOID);","\t\t\treturn;","\t\t}","\t\ts = strchr(p, ':');","\t\tif (s != NULL)","\t\t\t*s = 0;","\t\tsprintf(cmd, \"cd %s; ls *.kg\", p);","\t}","\tprintf(\"%s:\\n\", p);","\tsystem(cmd);","#endif","}","","static void transcribe(cell x, int input) {","\tcell\tp;","","\tif (Transcript \u003c 0)","\t\treturn;","\tp = set_output_port(Transcript);","\tif (input) {","\t\tDisplay = 1;","\t\tprints(\"\\t\");","\t}","\tkg_write(x);","\tnl();","\tDisplay = 0;","\tset_output_port(p);","}","","static void transcript(char *path) {","\tif (Transcript \u003e= 0) {","\t\tclose_port(Transcript);","\t\tTranscript = -1;","\t\tprints(\"transcript closed\"); nl();","\t}","\tif (NULL == path || 0 == *path)","\t\treturn;","\tif ((Transcript = open_output_port(path, 1)) \u003c 0) {","\t\terror(\"could not open transcript file\",","\t\t\tmake_string(path, strlen(path)));","\t\treturn;","\t}","\tlock_port(Transcript);","\tprints(\"sending transcript to: \");","\tprints(path); nl();","}","","static void eval(cell x);","","static void apropos(char *s) {","\tcell\tx;","","\tif (0 == *s) {","\t\terror(\"Usage: ']a function/operator' or ']a all'\", VOID);","\t\treturn;","\t}","\tx = cons(S_pop1, NIL);","\tx = cons(S_call1, x);","\tx = cons(var_value(var_ref(\"help\")), x);","\tif (NIL == car(x)) {","\t\terror(\"help function not loaded, try ]lhelp\", VOID);","\t\treturn;","\t}","\tif (strcmp(s, \"all\") == 0)","\t\ts = \"\";","\tx = cons(make_string(s, strlen(s)), x);","\tsave(x);","\teval(x);","\tunsave(1);","}","","static cell load(cell x, int v, int scr);","","static void meta_command(void) {","\tint\tcmd, c, i;","\tchar\tbuf[TOKEN_LENGTH];","","\tcmd = skip();","\tc = skip();","\tfor (i=0; c != EOF; i++) {","\t\tif (i \u003c TOKEN_LENGTH-2)","\t\t\tbuf[i] = c;","\t\tc = readc();","\t}","\tbuf[i] = 0;","\tswitch (cmd) {","\tcase '!':","#ifdef SAFE","\t\terror(\"shell access disabled\", VOID);","#else","\t\tsystem(buf);","#endif","\t\tbreak;","\tcase 'a':","\tcase 'h':","\t\tapropos(buf);","\t\tbreak;","\tcase 'i':","\t\tinventory(buf);","\t\tbreak;","\tcase 'l':","\t\tload(make_string(buf, strlen(buf)), 1, 0);","\t\topen_input_string(\"\");","\t\tbreak;","\tcase 'q':","\t\tprints(\"bye!\"); nl();","\t\tbye(0);","\t\tbreak;","\tcase 't':","\t\ttranscript(buf);","\t\tbreak;","\tdefault:","\t\tprints(\"! cmd     run shell command\"); nl();","\t\tprints(\"a fn/op   describe function/operator (apropos)\"); nl();","\t\tprints(\"i [dir]   inventory (of given directory)\"); nl();","\t\tprints(\"l file    load file.kg\"); nl();","\t\tprints(\"q         quit\"); nl();","\t\tprints(\"t [file]  transcript to file (none = off)\"); nl();","\t\tbreak;","\t}","}","","static cell kg_read(void) {","\tint\tc;","","\tc = skip();","\tswitch (c) {","\tcase '\"':","\t\treturn read_string();","\tcase '0':","\t\tc = tolower(readc());","\t\tif ('c' == c)","\t\t\treturn read_char();","\t\tif ('x' == c || 'o' == c || 'b' == c)","\t\t\treturn read_xnum(c, 0);","\t\trejectc(c);","\t\treturn read_num('0');","\tcase ':':","\t\treturn shifted();","\tcase '[':","\t\treturn read_list(']');","\tcase EOF:","\t\treturn END_OF_FILE;","\tdefault:","\t\tif ('-' == c \u0026\u0026 Listlev \u003e 0) {","\t\t\tc = readc();","\t\t\trejectc(c);","\t\t\tif (isdigit(c))","\t\t\t\treturn read_num('-');","\t\t\treturn read_op('-');","\t\t}","\t\tif (\t']' == c \u0026\u0026","\t\t\t0 == Listlev \u0026\u0026","\t\t\t0 == Incond \u0026\u0026","\t\t\t0 == Infun \u0026\u0026","\t\t\tNIL == Loading","\t\t) {","\t\t\tmeta_command();","\t\t\treturn kg_read();","\t\t}","\t\tif (isdigit(c))","\t\t\treturn read_num(c);","\t\tif (is_symbolic(c))","\t\t\treturn read_sym(c, 1);","\t\treturn read_op(c);","\t}","}","","/*"," * Printer"," */","","static void write_char(cell x) {","\tchar\tb[4];","","\t//sprintf(b, Display? \"%c\": \"0c%c\", (int) char_value(x));","\tif (Display)","\t\titoa((int) char_value(x), b, 10);","\telse {","\t\tb[0] = '0';","\t\tb[1] = 'c';","\t\titoa((int) char_value(x), b+2, 10);","\t}","\t\t","\tprints(b);","}","","static void write_string(cell x) {","\tint\ti, k;","\tchar\t*s;","\tchar\tb[2];","","\tif (Display) {","\t\tblockwrite(string(x), string_len(x)-1);","\t\treturn;","\t}","\tb[1] = 0;","\tprints(\"\\\"\");","\tk = string_len(x)-1;","\ts = string(x);","\tfor (i = 0; i \u003c k; i++) {","\t\tif ('\"' == s[i])","\t\t\tprints(\"\\\"\");","\t\tb[0] = s[i];","\t\tprints(b);","\t}","\tprints(\"\\\"\");","}","","static void write_list(cell x) {","\tprints(\"[\");","\twhile (x != NIL) {","\t\tkg_write(car(x));","\t\tif (cdr(x) != NIL)","\t\t\tprints(\" \");","\t\tx = cdr(x);","\t}","\tprints(\"]\");","}","","static void write_dict(cell x) {","\tint\tk, i, first = 1;","\tcell\t*v, e;","","\tx = cddr(x);","\tk = vector_len(x);","\tprints(\":{\");","\tv = vector(x);","\tfor (i = 0; i \u003c k; i++) {","\t\tif (NIL == v[i])","\t\t\tcontinue;","\t\tif (!first)","\t\t\tprints(\" \");","\t\tfirst = 0;","\t\tfor (e = v[i]; e != NIL; e = cdr(e)) {","\t\t\tkg_write(car(e));","\t\t\tif (cdr(e) != NIL)","\t\t\t\tprints(\" \");","\t\t}","\t}","\tprints(\"}\");","}","","static void write_chan(cell x) {","\tchar\tb[100];","\tchar    *s;","","\t//sprintf(b, \":%schan.%d\",","\t//\t\tinput_port_p(x)? \"in\": \"out\",","\t//\t\t(int) port_no(x));","\t","\tb[0] = ':';","\tb[1] = '\\0';","\ts = strcat(b, (input_port_p(x)? \"in\": \"out\"));","\ts = strcat(s, \"chan.\");","\ts = strcati(s, (int) port_no(x));","\t","\tprints(b);","}","","static void write_primop(cell x) {","\tchar\tb[100];","\tchar    *s;","","\t// sprintf(b, \":primop-%d\", (int) primop_slot(x));","\t","\tb[0] = '\\0';","\ts = strcat(b, \":primop-\");","\ts = strcati(s, (int) primop_slot(x));","\tprints(b);","}","","static void write_fun(cell x) {","\tif (0 == fun_arity(x))","\t\tprints(\":nilad\");","\telse if (1 == fun_arity(x))","\t\tprints(\":monad\");","\telse if (2 == fun_arity(x))","\t\tprints(\":dyad\");","\telse","\t\tprints(\":triad\");","}","","void kg_write(cell x) {","\tif (NIL == x)","\t\tprints(\"[]\");","\telse if (symbol_p(x)) {","\t\tprints(\":\");","\t\tprints(symbol_name(x));","\t}","\telse if (variable_p(x))","\t\tprints(var_name(x));","\telse if (undefined_p(x))","\t\tprints(\":undefined\");","\telse if (string_p(x))","\t\twrite_string(x);","\telse if (integer_p(x))","\t\tprint_bignum(x);","\telse if (char_p(x))","\t\twrite_char(x);","\telse if (real_p(x))","\t\tprint_real(x);","\telse if (eof_p(x))","\t\tprints(\":eof\");","\telse if (dictionary_p(x))","\t\twrite_dict(x);","\telse if (input_port_p(x) || output_port_p(x))","\t\twrite_chan(x);","\telse if (function_p(x))","\t\twrite_fun(x);","\telse if (primop_p(x))","\t\twrite_primop(x);","\telse if (x == Barrier)","\t\tprints(\":barrier\");","\telse if (x == STRING_NIL)","\t\tprints(\":stringnil\");","\telse","\t\twrite_list(x);","}","","/*"," * Dictionaries"," */","","static int dict_contains(cell x, cell y);","","static int match(cell a, cell b) {","\tint\tk;","","\tif (a == b)","\t\treturn 1;","\tif (real_p(a) \u0026\u0026 number_p(b)) {","\t\treturn real_approx_p(a, b);","\t}","\tif (number_p(a) \u0026\u0026 real_p(b)) {","\t\treturn real_approx_p(a, b);","\t}","\tif (number_p(a) \u0026\u0026 number_p(b)) {","\t\treturn real_equal_p(a, b);","\t}","\tif (symbol_p(a) \u0026\u0026 variable_p(b)) {","\t\treturn a == var_symbol(b);","\t}","\tif (variable_p(a) \u0026\u0026 symbol_p(b)) {","\t\treturn var_symbol(a) == b;","\t}","\tif (variable_p(a) \u0026\u0026 variable_p(b)) {","\t\treturn var_symbol(a) == var_symbol(b);","\t}","\tif (char_p(a) \u0026\u0026 char_p(b)) {","\t\treturn char_value(a) == char_value(b);","\t}","\tif (string_p(a) \u0026\u0026 string_p(b)) {","\t\tk = string_len(a);","\t\tif (string_len(b) == k)","\t\t\treturn memcmp(string(a), string(b), k) == 0;","\t\treturn 0;","\t}","\tif (pair_p(a) \u0026\u0026 pair_p(b)) {","\t\tif (length(a) != length(b))","\t\t\treturn 0;","\t\twhile (a != NIL \u0026\u0026 b != NIL) {","\t\t\tif (!match(car(a), car(b)))","\t\t\t\treturn 0;","\t\t\ta = cdr(a);","\t\t\tb = cdr(b);","\t\t}","\t\treturn 1;","\t}","\tif (dictionary_p(a) \u0026\u0026 dictionary_p(b)) {","\t\treturn dict_contains(a, b) \u0026\u0026 dict_contains(b, a);","\t}","\treturn 0;","}","","static cell dict_lookup(cell d, cell k) {","\tcell\tx, *v;","\tint\th;","","\tif (0 == dict_len(d))","\t\treturn NIL;","\th = hash(k, dict_len(d));","\tv = dict_table(d);","\tx = v[h];","\twhile (x != NIL) {","\t\tif (match(caar(x), k))","\t\t\treturn car(x);","\t\tx = cdr(x);","\t}","\treturn UNDEFINED;","}","","static cell resize_dict(cell old_d, int k) {","\tint\told_k, i, h;","\tcell\td, e, n;","","\tsave(old_d);","\tif (k \u003c MIN_DICT_LEN)","\t\tk = MIN_DICT_LEN;","\td = make_dict(k);","\tk = dict_len(d);","\tsave(d);","\told_k = dict_len(old_d);","\tfor (i = 0; i \u003c old_k; i++) {","\t\tfor (e = dict_table(old_d)[i]; e != NIL; e = cdr(e)) {","\t\t\th = hash(caar(e), k);","\t\t\tn = cons(car(e), dict_table(d)[h]);","\t\t\tdict_table(d)[h] = n;","\t\t}","\t}","\tdict_size(d) = dict_size(old_d);","\td = unsave(1);","\tunsave(1);","\treturn d;","}","","static cell grow_dict(cell d) {","\tcell\tn;","","\tn = resize_dict(d, (dict_len(d) + 1) * 2 - 1);","\tdict_data(d) = dict_data(n);","\treturn n;","}","","static cell copy_dict(cell d) {","\t/* see hashsize() about the -1 */","\treturn resize_dict(d, dict_len(d)-1);","}","","static cell dict_add(cell d, cell k, cell v) {","\tcell\tx, e;","\tint\th;","","\tif (dictionary_p(k))","\t\treturn error(\"bad dictionary key\", k);","\tTmp = k;","\tsave(v);","\tsave(k);","\tTmp = NIL;","\tx = dict_lookup(d, k);","\tif (x != UNDEFINED) {","\t\tcadr(x) = v;","\t\tunsave(2);","\t\treturn d;","\t}","\tif (dict_size(d) \u003e= dict_len(d))","\t\td = grow_dict(d);","\tsave(d);","\th = hash(k, dict_len(d));","\te = cons(v, NIL);","\te = cons(k, e);","\te = cons(e, dict_table(d)[h]);","\tdict_table(d)[h] = e;","\tdict_size(d)++;","\tunsave(3);","\treturn d;","}","","static cell dict_remove(cell d, cell k) {","\tcell\t*x, *v;","\tint\th;","","\tif (0 == dict_len(d))","\t\treturn NIL;","\th = hash(k, dict_len(d));","\tv = dict_table(d);","\tx = \u0026v[h];","\twhile (*x != NIL) {","\t\tif (match(caar(*x), k)) {","\t\t\t*x = cdr(*x);","\t\t\tdict_size(d)--;","\t\t\tbreak;","\t\t}","\t\tx = \u0026cdr(*x);","\t}","\treturn d;","}","","static cell dict_to_list(cell x) {","\tcell\tn, p, new, last;","\tint\ti, k;","","\tn = cons(NIL, NIL);","\tsave(n);","\tk = dict_len(x);","\tlast = NIL;","\tfor (i = 0; i \u003c k; i++) {","\t\tfor (p = dict_table(x)[i]; p != NIL; p = cdr(p)) {","\t\t\tcar(n) = car(p);","\t\t\tnew = cons(NIL, NIL);","\t\t\tcdr(n) = new;","\t\t\tlast = n;","\t\t\tn = cdr(n);","\t\t}","\t}","\tn = unsave(1);","\tif (NIL == last)","\t\treturn NIL;","\tcdr(last) = NIL;","\treturn n;","}","","static int dict_contains(cell x, cell y) {","\tcell\tp, t;","","\tp = dict_to_list(x);","\tsave(p);","\twhile (p != NIL) {","\t\tt = dict_lookup(y, caar(p));","\t\tif (UNDEFINED == t || match(cadar(p), cadr(t)) == 0) {","\t\t\tunsave(1);","\t\t\treturn 0;","\t\t}","\t\tp = cdr(p);","\t}","\tunsave(1);","\treturn 1;","}","","/*"," * Backend Routines"," */","","static int intvalue(cell x) {","\tint\tof;","","\treturn bignum_to_int(x, \u0026of);","}","","static cell flatcopy(cell x, cell *p) {","\tcell\tn, m;","","\tn = cons(NIL, NIL);","\tsave(n);","\twhile (x != NIL) {","\t\tcar(n) = car(x);","\t\tx = cdr(x);","\t\tif (x != NIL) {","\t\t\tm = cons(NIL, NIL);","\t\t\tcdr(n) = m;","\t\t\tn = cdr(n);","\t\t}","\t}","\t*p = n;","\treturn unsave(1);","}","","static cell rev(cell x) {","\tcell\tn = NIL;","","\tfor (; x != NIL; x = cdr(x))","\t\tn = cons(car(x), n);","\treturn n;","}","","static cell revb(cell n) {","\tcell    m, h;","","\tif (NIL == n)","\t\treturn NIL;","\tm = NIL;","\twhile (n != NIL) {","\t\th = cdr(n);","\t\tcdr(n) = m;","\t\tm = n;","\t\tn = h;","\t}","\treturn m;","}","","static cell rev_string(cell x) {","\tcell\ts;","\tchar\t*src, *dst;","\tint\ti, k;","","\tk = string_len(x)-1;","\ts = make_string(\"\", k);","\tsrc = string(x);","\tdst = \u0026string(s)[k];","\t*dst-- = 0;","\tfor (i = 0; i \u003c k; i++)","\t\t*dst-- = *src++;","\treturn s;","}","","static cell append(cell a, cell b) {","\tcell\tn, m;","","\tif (NIL == a)","\t\treturn b;","\tif (NIL == b)","\t\treturn a;","\tn = flatcopy(a, \u0026m);","\tcdr(m) = b;","\treturn n;","}","","static cell amend(cell x, cell y) {","\tcell\tn, v, new, p = NIL;","\tint\ti, k;","","\tif (NIL == x || NIL == cdr(x))","\t\treturn y;","\tn = cons(NIL, NIL);","\tsave(n);","\tv = car(x);","\tx = cdr(x);","\ti = 0;","\tk = -1;","\tif (NIL != x) {","\t\tif (!integer_p(car(x))) {","\t\t\tunsave(1);","\t\t\treturn error(\"amend: expected integer, got\", car(x));","\t\t}","\t\tk = intvalue(car(x));","\t\tx = cdr(x);","\t}","\twhile (y != NIL) {","\t\tif (i == k) {","\t\t\tcar(n) = v;","\t\t\tif (x != NIL) {","\t\t\t\tif (!integer_p(car(x))) {","\t\t\t\t\tunsave(1);","\t\t\t\t\treturn","\t\t\t\t\t error(\"amend: expected integer, got\",","\t\t\t\t\t\tcar(x));","\t\t\t\t}","\t\t\t\tk = intvalue(car(x));","\t\t\t\tx = cdr(x);","\t\t\t}","\t\t}","\t\telse {","\t\t\tcar(n) = car(y);","\t\t}","\t\ty = cdr(y);","\t\tp = n;","\t\tnew = cons(NIL, NIL);","\t\tcdr(n) = new;","\t\tn = cdr(n);","\t\ti++;","\t}","\tif (k \u003e= i || x != NIL)","\t\terror(\"amend: range error\", make_integer(k));","\tn = unsave(1);","\tif (p != NIL)","\t\tcdr(p) = NIL;","\telse","\t\tn = NIL;","\treturn n;","}","","static cell amend_substring(cell x, cell y) {","\tcell\ts, v, p;","\tint\ti, k, kv, r;","","\tv = car(x);","\tx = cdr(x);","\tr = 0;","\tk = string_len(y)-1;","\tkv = string_len(v)-1;","\tfor (p=x; p != NIL; p = cdr(p)) {","\t\tif (!integer_p(car(p))) {","\t\t\tunsave(1);","\t\t\treturn error(\"amend: expected integer, got\", car(p));","\t\t}","\t\ti = intvalue(car(p));","\t\tif (i \u003e r) r = i;","\t\tif (i \u003c 0 || r \u003e k)","\t\t\treturn error(\"amend: range error\", car(p));","\t}"," \tk = (kv+r)\u003ek? kv+r: k;","\ts = make_string(\"\", k);","\tif (k == 0)","\t\treturn s;","\tmemcpy(string(s), string(y), k);","\tsave(s);","\twhile (x != NIL) {","\t\ti = intvalue(car(x));","\t\tmemcpy(\u0026string(s)[i], string(v), kv);","\t\tx = cdr(x);","\t}","\treturn unsave(1);","}","","static cell amend_string(cell x, cell y) {","\tcell\ts, v, c;","\tint\ti, k;","","\tif (NIL == x || NIL == cdr(x))","\t\treturn y;","\tv = car(x);","\tif (string_p(v))","\t\treturn amend_substring(x, y);","\tif (!char_p(v))","\t\treturn error(\"amend: expected char, got\", v);","\tc = char_value(v);","\ts = copy_string(y);","\tsave(s);","\tk = string_len(s)-1;","\tx = cdr(x);","\twhile (x != NIL) {","\t\tif (!integer_p(car(x))) {","\t\t\tunsave(1);","\t\t\treturn error(\"amend: expected integer, got\", car(x));","\t\t}","\t\ti = intvalue(car(x));","\t\tif (i \u003c 0 || i \u003e= k) {","\t\t\tunsave(1);","\t\t\treturn error(\"amend: range error\", car(x));","\t\t}","\t\tstring(s)[i] = c;","\t\tx = cdr(x);","\t}","\treturn unsave(1);","}","","static cell amend_in_depth(cell x, cell y, cell v) {","\tcell\tn, new, p = NIL;","\tint\ti, k;","","\tif (NIL == x) {","\t\tif (!atom_p(y))","\t\t\treturn error(\"amend-in-depth: shape error\", y);","\t\treturn v;","\t}","\tif (atom_p(y))","\t\treturn error(\"amend-in-depth: shape error\", x);","\tn = cons(NIL, NIL);","\tsave(n);","\ti = 0;","\tif (!integer_p(car(x))) {","\t\tunsave(1);","\t\treturn error(\"amend-in-depth: expected integer, got\", car(x));","\t}","\tk = intvalue(car(x));","\twhile (y != NIL) {","\t\tif (i == k) {","\t\t\tnew = amend_in_depth(cdr(x), car(y), v);","\t\t\tcar(n) = new;","\t\t}","\t\telse {","\t\t\tcar(n) = car(y);","\t\t}","\t\ty = cdr(y);","\t\tp = n;","\t\tnew = cons(NIL, NIL);","\t\tcdr(n) = new;","\t\tn = cdr(n);","\t\ti++;","\t}","\tif (k \u003e= i)","\t\terror(\"amend-in-depth: range error\", make_integer(k));","\tif (p != NIL)","\t\tcdr(p) = NIL;","\treturn unsave(1);","}","","static cell cut(cell x, cell y) {","\tcell\tseg, segs, offs, new, cutoff = NIL;","\tint\tk, i, n, orig;","","\tif (NIL == x)","\t\treturn cons(y, NIL);","\tif (integer_p(x))","\t\tx = cons(x, NIL);","\torig = y;","\tsave(x);","\toffs = x;","\tsegs = cons(NIL, NIL);","\tsave(segs);","\ti = 0;","\twhile (x != NIL) {","\t\tif (!integer_p(car(x))) {","\t\t\tunsave(2);","\t\t\treturn error(\"cut: expected integer, got\", car(x));","\t\t}","\t\tk = intvalue(car(x));","\t\tx = cdr(x);","\t\tseg = cons(NIL, NIL);","\t\tsave(seg);","\t\tif (i \u003e k)","\t\t\treturn error(\"cut: range error\", offs);","\t\tfor (n = 0; i \u003c k; i++, n++) {","\t\t\tif (NIL == y) {","\t\t\t\tunsave(3);","\t\t\t\treturn error(\"cut: length error\", offs);","\t\t\t}","\t\t\tcar(seg) = car(y);","\t\t\tif (i \u003c k-1) {","\t\t\t\tnew = cons(NIL, NIL);","\t\t\t\tcdr(seg) = new;","\t\t\t\tseg = cdr(seg);","\t\t\t}","\t\t\ty = cdr(y);","\t\t}","\t\tseg = unsave(1);","\t\tif (0 == n)","\t\t\tseg = NIL;","\t\tcar(segs) = seg;","\t\tnew = cons(NIL, NIL);","\t\tcutoff = segs;","\t\tcdr(segs) = new;","\t\tsegs = cdr(segs);","\t}","\tif (NIL == orig \u0026\u0026 cutoff != NIL)","\t\tcdr(cutoff) = NIL;","\telse","\t\tcar(segs) = y;","\tsegs = unsave(1);","\tunsave(1);","\treturn segs;","}","","static cell cut_string(cell x, cell y) {","\tcell\tseg, segs, offs, new, orig, cutoff = NIL;","\tint\tk0, k1, n;","","\tif (NIL == x)","\t\treturn cons(y, NIL);","\tif (integer_p(x))","\t\tx = cons(x, NIL);","\torig = y;","\tsave(x);","\toffs = x;","\tsegs = cons(NIL, NIL);","\tsave(segs);","\tk0 = 0;","\tk1 = 0; /*LINT*/","\tn = string_len(y);","\twhile (x != NIL) {","\t\tif (!integer_p(car(x))) {","\t\t\tunsave(2);","\t\t\treturn error(\"cut: expected integer, got\", car(x));","\t\t}","\t\tk1 = intvalue(car(x));","\t\tx = cdr(x);","\t\tif (k0 \u003e k1 || k1 \u003e= n)","\t\t\treturn error(\"cut: range error\", offs);","\t\tseg = make_string(\"\", k1-k0);","\t\tmemcpy(string(seg), string(y)+k0, k1-k0+1);","\t\tstring(seg)[k1-k0] = 0;","\t\tcar(segs) = seg;","\t\tnew = cons(NIL, NIL);","\t\tcutoff = segs;","\t\tcdr(segs) = new;","\t\tsegs = cdr(segs);","\t\tk0 = k1;","\t}","\tif (string_len(orig) \u003c 2 \u0026\u0026 cutoff != NIL) {","\t\tcdr(cutoff) = NIL;","\t}","\telse {","\t\tn -= k1;","\t\tnew = make_string(\"\", n-1);","\t\tcar(segs) = new;","\t\tmemcpy(string(car(segs)), string(y)+k1, n);","\t}","\tsegs = unsave(1);","\tunsave(1);","\treturn segs;","}","","#define empty_p(x) \\","\t(NIL == x || (string_p(x) \u0026\u0026 string_len(x) \u003c 2))","","static int false_p(cell x) {","\treturn  NIL == x ||","\t\tZero == x ||","\t\t(number_p(x) \u0026\u0026 real_zero_p(x)) ||","\t\tempty_p(x);","}","","static cell drop(cell x, cell y) {","\tint\tk, r = 0;","","\tk = intvalue(y);","\tif (k \u003c 0) {","\t\tx = rev(x);","\t\tk = -k;","\t\tr = 1;","\t}","\tsave(x);","\twhile (x != NIL \u0026\u0026 k--)","\t\tx = cdr(x);","\tif (r)","\t\tx = rev(x);","\tunsave(1);","\treturn x;","}","","static cell drop_string(cell x, cell y) {","\tint\tk, n;","\tcell\tnew;","","\tn = string_len(x)-1;","\tk = intvalue(y);","\tif (0 == k)","\t\treturn x;","\tif (k \u003c 0) {","\t\tk = -k;","\t\tif (k \u003e n)","\t\t\treturn make_string(\"\", 0);","\t\tnew = make_string(\"\", n - k);","\t\tmemcpy(string(new), string(x), n-k+1);","\t\tstring(new)[n-k] = 0;","\t\treturn new;","\t}","\tif (k \u003e n)","\t\treturn make_string(\"\", 0);","\tnew = make_string(\"\", n - k);","\tmemcpy(string(new), string(x)+k, n-k+1);","\treturn new;","}","","static cell expand(cell x) {","\tcell\tn, new;","\tint\tk, pos, last = NIL;","","\tif (NIL == x || (number_p(x) \u0026\u0026 real_zero_p(x)))","\t\treturn NIL;","\tif (integer_p(x))","\t\tx = cons(x, NIL);","\tsave(x);","\tn = cons(NIL, NIL);","\tsave(n);","\tpos = 0;","\twhile (x != NIL) {","\t\tif (!integer_p(car(x)))","\t\t\treturn error(\"expand: expected integer, got\", car(x));","\t\tk = intvalue(car(x));","\t\tif (k \u003c 0)","\t\t\treturn error(\"expand: range error\", car(x));","\t\twhile (k) {","\t\t\tnew = make_integer(pos);","\t\t\tcar(n) = new;","\t\t\tif (k \u003e 0 || cdr(x) != NIL) {","\t\t\t\tnew = cons(NIL, NIL);","\t\t\t\tcdr(n) = new;","\t\t\t\tlast = n;","\t\t\t\tn = cdr(n);","\t\t\t}","\t\t\tk--;","\t\t}","\t\tx = cdr(x);","\t\tpos++;","\t}","\tn = unsave(1);","\tunsave(1);","\tif (NIL == last)","\t\treturn NIL;","\tif (last != NIL \u0026\u0026 NIL == cadr(last))","\t\tcdr(last) = NIL;","\treturn n;","}","","static cell find(cell x, cell y) {","\tcell\tn, p, new;","\tint\tk = 0;","","\tp = NIL;","\tn = cons(NIL, NIL);","\tsave(n);","\twhile (y != NIL) {","\t\tif (match(x, car(y))) {","\t\t\tnew = make_integer(k);","\t\t\tcar(n) = new;","\t\t\tnew = cons(NIL, NIL);","\t\t\tcdr(n) = new;","\t\t\tp = n;","\t\t\tn = cdr(n);","\t\t}","\t\ty = cdr(y);","\t\tk++;","\t}","\tn = unsave(1);","\tif (p != NIL) {","\t\tcdr(p) = NIL;","\t\treturn n;","\t}","\telse {","\t\treturn NIL;","\t}","}","","static cell find_string(cell x, cell y) {","\tcell\tn, p, new;","\tint\ti, k, c;","","\tc = char_value(x);","\tk = string_len(y);","\tp = NIL;","\tn = cons(NIL, NIL);","\tsave(n);","\tfor (i = 0; i \u003c k; i++) {","\t\tif (string(y)[i] == c) {","\t\t\tnew = make_integer(i);","\t\t\tcar(n) = new;","\t\t\tnew = cons(NIL, NIL);","\t\t\tcdr(n) = new;","\t\t\tp = n;","\t\t\tn = cdr(n);","\t\t}","\t}","\tn = unsave(1);","\tif (p != NIL) {","\t\tcdr(p) = NIL;","\t\treturn n;","\t}","\telse {","\t\treturn NIL;","\t}","}","","static cell find_substring(cell x, cell y) {","\tcell\tn, p, new;","\tint\ti, k, ks;","","\tks = string_len(x)-1;","\tk = string_len(y)-1;","\tp = NIL;","\tn = cons(NIL, NIL);","\tsave(n);","\tfor (i = 0; i \u003c= k-ks; i++) {","\t\tif (memcmp(\u0026string(y)[i], string(x), ks) == 0) {","\t\t\tnew = make_integer(i);","\t\t\tcar(n) = new;","\t\t\tnew = cons(NIL, NIL);","\t\t\tcdr(n) = new;","\t\t\tp = n;","\t\t\tn = cdr(n);","\t\t}","\t}","\tn = unsave(1);","\tif (p != NIL) {","\t\tcdr(p) = NIL;","\t\treturn n;","\t}","\telse {","\t\treturn NIL;","\t}","}","","static cell list_to_vector(cell m) {","\tcell\tn, vec;","\tint\tk;","\tcell\t*p;","","\tk = 0;","\tfor (n = m; n != NIL; n = cdr(n))","\t\tk++;","\tvec = new_vec(T_VECTOR, k*sizeof(cell));","\tp = vector(vec);","\tfor (n = m; n != NIL; n = cdr(n)) {","\t\t*p = car(n);","\t\tp++;","\t}","\treturn vec;","}","","static cell string_to_vector(cell s) {","\tcell\tv, new;","\tint\tk, i;","","\tk = string_len(s)-1;","\tv = new_vec(T_VECTOR, k*sizeof(cell));","\tsave(v);","\tfor (i = 0; i \u003c k; i++) {","\t\tnew = make_char(string(s)[i]);","\t\tvector(v)[i] = new;","\t}","\tunsave(1);","\treturn v;","}","","static cell ndxvec_to_list(cell x) {","\tcell\tn, new;","\tint\tk, i;","","\tk = vector_len(x);","\tif (0 == k)","\t\treturn NIL;","\tn = cons(NIL, NIL);","\tsave(n);","\tfor (i=0; i\u003ck; i++) {","\t\tnew = make_integer(vector(x)[i]);","\t\tcar(n) = new;","\t\tif (i \u003c k-1) {","\t\t\tnew = cons(NIL, NIL);","\t\t\tcdr(n) = new;","\t\t\tn = cdr(n);","\t\t}","\t}","\tn = unsave(1);","\treturn n;","}","","/*"," * Avoid gap sizes of 2^n in shellsort."," * Hopefully the compiler will optimize the switch."," * Worst case for shellsort with fixgap() is Theta(n^1.5),"," * meaning"," * 1,000,000,000 steps to sort one million elements"," * instead of"," * 1,000,000,000,000 steps (Theta(n^2))."," */","","static int fixgap(int k) {","\tswitch (k) {","\tcase 4:","\tcase 8:","\tcase 16:","\tcase 32:","\tcase 64:","\tcase 128:","\tcase 256:","\tcase 512:","\tcase 1024:","\tcase 2048:","\tcase 4096:","\tcase 8192:","\tcase 16384:","\tcase 32768:","\tcase 65536:","\tcase 131072:","\tcase 262144:","\tcase 524288:","\tcase 1048576:","\tcase 2097152:","\tcase 4194304:","\tcase 8388608:","\tcase 16777216:","\tcase 33554432:","\tcase 67108864:","\tcase 134217728:","\tcase 268435456:","\tcase 536870912:","\tcase 1073741824:return k-1;","\tdefault:\treturn k;","\t}","}","","static void shellsort(cell vals, cell ndxs, int count, int (*p)(cell, cell)) {","\tint\tgap, i, j;","\tcell\ttmp, *vv, *nv;","","\tfor (gap = fixgap(count/2); gap \u003e 0; gap = fixgap(gap / 2)) {","\t\tfor (i = gap; i \u003c count; i++) {","\t\t\tfor (j = i-gap; j \u003e= 0; j -= gap) {","\t\t\t\tvv = vector(vals);","\t\t\t\tnv = vector(ndxs);","\t\t\t\tif (p(vv[nv[j]], vv[nv[j+gap]]))","\t\t\t\t\tbreak;","\t\t\t\ttmp = nv[j];","\t\t\t\tnv[j] = nv[j+gap];","\t\t\t\tnv[j+gap] = tmp;","\t\t\t}","\t\t}","\t}","}","","static cell grade(int (*p)(cell, cell), cell x) {","\tcell\tvals, ndxs, *v;","\tint\ti, k;","","\tvals = list_to_vector(x);","\tsave(vals);","\tk = vector_len(vals);","\t/*","\t * allocate vector as string, so it does not get scanned during GC","\t */","\tndxs = new_vec(T_STRING, k * sizeof(cell));","\tsave(ndxs);","\tv = vector(ndxs);","\tfor (i = 0; i \u003c k; i++)","\t\tv[i] = i;","\tshellsort(vals, ndxs, k, p);","\tndxs = car(Stack);","\tndxs = ndxvec_to_list(ndxs);","\tunsave(2);","\treturn ndxs;","}","","static cell string_to_list(cell s, cell xnil) {","\tcell\tn, new;","\tint\tk, i;","","\tk = string_len(s) - 1;","\tif (k \u003c 1)","\t\treturn NIL;","\tn = cons(NIL, xnil);","\tsave(n);","\tfor (i = 0; i \u003c k; i++) {","\t\tnew = make_char(string(s)[i]);","\t\tcar(n) = new;","\t\tif (i+1 \u003c k) {","\t\t\tnew = cons(NIL, xnil);","\t\t\tcdr(n) = new;","\t\t\tn = cdr(n);","\t\t}","\t}","\treturn unsave(1);","}","","static cell list_to_string(cell x) {","\tcell\tp, n;","\tint\tk;","\tchar\t*s;","","\tif (NIL == x)","\t\treturn make_string(\"\", 0);","\tif (atom_p(x))","\t\treturn x;","\tk = 0;","\tfor (p=x; p != NIL; p = cdr(p)) {","\t\tif (!char_p(car(p)))","\t\t\treturn x;","\t\tk++;","\t}","\tn = make_string(\"\", k);","\ts = string(n);","\tfor (p=x; p != NIL; p = cdr(p))","\t\t*s++ = char_value(car(p));","\t*s = 0;","\treturn n;","}","","static void conv_to_strlst(cell x) {","\tcell\tn;","","\twhile (x != NIL) {","\t\tn = list_to_string(car(x));","\t\tcar(x) = n;","\t\tx = cdr(x);","\t}","}","","static cell group(cell x) {","\tcell\tn, f, p, g, new, ht;","\tint\ti;","","\tif (NIL == x)","\t\treturn NIL;","\tht = make_dict(length(x));","\tsave(ht);","\tfor (i = 0, n = x; n != NIL; n = cdr(n), i++) {","\t\tp = dict_lookup(ht, car(n));","\t\tp = cons(make_integer(i), atom_p(p)? NIL: cadr(p));","\t\tht = dict_add(ht, car(n), p);","\t\tcar(Stack) = ht;","\t\tif (undefined_p(ht)) {","\t\t\tunsave(1);","\t\t\treturn UNDEFINED;","\t\t}","\t}","\tg = cons(NIL, NIL);","\tsave(g);","\tp = g;","\tfor (n = x; n != NIL; n = cdr(n)) {","\t\tf = dict_lookup(ht, car(n));","\t\tif (f != UNDEFINED) {","\t\t\tcar(g) = revb(cadr(f));","\t\t\tnew = cons(NIL, NIL);","\t\t\tcdr(g) = new;","\t\t\tp = g;","\t\t\tg = cdr(g);","\t\t\tdict_remove(ht, car(n));","\t\t}","\t}","\tcdr(p) = NIL;","\tx = unsave(1);","\tunsave(1);","\treturn x;","}","","static cell group_string(cell x) {","\tcell\tn;","","\tn = string_to_list(x, NIL);","\tsave(n);","\tn = group(n);","\tunsave(1);","\treturn n;","}","","static cell join(cell y, cell x) {","\tcell\tn, p;","","\tif (list_p(x)) {","\t\tif (list_p(y))","\t\t\tx = append(y, x);","\t\telse","\t\t\tx = cons(y, x);","\t\treturn x;","\t}","\tif (list_p(y)) {","\t\tif (NIL == y) {","\t\t\tx = cons(x, NIL);","\t\t}","\t\telse {","\t\t\ty = flatcopy(y, \u0026p);","\t\t\tsave(y);","\t\t\tx = cons(x, NIL);","\t\t\tcdr(p) = x;","\t\t\tunsave(1);","\t\t\tx = y;","\t\t}","\t\treturn x;","\t}","\tif (char_p(x) \u0026\u0026 char_p(y)) {","\t\tn = make_string(\"\", 2);","\t\tstring(n)[1] = char_value(x);","\t\tstring(n)[0] = char_value(y);","\t\treturn n;","\t}","\tif (string_p(x) \u0026\u0026 char_p(y)) {","\t\tn = make_string(\"\", string_len(x));","\t\tmemcpy(string(n) + 1, string(x), string_len(x));","\t\tstring(n)[0] = intvalue(y);","\t\treturn n;","\t}","\tif (char_p(x) \u0026\u0026 string_p(y)) {","\t\tn = make_string(\"\", string_len(y));","\t\tmemcpy(string(n), string(y), string_len(y));","\t\tstring(n)[string_len(y)-1] = intvalue(x);","\t\treturn n;","\t}","\tif (string_p(x) \u0026\u0026 string_p(y)) {","\t\tn = make_string(\"\", string_len(x) + string_len(y)-2);","\t\tmemcpy(string(n), string(y), string_len(y));","\t\tmemcpy(string(n) + string_len(y)-1, string(x), string_len(x));","\t\treturn n;","\t}","\tn = cons(x, NIL);","\tn = cons(y, n);","\treturn n;","}","","static int less(cell x, cell y) {","\tif (number_p(x)) {","\t\tif (!number_p(y))","\t\t\treturn error(\"grade: expected number, got\", y);","\t\treturn real_less_p(x, y);","\t}","\tif (symbol_p(x)) {","\t\tif (!symbol_p(y))","\t\t\treturn error(\"grade: expected symbol, got\", y);","\t\treturn strcmp(symbol_name(x), symbol_name(y)) \u003c 0;","\t}","\tif (char_p(x)) {","\t\tif (!char_p(y))","\t\t\treturn error(\"grade: expected char, got\", y);","\t\treturn char_value(x) \u003c char_value(y);","\t}","\tif (string_p(x)) {","\t\tif (!string_p(y))","\t\t\treturn error(\"grade: expected string, got\", y);","\t\treturn strcmp(string(x), string(y)) \u003c 0;","\t}","\tif (!list_p(x))","\t\treturn error(\"grade: expected list, got\", x);","\tif (!list_p(y))","\t\treturn error(\"grade: expected list, got\", y);","\twhile (x != NIL \u0026\u0026 y != NIL) {","\t\tif (less(car(x), car(y)))","\t\t\treturn 1;","\t\tif (less(car(y), car(x)))","\t\t\treturn 0;","\t\tx = cdr(x);","\t\ty = cdr(y);","\t}","\treturn y != NIL;","}","","static int more(cell x, cell y) {","\treturn less(y, x);","}","","static cell ndx(cell x, int k, cell y) {","\tint\ti;","\tcell\tn, new;","\tcell\t*v;","","\tif (integer_p(y)) {","\t\ti = intvalue(y);","\t\tif (i \u003c 0 || i \u003e= k)","\t\t\treturn error(\"index: range error\", y);","\t\tv = vector(x);","\t\treturn v[i];","\t}","\tif (NIL == y)","\t\treturn NIL;","\tif (atom_p(y))","\t\treturn error(\"index: expected integer, got\", y);","\tn = cons(NIL, NIL);","\tsave(n);","\tfor (; y != NIL; y = cdr(y)) {","\t\tnew = ndx(x, k, car(y));","\t\tcar(n) = new;","\t\tif (cdr(y) != NIL) {","\t\t\tnew = cons(NIL, NIL);","\t\t\tcdr(n) = new;","\t\t\tn = cdr(n);","\t\t}","\t}","\tn = unsave(1);","\treturn n;","}","","static cell ndx_in_depth(cell x, cell y) {","\tcell\tp;","\tint\tk;","","\tif (atom_p(y))","\t\ty = cons(y, NIL);","\tsave(y);","\tp = x;","\twhile (NIL != y) {","\t\tif (!integer_p(car(y))) {","\t\t\tunsave(1);","\t\t\treturn error(\"index-in-depth: expected integer, got\",","\t\t\t\t\tcar(y));","\t\t}","\t\tk = intvalue(car(y));","\t\tif (atom_p(p)) {","\t\t\tunsave(1);","\t\t\treturn error(\"index-in-depth: shape error\", p);","\t\t}","\t\twhile (k \u003e 0 \u0026\u0026 p != NIL) {","\t\t\tp = cdr(p);","\t\t\tk--;","\t\t}","\t\tif (atom_p(p)) {","\t\t\tunsave(1);","\t\t\treturn error(\"index-in-depth: shape error\", p);","\t\t}","\t\tp = car(p);","\t\ty = cdr(y);","\t}","\tunsave(1);","\treturn p;","}","","static cell reshape3(cell shape, cell *next, cell src) {","\tint\ti, k, str = 1;","\tcell\tn, new;","","\tif (NIL == shape) {","\t\tif (NIL == *next)","\t\t\t*next = src;","\t\tn = car(*next);","\t\t*next = cdr(*next);","\t\treturn n;","\t}","\tn = cons(NIL, NIL);","\tsave(n);","\tif (!integer_p(car(shape))) {","\t\tunsave(1);","\t\treturn error(\"reshape: expected integer, got\", car(shape));","\t}","\tk = intvalue(car(shape));","\tif (-1 == k) {","\t\tk = length(src)/2;","\t}","\tif (k \u003c 1) {","\t\tunsave(1);","\t\treturn error(\"reshape: range error\", car(shape));","\t}","\tfor (i = 0; i \u003c k; i++) {","\t\tnew = reshape3(cdr(shape), next, src);","\t\tif (!char_p(new))","\t\t\tstr = 0;","\t\tcar(n) = new;","\t\tif (i \u003c k - 1) {","\t\t\tnew = cons(NIL, NIL);","\t\t\tcdr(n) = new;","\t\t\tn = cdr(n);","\t\t}","\t}","\tn = unsave(1);","\tif (str) {","\t\tsave(n);","\t\tn = list_to_string(n);","\t\tunsave(1);","\t}","\treturn n;","}","","static cell joinstrs(cell x) {","\tcell\tn, last = NIL, new;","","\tn = cons(NIL, NIL);","\tsave(n);","\twhile (x != NIL) {","\t\tcar(n) = car(x);","\t\tif (string_p(car(x))) {","\t\t\twhile (cdr(x) != NIL \u0026\u0026 string_p(cadr(x))) {","\t\t\t\tnew = join(car(n), cadr(x));","\t\t\t\tcar(n) = new;","\t\t\t\tx = cdr(x);","\t\t\t}","\t\t}","\t\tnew = cons(NIL, NIL);","\t\tcdr(n) = new;","\t\tlast = n;","\t\tn = cdr(n);","\t\tx = cdr(x);","\t}","\tn = unsave(1);","\tif (NIL == last) {","\t\tn = NIL;","\t}","\telse {","\t\tcdr(last) = NIL;","\t\tif (string_p(car(n)) \u0026\u0026 NIL == cdr(n))","\t\t\tn = car(n);","\t}","\treturn n;","}","","static cell range(cell x) {","\tcell\tn, m, p, new;","\tint\ti, k,str = 0;","","\tif (list_p(x))","\t\tn = group(x);","\telse","\t\tn = group_string(x);","\tif (NIL == n)","\t\treturn string_p(x)? make_string(\"\", 0): NIL;","\tsave(n);","\tif (!atom_p(n))","\t\tfor (p = n; p != NIL; p = cdr(p))","\t\t\tcar(p) = caar(p);","\tk = intvalue(car(n));","\tif (string_p(x)) {","\t\tx = string_to_list(x, NIL);","\t\tstr = 1;","\t}","\tsave(x);","\tm = cons(NIL, NIL);","\tsave(m);","\tfor (i = 0, p = x; p != NIL; p = cdr(p), i++) {","\t\tif (i == k) {","\t\t\tcar(m) = car(p);","\t\t\tn = cdr(n);","\t\t\tif (NIL == n)","\t\t\t\tbreak;","\t\t\tk = intvalue(car(n));","\t\t\tnew = cons(NIL, NIL);","\t\t\tcdr(m) = new;","\t\t\tm = cdr(m);","\t\t}","\t}","\tn = unsave(1);","\tif (str) {","\t\tcar(Stack) = n;","\t\tn = list_to_string(n);","\t}","\tunsave(2);","\treturn n;","}","","static cell reshape(cell x, cell y) {","\tif (atom_p(x))","\t\tx = cons(x, NIL);","\tsave(x);","\tcar(Stack) = x;","\tx = joinstrs(x);","\tcar(Stack) = x;","\tif (string_p(x)) {","\t\tx = string_to_list(x, NIL);","\t\tcar(Stack) = x;","\t}","\tif (atom_p(y))","\t\ty = cons(y, NIL);","\tsave(y);","\tx = reshape3(y, \u0026x, x);","\tunsave(2);","\treturn x;","}","","static cell take(cell x, int k) {","\tcell\ta, n, m;","\tint\tr = 0;","","\tif (NIL == x || 0 == k)","\t\treturn NIL;","\ta = x;","\tif (k \u003c 0) {","\t\ta = x = rev(x);","\t\tk = -k;","\t\tr = 1;","\t}","\tsave(x);","\tn = cons(NIL, NIL);","\tsave(n);","\twhile (k--) {","\t\tif (NIL == x)","\t\t\tx = a;","\t\tcar(n) = car(x);","\t\tx = cdr(x);","\t\tif (k) {","\t\t\tm = cons(NIL, NIL);","\t\t\tcdr(n) = m;","\t\t\tn = cdr(n);","\t\t}","\t}","\tx = car(Stack);","\tif (r) {","\t\tx = rev(x);","\t}","\tunsave(2);","\treturn x;","}","","static cell take_string(cell x, int k) {","\tcell\tn;","\tint\tlen, i, j;","","\tlen = string_len(x) - 1;","\tif (len \u003c 1 || 0 == k)","\t\treturn make_string(\"\", 0);","\tn = make_string(\"\", abs(k));","\tif (k \u003e 0) {","\t\tj = 0;","\t\tfor (i = 0; i \u003c k; i++) {","\t\t\tstring(n)[i] = string(x)[j];","\t\t\tif (++j \u003e= len)","\t\t\t\tj = 0;","\t\t}","\t}","\telse {","\t\tk = -k;","\t\tj = len-1;","\t\tfor (i = k-1; i \u003e= 0; i--) {","\t\t\tstring(n)[i] = string(x)[j];","\t\t\tif (--j \u003c 0)","\t\t\t\tj = len-1;","\t\t}","\t}","\treturn n;","}","","static cell rotate(cell x, cell y) {","\tint\tk, rot;","\tcell\tn, m, p;","","\tif (NIL == x)","\t\treturn NIL;","\tk = length(x);","\tif (k \u003c 2)","\t\treturn x;","\trot = intvalue(y) % k;","\tif (rot \u003e 0) {","\t\tn = take(x, -rot);","\t\tsave(n);","\t\tm = take(x, k-rot);","\t\tfor (p = n; cdr(p) != NIL; p = cdr(p))","\t\t\t;","\t\tcdr(p) = m;","\t\tunsave(1);","\t\treturn n;","\t}","\telse {","\t\tn = take(x, -rot);","\t\tsave(n);","\t\tfor (p = x; rot++; p = cdr(p))","\t\t\t;","\t\tp = flatcopy(p, \u0026m);","\t\tcdr(m) = n;","\t\tunsave(1);","\t\treturn p;","\t}","}","","static cell rotate_string(cell x, cell y) {","\tint\tk, rot;","\tcell\tn;","","\tk = string_len(x) - 1;","\tif (0 == k)","\t\treturn x;","\trot = intvalue(y) % k;","\tif (k \u003c 2 || 0 == rot)","\t\treturn x;","\tif (rot \u003e 0) {","\t\tn = make_string(\"\", k);","\t\tmemcpy(string(n), string(x)+k-rot, rot);","\t\tmemcpy(string(n)+rot, string(x), k-rot);","\t\treturn n;","\t}","\telse {","\t\trot = -rot;","\t\tn = make_string(\"\", k);","\t\tmemcpy(string(n), string(x)+rot, k-rot);","\t\tmemcpy(string(n)+k-rot, string(x), rot);","\t\treturn n;","\t}","}","","static cell eqv_p(cell a, cell b) {","\tif (a == b)","\t\treturn 1;","\tif (number_p(a) \u0026\u0026 number_p(b))","\t\treturn real_equal_p(a, b);","\treturn 0;","}","","static cell common_prefix(cell x, cell y) {","\tcell\tn, p, new;","","\tif (atom_p(x) || atom_p(y))","\t\treturn NIL;","\tp = n = cons(NIL, NIL);","\tsave(n);","\twhile (x != NIL \u0026\u0026 y != NIL) {","\t\tif (!eqv_p(car(x), car(y)))","\t\t\tbreak;","\t\tcar(n) = car(x);","\t\tp = n;","\t\tnew = cons(NIL, NIL);","\t\tcdr(n) = new;","\t\tn = cdr(n);","\t\tx = cdr(x);","\t\ty = cdr(y);","\t}","\tcdr(p) = NIL;","\tn = unsave(1);","\treturn NIL == car(n)? NIL: n;","}","","static cell shape(cell x) {","\tcell\ts, s2, p, new;","","\tif (string_p(x))","\t\treturn cons(make_integer(string_len(x)-1), NIL);","\tif (atom_p(x))","\t\treturn Zero;","\tif (NIL == cdr(x))","\t\treturn cons(One, NIL);","\ts = shape(car(x));","\tsave(s);","\tfor (p = cdr(x); p != NIL; p = cdr(p)) {","\t\ts2 = shape(car(p));","\t\tsave(s2);","\t\tnew = common_prefix(s, s2);","\t\tcadr(Stack) = new;","\t\tunsave(1);","\t\ts = car(Stack);","\t}","\ts2 = make_integer(length(x));","\ts = unsave(1);","\tif (!bignum_equal_p(s2, One))","\t\ts = cons(s2, s);","\treturn s;","}","","static cell split(cell x, cell y) {","\tcell\tgrp;","\tcell\tn, m, new;","\tint\ti = -1, k = -1;","","\tif (NIL == x)","\t\treturn NIL;","\tif (integer_p(y))","\t\ty = cons(y, NIL);","\tsave(y);","\tgrp = y;","\tn = cons(NIL, NIL);","\tsave(n);","\tm = cons(NIL, NIL);","\tsave(m);","\twhile (x != NIL) {","\t\tif (i \u003e= k) {","\t\t\tif (!integer_p(car(y))) {","\t\t\t\tunsave(3);","\t\t\t\treturn error(\"split: expected integer, got\",","\t\t\t\t\t\tcar(y));","\t\t\t}","\t\t\tif (i \u003e= 0) {","\t\t\t\tcar(n) = unsave(1);","\t\t\t\tm = cons(NIL, NIL);","\t\t\t\tsave(m);","\t\t\t\tnew = cons(NIL, NIL);","\t\t\t\tcdr(n) = new;","\t\t\t\tn = cdr(n);","\t\t\t\ty = cdr(y);","\t\t\t\tif (NIL == y)","\t\t\t\t\ty = grp;","\t\t\t}","\t\t\tk = intvalue(car(y));","\t\t\tif (k \u003c 1) {","\t\t\t\tunsave(3);","\t\t\t\treturn error(\"split: range error\",","\t\t\t\t\t\tmake_integer(k));","\t\t\t}","\t\t\ti = 0;","\t\t}","\t\tcar(m) = car(x);","\t\tif (cdr(x) != NIL \u0026\u0026 i \u003c k-1) {","\t\t\tnew = cons(NIL, NIL);","\t\t\tcdr(m) = new;","\t\t\tm = cdr(m);","\t\t}","\t\tx = cdr(x);","\t\ti++;","\t}","\tcar(n) = unsave(1);","\tn = unsave(1);","\tunsave(1);","\treturn n;","}","","static cell split_string(cell x, cell y) {","\tcell\tgrp;","\tcell\tn, new;","\tint\ti, k, len;","","\tlen = string_len(x) - 1;","\tif (len \u003c 1)","\t\treturn NIL;","\tif (integer_p(y))","\t\ty = cons(y, NIL);","\tsave(y);","\tgrp = y;","\tn = cons(NIL, NIL);","\tsave(n);","\ti = 0;","\twhile (i \u003c len) {","\t\tif (!integer_p(car(y))) {","\t\t\tunsave(2);","\t\t\treturn error(\"split: expected integer, got\", car(y));","\t\t}","\t\tk = intvalue(car(y));","\t\tif (k \u003c 1) {","\t\t\tunsave(3);","\t\t\treturn error(\"split: range error\", car(y));","\t\t}","\t\ty = cdr(y);","\t\tif (NIL == y)","\t\t\ty = grp;","\t\tif (k \u003e len-i)","\t\t\tk = len-i;","\t\tnew = make_string(\"\", k);","\t\tmemcpy(string(new), string(x)+i, k);","\t\tstring(new)[k] = 0;","\t\tcar(n) = new;","\t\ti += k;","\t\tif (i \u003c len) {","\t\t\tnew = cons(NIL, NIL);","\t\t\tcdr(n) = new;","\t\t\tn = cdr(n);","\t\t}","\t}","\tn = unsave(1);","\tunsave(1);","\treturn n;","}","","static int anylist(cell x) {","\tcell    p; ","","\tfor (p=x; p != NIL; p = cdr(p))","\t\tif (pair_p(car(p)))","\t\t\treturn 1; ","\treturn 0;","}","","static int anynil(cell x) {","\tcell    p; ","","\tfor (p=x; p != NIL; p = cdr(p))","\t\tif (NIL == car(p))","\t\t\treturn 1; ","\treturn 0;","}","","static cell transpose(cell x) {","\tcell\tn, m, p, q, dummy, new;","","\tif (atom_p(x) || !anylist(x))","\t\treturn x;","\tsave(flatcopy(x, \u0026dummy));","\tn = cons(NIL, NIL);","\tsave(n);","\tfor (;;) {","\t\tif (anynil(cadr(Stack)))","\t\t\tbreak;","\t\tm = cons(NIL, NIL);","\t\tsave(m);","\t\tfor (p=caddr(Stack); p != NIL; p = cdr(p)) {","\t\t\tq = car(p);","\t\t\tif (atom_p(q)) {","\t\t\t\tcar(m) = q;","\t\t\t}","\t\t\telse {","\t\t\t\tcar(m) = car(q);","\t\t\t\tcar(p) = cdar(p);","\t\t\t}","\t\t\tif (cdr(p) != NIL) {","\t\t\t\tnew = cons(NIL, NIL);","\t\t\t\tcdr(m) = new;","\t\t\t\tm = cdr(m);","\t\t\t}","\t\t}","\t\tm = unsave(1);","\t\tcar(n) = m;","\t\tif (anynil(cadr(Stack)))","\t\t\tbreak;","\t\tnew = cons(NIL, NIL);","\t\tcdr(n) = new;","\t\tn = cdr(n);","\t}","\tn = unsave(1);","\tif (anylist(unsave(1)))","\t\terror(\"transpose: shape error\", x);","\treturn n;","}","","/*"," * Virtual Machine"," */","","static void push(cell x) {","\tDstack = cons(x, Dstack);","}","","static cell pop(void) {","\tcell\tn;","","\tif (NIL == Dstack)","\t\treturn error(\"stack underflow\", VOID);","\tn = car(Dstack);","\tDstack = cdr(Dstack);","\treturn n;","}","","static cell\t(*F2)(cell x, cell y);","static cell\t(*F1)(cell x);","static char\t*N, B[100];","","static cell rec2(cell x, cell y) {","\tcell\tn, p, q, new;","\tchar    *s;","","\tif (atom_p(x) \u0026\u0026 atom_p(y))","\t\treturn (*F2)(x, y);","\tn = cons(NIL, NIL);","\tsave(n);","\tif (list_p(x) \u0026\u0026 list_p(y)) {","\t\tfor (p=x, q=y; p != NIL \u0026\u0026 q != NIL; p = cdr(p), q = cdr(q)) {","\t\t\tnew = rec2(car(p), car(q));","\t\t\tcar(n) = new;","\t\t\tif (cdr(p) != NIL) {","\t\t\t\tnew = cons(NIL, NIL);","\t\t\t\tcdr(n) = new;","\t\t\t\tn = cdr(n);","\t\t\t}","\t\t}","\t\tif (p != NIL || q != NIL) {","\t\t\tn = cons(y, NIL);","\t\t\tn = cons(x, n);","\t\t\tunsave(1);","\t\t\t// sprintf(B, \"%s: shape error\", N);","\t\t\tB[0] = '\\0';","\t\t\ts = strcat(B, N);","\t\t\ts = strcat(s, \": shape error\");","\t\t\treturn error(B, n);","\t\t}","\t}","\telse if (list_p(x)) {","\t\tfor (p=x; p != NIL; p = cdr(p)) {","\t\t\tnew = rec2(car(p), y);","\t\t\tcar(n) = new;","\t\t\tif (cdr(p) != NIL) {","\t\t\t\tnew = cons(NIL, NIL);","\t\t\t\tcdr(n) = new;","\t\t\t\tn = cdr(n);","\t\t\t}","\t\t}","\t}","\telse if (list_p(y)) {","\t\tfor (p=y; p != NIL; p = cdr(p)) {","\t\t\tnew = rec2(x, car(p));","\t\t\tcar(n) = new;","\t\t\tif (cdr(p) != NIL) {","\t\t\t\tnew = cons(NIL, NIL);","\t\t\t\tcdr(n) = new;","\t\t\t\tn = cdr(n);","\t\t\t}","\t\t}","\t}","\treturn unsave(1);","}","","static void dyadrec(char *s, cell (*f)(cell, cell), cell x, cell y) {","\tcell\tr;","","\tN = s;","\tF2 = f;","\tr = rec2(x, y);","\tDstack = cdr(Dstack);","\tcar(Dstack) = r;","}","","static cell rec1(cell x) {","\tcell\tn, p, new;","","\tif (atom_p(x))","\t\treturn (*F1)(x);","\tn = cons(NIL, NIL);","\tsave(n);","\tfor (p=x; p != NIL; p = cdr(p)) {","\t\tnew = rec1(car(p));","\t\tcar(n) = new;","\t\tif (cdr(p) != NIL) {","\t\t\tnew = cons(NIL, NIL);","\t\t\tcdr(n) = new;","\t\t\tn = cdr(n);","\t\t}","\t}","\treturn unsave(1);","}","","static void monadrec(char *s, cell (*f)(cell), cell x) {","\tcell\tr;","","\tN = s;","\tF1 = f;","\tr = rec1(x);","\tcar(Dstack) = r;","}","","static void save_vars(cell vars) {","\tcell\tn, v;","","\tfor (v = vars; v != NIL; v = cdr(v)) {","\t\tif (!variable_p(car(v))) {","\t\t\terror(\"non-variable in variable list\", vars);","\t\t\treturn;","\t\t}","\t\tn = cons(var_value(car(v)), car(Locals));","\t\tvar_value(car(v)) = NO_VALUE;","\t\tcar(Locals) = n;","\t}","\tn = cons(rev(vars), car(Locals));","\tcar(Locals) = n;","}","","static void unsave_vars(void) {","\tcell\tv, a;","","\tvar_value(S_thisfn) = caar(Locals);","\tcar(Locals) = cdar(Locals);","\tif (car(Locals) != NIL) {","\t\tv = caar(Locals);","\t\tfor (a = cdar(Locals); a != NIL; a = cdr(a)) {","\t\t\tvar_value(car(v)) = car(a);","\t\t\tv = cdr(v);","\t\t}","\t}","\tLocals = cdr(Locals);","}","","#define ONE_ARG(name) \\","\tif (NIL == Dstack) { \\","\t\terror(\"too few arguments\", make_variable(name, NIL)); \\","\t\treturn; \\","\t}","","#define TWO_ARGS(name) \\","\tif (NIL == Dstack || NIL == cdr(Dstack)) { \\","\t\terror(\"too few arguments\", make_variable(name, NIL)); \\","\t\treturn; \\","\t}","","#define THREE_ARGS(name) \\","\tif (NIL == Dstack || NIL == cdr(Dstack) || NIL == cddr(Dstack)) { \\","\t\terror(\"too few arguments\", make_variable(name, NIL)); \\","\t\treturn; \\","\t}","","static void unknown1(char *name) {","\tcell\tn;","\tchar\tb[100];","\tchar    *s;","","\tn = cons(car(Dstack), NIL);","\t// sprintf(b, \"%s: type error\", name);","\tb[0] = '\\0';","\ts = strcat(b, name);","\ts = strcat(s, \": type error\");","\terror(b, n);","}","","static void unknown2(char *name) {","\tcell\tn;","\tchar\tb[100];","\tchar    *s;","","\tn = cons(car(Dstack), NIL);","\tn = cons(cadr(Dstack), n);","\t// sprintf(b, \"%s: type error\", name);","\tb[0] = '\\0';","\ts = strcat(b, name);","\ts = strcat(s, \": type error\");","\terror(b, n);","}","","static void unknown3(char *name) {","\tcell\tn;","\tchar\tb[100];","\tchar    *s;","","\tn = cons(car(Dstack), NIL);","\tn = cons(cadr(Dstack), n);","\tn = cons(caddr(Dstack), n);","\t// sprintf(b, \"%s: type error\", name);","\ts = strcat(b, name);","\ts = strcat(s, \": type error\");","\terror(b, n);","}","","static void binop(cell (*op)(cell, cell), cell x, cell y) {","\tcell\tr;","","\tr = op(y, x);","\tpop();","\tcar(Dstack) = r;","}","","/*"," * Operators (primitive functions)"," */","","static void op_amend(void) {","\tcell\tx, y;","","\tTWO_ARGS(\"amend\")","\ty = cadr(Dstack);","\tx = car(Dstack);","\tif (list_p(y) \u0026\u0026 list_p(x)) {","\t\tx = amend(x, y);","\t\tDstack = cdr(Dstack);","\t\tcar(Dstack) = x;","\t\treturn;","\t}","\tif (string_p(y) \u0026\u0026 list_p(x)) {","\t\tx = amend_string(x, y);","\t\tDstack = cdr(Dstack);","\t\tcar(Dstack) = x;","\t\treturn;","\t}","\tunknown2(\"amend\");","}","","static void op_amendd(void) {","\tcell\tx, y;","","\tTWO_ARGS(\"amendd\")","\ty = cadr(Dstack);","\tx = car(Dstack);","\tif (pair_p(y) \u0026\u0026 pair_p(x)) {","\t\tx = amend_in_depth(cdr(x), y, car(x));","\t\tDstack = cdr(Dstack);","\t\tcar(Dstack) = x;","\t\treturn;","\t}","\tunknown2(\"amendd\");","}","","static void op_apply(void) {","\tcell\tx, y;","\tcell\tn, m, f;","\tint\tna;","","\tTWO_ARGS(\"apply\")","\ty = cadr(Dstack);","\tx = car(Dstack);","\tif (function_p(y)) {","\t\tif (!list_p(x)) {","\t\t\tx = cons(x, NIL);","\t\t\tcar(Dstack) = x;","\t\t}","\t\tna = fun_arity(y);","\t\tif (na != length(x)) {","\t\t\terror(\"apply: wrong number of arguments\", x);","\t\t\treturn;","\t\t}","\t\tif (NIL == x) {","\t\t\tn = cons(S_pop0, NIL);","\t\t\tn = cons(S_call0, n);","\t\t\tn = cons(y, n);","\t\t\tDstack = cdr(Dstack);","\t\t\tcar(Dstack) = n;","\t\t}","\t\telse {","\t\t\tf = flatcopy(x, \u0026m);","\t\t\tDstack = cdr(Dstack);","\t\t\tcar(Dstack) = f;","\t\t\tn = cons(1==na? S_pop1: 2==na? S_pop2: S_pop3, NIL);","\t\t\tn = cons(1==na? S_call1: 2==na? S_call2: S_call3, n);","\t\t\tn = cons(y, n);","\t\t\tcdr(m) = n;","\t\t}","\t\tState = S_APPLY;","\t\treturn;","\t}","\tunknown2(\"apply\");","}","","static void op_atom(void) {","\tcell\tx;","","\tONE_ARG(\"atom\");","\tx = car(Dstack);","\tcar(Dstack) = string_p(x) \u0026\u0026 !empty_p(x)? Zero: atom_p(x)? One: Zero;","}","","#define has_locals(x) \\","\t(list_p(car(x)) \u0026\u0026 list_p(cdr(x)) \u0026\u0026 S_clear == cadr(x))","","static void call(int arity) {","\tcell\tx, y, z, f, n;","\tchar\tname[] = \"call\";","","\tif (3 == arity) {","\t\tif (\tNIL == Dstack ||","\t\t\tNIL == cdr(Dstack) ||","\t\t\tNIL == cddr(Dstack) ||","\t\t\tNIL == cdddr(Dstack)","\t\t) {","\t\t\terror(\"too few arguments\", make_variable(name, NIL));","\t\t\treturn;","\t\t}","\t\ty = cdr(Dstack);","\t\tz = cdddr(Dstack);","\t\tx = car(z);","\t\tcar(z) = car(y);","\t\tcar(y) = x;","\t}","\telse if (2 == arity) {","\t\tTHREE_ARGS(name);","\t\ty = cdr(Dstack);","\t\tz = cddr(Dstack);","\t\tx = car(z);","\t\tcar(z) = car(y);","\t\tcar(y) = x;","\t}","\telse if (1 == arity) {","\t\tTWO_ARGS(name);","\t}","\telse {","\t\tONE_ARG(name);","\t}","\tx = car(Dstack);","\tif (function_p(x)) {","\t\tif (fun_arity(x) != arity) {","\t\t\terror(\"wrong arity\", x);","\t\t\treturn;","\t\t}","\t\tLocals = cons(NIL, Locals);","\t\tf = x;","\t\tx = fun_body(x);","\t\tif (has_locals(x)) {","\t\t\tsave_vars(car(x));","\t\t\tx = cddr(x);","\t\t}","\t\tn = cons(var_value(S_thisfn), car(Locals));","\t\tcar(Locals) = n;","\t\tvar_value(S_thisfn) = f;","\t\tcar(Dstack) = x;","\t\tState = S_APPLY;","\t\treturn;","\t}","\tunknown1(name);","}","","static void op_call0(void) { call(0); }","static void op_call1(void) { call(1); }","static void op_call2(void) { call(2); }","static void op_call3(void) { call(3); }","","static cell safe_char(cell x) {","\tint\tk;","","\tif (integer_p(x)) {","\t\tk = intvalue(x);","\t\tif (k \u003c 0 || k \u003e 255)","\t\t\treturn error(\"char: domain error\", x);","\t\treturn make_char(k);","\t}","\treturn error(\"char: type error\", cons(x, NIL));","}","","static void op_char(void) {","\tcell\tx;","","\tONE_ARG(\"char\");","\tx = car(Dstack);","\tmonadrec(\"char\", safe_char, x);","}","","static void op_clear(void) {","\tpop();","}","","static void conv(int s) {","\tcell\tx, y, n;","","\tTWO_ARGS(\"converge\")","\ty = cadr(Dstack);","\tx = car(Dstack);","\tif (function_p(x)) {","\t\tif (S_CONV == s)","\t\t\tpush(y);","\t\telse","\t\t\tpush(cons(y, NIL));","\t\tpush(Barrier);","\t\tn = cons(x, NIL);","\t\tpush(cons(y, n));","\t\tState = s;","\t\treturn;","\t}","\tunknown2(\"converge\");","}","","static void op_conv(void) {","\tconv(S_CONV);","}","","static void op_cut(void) {","\tcell\tx, y;","","\tTWO_ARGS(\"cut\")","\ty = cadr(Dstack);","\tx = car(Dstack);","\tif ((list_p(y) || integer_p(y)) \u0026\u0026 list_p(x)) {","\t\tbinop(cut, x, y);","\t\treturn;","\t}","\tif ((list_p(y) || integer_p(y)) \u0026\u0026 string_p(x)) {","\t\tbinop(cut_string, x, y);","\t\treturn;","\t}","\tunknown2(\"cut\");","}","","static void op_def(void) {","\tcell\tx, y, n;","\tchar\tname[TOKEN_LENGTH+1];","","\tTWO_ARGS(\"define\")","\ty = cadr(Dstack);","\tx = car(Dstack);","\tif (symbol_p(y)) {","\t\ty = make_variable(symbol_name(y), NIL);","\t\tvar_value(y) = x;","\t\tif (Module != UNDEFINED) {","\t\t\tModule = cons(y, Module);","\t\t\tstrcpy(name, var_name(y));","\t\t\tmkglobal(name);","\t\t\tn = make_variable(name, NIL);","\t\t\tvar_value(n) = var_value(y);","\t\t}","\t\tDstack = cdr(Dstack);","\t\tcar(Dstack) = x;","\t\treturn;","\t}","\tunknown2(\"define\");","}","","static cell safe_div(cell x, cell y) {","\tif (number_p(x) \u0026\u0026 number_p(y)) {","\t\treturn real_divide(x, y);","\t}","\treturn error(\"divide: type error\", cons(x, cons(y, NIL)));","}","","static void op_div(void) {","\tcell\tx, y;","","\tTWO_ARGS(\"divide\")","\ty = cadr(Dstack);","\tx = car(Dstack);","\tdyadrec(\"divide\", safe_div, y, x);","}","","static void op_down(void) {","\tcell\tx;","","\tONE_ARG(\"grade-down\");","\tx = car(Dstack);","\tif (list_p(x)) {","\t\tx = grade(more, x);","\t\tcar(Dstack) = x;","\t\treturn;","\t}","\tif (string_p(x)) {","\t\tx = string_to_list(x, NIL);","\t\tcar(Dstack) = x;","\t\tx = grade(more, x);","\t\tcar(Dstack) = x;","\t\treturn;","\t}","\tunknown1(\"grade-down\");","}","","static void op_drop(void) {","\tcell\tx, y;","","\tTWO_ARGS(\"drop\")","\ty = cadr(Dstack);","\tx = car(Dstack);","\tif (integer_p(y) \u0026\u0026 list_p(x)) {","\t\tbinop(drop, y, x);","\t\treturn;","\t}","\tif (integer_p(y) \u0026\u0026 string_p(x)) {","\t\tbinop(drop_string, y, x);","\t\treturn;","\t}","\tif (dictionary_p(x)) {","\t\tx = dict_remove(x, y);","\t\tDstack = cdr(Dstack);","\t\tcar(Dstack) = x;","\t\treturn;","\t}","\tunknown2(\"drop\");","}","","static void op_each(void) {","\tcell\tx, y, n;","","\tTWO_ARGS(\"each\")","\ty = cadr(Dstack);","\tx = car(Dstack);","\tif ((list_p(y) || string_p(y)) \u0026\u0026 function_p(x)) {","\t\tif (NIL == y || empty_p(y)) {","\t\t\tDstack = cdr(Dstack);","\t\t\tcar(Dstack) = y;","\t\t}","\t\telse {","\t\t\tpush(NIL);","\t\t\tpush(Barrier);","\t\t\tn = cons(x, NIL);","\t\t\tif (string_p(y)) {","\t\t\t\tsave(n);","\t\t\t\tpush(cons(make_char(string(y)[0]), n));","\t\t\t\tunsave(1);","\t\t\t\ty = string_to_list(y, STRING_NIL);","\t\t\t}","\t\t\telse {","\t\t\t\tpush(cons(car(y), n));","\t\t\t}","\t\t\tcadr(cdddr(Dstack)) = cdr(y);","\t\t\tState = S_EACH;","\t\t}","\t\treturn;","\t}","\tif (dictionary_p(y) \u0026\u0026 function_p(x)) {","\t\tx = dict_to_list(y);","\t\tcadr(Dstack) = x;","\t\top_each();","\t\treturn;","\t}","\tif (function_p(x)) {","\t\tn = cons(x, NIL);","\t\tn = cons(y, n);","\t\tDstack = cdr(Dstack);","\t\tcar(Dstack) = n;","\t\tState = S_APPLY;","\t\treturn;","\t}","\tunknown2(\"each\");","}","","static void op_each2(void) {","\tcell\tx, y, z, n;","","\tTHREE_ARGS(\"each-2\")","\tz = caddr(Dstack);","\ty = cadr(Dstack);","\tx = car(Dstack);","\tif (\t(list_p(z) || string_p(z)) \u0026\u0026","\t\t(list_p(y) || string_p(y)) \u0026\u0026","\t\tfunction_p(x)","\t) {","\t\tif (empty_p(y) || empty_p(z)) {","\t\t\tDstack = cddr(Dstack);","\t\t\tif (NIL == y || NIL == z)","\t\t\t\tx = NIL;","\t\t\telse","\t\t\t\tx = make_string(\"\", 0);","\t\t\tcar(Dstack) = x;","\t\t}","\t\telse {","\t\t\tif (string_p(y)) {","\t\t\t\ty = string_to_list(y, STRING_NIL);","\t\t\t\tcadr(Dstack) = y;","\t\t\t}","\t\t\tif (string_p(z)) {","\t\t\t\tz = string_to_list(z, STRING_NIL);","\t\t\t\tcaddr(Dstack) = z;","\t\t\t}","\t\t\tpush(NIL);","\t\t\tpush(Barrier);","\t\t\tn = cons(x, NIL);","\t\t\tn = cons(car(y), n);","\t\t\tpush(cons(car(z), n));","\t\t\tcadr(cdddr(Dstack)) = cdr(y);","\t\t\tcaddr(cdddr(Dstack)) = cdr(z);","\t\t\tState = S_EACH2;","\t\t}","\t\treturn;","\t}","\tif (function_p(x)) {","\t\tn = cons(x, NIL);","\t\tn = cons(y, n);","\t\tn = cons(z, n);","\t\tDstack = cddr(Dstack);","\t\tcar(Dstack) = n;","\t\tState = S_APPLY;","\t\treturn;","\t}","\tunknown3(\"each-2\");","}","","static void op_eachl(void) {","\tcell\tx, y, z, n;","","\tTHREE_ARGS(\"each-left\")","\tz = caddr(Dstack);","\ty = cadr(Dstack);","\tx = car(Dstack);","\tif ((list_p(y) || string_p(y)) \u0026\u0026 function_p(x)) {","\t\tif (NIL == y || empty_p(y)) {","\t\t\tDstack = cddr(Dstack);","\t\t\tcar(Dstack) = y;","\t\t}","\t\telse {","\t\t\tif (string_p(y)) {","\t\t\t\ty = string_to_list(y, STRING_NIL);","\t\t\t\tcadr(Dstack) = y;","\t\t\t}","\t\t\tpush(NIL);","\t\t\tpush(Barrier);","\t\t\tn = cons(x, NIL);","\t\t\tn = cons(car(y), n);","\t\t\tpush(cons(z, n));","\t\t\tcadr(cdddr(Dstack)) = cdr(y);","\t\t\tState = S_EACHL;","\t\t}","\t\treturn;","\t}","\tif (function_p(x)) {","\t\tn = cons(x, NIL);","\t\tn = cons(y, n);","\t\tn = cons(z, n);","\t\tDstack = cddr(Dstack);","\t\tcar(Dstack) = n;","\t\tState = S_APPLY;","\t\treturn;","\t}","\tunknown3(\"each-left\");","}","","static void op_eachp(void) {","\tcell\tx, y, n;","","\tTWO_ARGS(\"each-pair\")","\ty = cadr(Dstack);","\tx = car(Dstack);","\tif ((list_p(y) || string_p(y)) \u0026\u0026 function_p(x)) {","\t\tif (\tNIL == y || NIL == cdr(y) ||","\t\t\tempty_p(y) || (string_p(y) \u0026\u0026 string_len(y) \u003c 3)","\t\t) {","\t\t\tDstack = cdr(Dstack);","\t\t\tcar(Dstack) = y;","\t\t}","\t\telse {","\t\t\tif (string_p(y)) {","\t\t\t\ty = string_to_list(y, STRING_NIL);","\t\t\t\tcadr(Dstack) = y;","\t\t\t}","\t\t\tpush(NIL);","\t\t\tpush(Barrier);","\t\t\tn = cons(x, NIL);","\t\t\tn = cons(cadr(y), n);","\t\t\tpush(cons(car(y), n));","\t\t\tcadr(cdddr(Dstack)) = cdr(y);","\t\t\tState = S_EACHP;","\t\t}","\t\treturn;","\t}","\tDstack = cdr(Dstack);","\tcar(Dstack) = y;","}","","static void op_eachr(void) {","\tcell\tx, y, z, n;","","\tTHREE_ARGS(\"each-right\")","\tz = caddr(Dstack);","\ty = cadr(Dstack);","\tx = car(Dstack);","\tif ((list_p(y) || string_p(y)) \u0026\u0026 function_p(x)) {","\t\tif (NIL == y || empty_p(y)) {","\t\t\tDstack = cddr(Dstack);","\t\t\tcar(Dstack) = y;","\t\t}","\t\telse {","\t\t\tif (string_p(y)) {","\t\t\t\ty = string_to_list(y, STRING_NIL);","\t\t\t\tcadr(Dstack) = y;","\t\t\t}","\t\t\tpush(NIL);","\t\t\tpush(Barrier);","\t\t\tn = cons(x, NIL);","\t\t\tn = cons(z, n);","\t\t\tpush(cons(car(y), n));","\t\t\tcadr(cdddr(Dstack)) = cdr(y);","\t\t\tState = S_EACHR;","\t\t}","\t\treturn;","\t}","\tif (function_p(x)) {","\t\tn = cons(x, NIL);","\t\tn = cons(z, n);","\t\tn = cons(y, n);","\t\tDstack = cddr(Dstack);","\t\tcar(Dstack) = n;","\t\tState = S_APPLY;","\t\treturn;","\t}","\tunknown3(\"each-right\");","}","","static void op_enum(void) {","\tcell\tx, n, new;","\tint\ti, k;","","\tONE_ARG(\"enumerate\");","\tx = car(Dstack);","\tif (integer_p(x)) {","\t\tk = intvalue(x);","\t\tif (k \u003c 0) {","\t\t\terror(\"enumerate: domain error\", x);","\t\t\treturn;","\t\t}","\t\tif (0 == k) {","\t\t\tcar(Dstack) = NIL;","\t\t\treturn;","\t\t}","\t\tn = cons(NIL, NIL);","\t\tsave(n);","\t\tfor (i = 0; i \u003c k; i++) {","\t\t\tnew = make_integer(i);","\t\t\tcar(n) = new;","\t\t\tif (i \u003c k-1) {","\t\t\t\tnew = cons(NIL, NIL);","\t\t\t\tcdr(n) = new;","\t\t\t\tn = cdr(n);","\t\t\t}","\t\t}","\t\tcar(Dstack) = unsave(1);","\t\treturn;","\t}","\tunknown1(\"enumerate\");","}","","static int compare(char *name,","\t    int (*ncmp)(cell a, cell b),","\t    int (*ccmp)(cell a, cell b),","\t    int (*scmp)(char *s1, char *s2, int k1, int k2),","\t    cell x, cell y",") {","\tchar\t*sx, *sy;","\tint\tkx, ky;","","\tif (number_p(y) \u0026\u0026 number_p(x))","\t\treturn ncmp(y, x);","\tif (char_p(y) \u0026\u0026 char_p(x))","\t\treturn ccmp(y, x);","\tif (variable_p(x))","\t\treturn compare(name, ncmp, ccmp, scmp, var_symbol(x), y);","\tif (variable_p(y))","\t\treturn compare(name, ncmp, ccmp, scmp, x, var_symbol(y));","\tif ((string_p(x) \u0026\u0026 string_p(y)) || (symbol_p(x) \u0026\u0026 symbol_p(y))) {","\t\tsx = string_p(x)? string(x): symbol_name(x);","\t\tsy = string_p(y)? string(y): symbol_name(y);","\t\tkx = string_p(x)? string_len(x): symbol_len(x);","\t\tky = string_p(y)? string_len(y): symbol_len(y);","\t\treturn scmp(sy, sx, ky, kx);","\t}","\tunknown2(name);","\treturn 0;","}","","static int str_equal_p(char *s1, char *s2, int k1, int k2) {","\treturn k1 == k2 \u0026\u0026 memcmp(s1, s2, k1) == 0;","}","","static int str_less_p(char *s1, char *s2, int k1, int k2) {","\tint\tk = k1 \u003c k2? k1: k2;","","\treturn memcmp(s1, s2, k) \u003c 0;","}","","static int chr_equal_p(cell x, cell y) {","\treturn char_value(x) == char_value(y);","}","","static int chr_less_p(cell x, cell y) {","\treturn char_value(x) \u003c char_value(y);","}","","static cell safe_eq_p(cell x, cell y) {","\treturn compare(\"equal\", real_equal_p, chr_equal_p, str_equal_p, y, x)?","\t\t\tOne: Zero;","}","","static void op_eq(void) {","\tcell\tx, y;","","\tTWO_ARGS(\"equal\")","\ty = cadr(Dstack);","\tx = car(Dstack);","\tdyadrec(\"equal\", safe_eq_p, y, x);","}","","static cell safe_gt_p(cell x, cell y) {","\treturn compare(\"more\", real_less_p, chr_less_p, str_less_p, x, y)?","\t\t\tOne: Zero;","}","","static void op_gt(void) {","\tcell\tx, y;","","\tTWO_ARGS(\"more\")","\ty = cadr(Dstack);","\tx = car(Dstack);","\tdyadrec(\"more\", safe_gt_p, y, x);","}","","static cell safe_lt_p(cell x, cell y) {","\treturn compare(\"less\", real_less_p, chr_less_p, str_less_p, y, x)?","\t\t\tOne: Zero;","}","","static void op_lt(void) {","\tcell\tx, y;","","\tTWO_ARGS(\"less\")","\ty = cadr(Dstack);","\tx = car(Dstack);","\tdyadrec(\"less\", safe_lt_p, y, x);","}","","static void op_expand(void) {","\tcell\tx;","","\tONE_ARG(\"expand\");","\tx = car(Dstack);","\tif (integer_p(x) || list_p(x)) {","\t\tx = expand(x);","\t\tcar(Dstack) = x;","\t\treturn;","\t}","\tunknown1(\"expand\");","}","","static void op_find(void) {","\tcell\tx, y, n;","","\tTWO_ARGS(\"find\")","\ty = cadr(Dstack);","\tx = car(Dstack);","\tif (list_p(y)) {","\t\tn = find(x, y);","\t\tDstack = cdr(Dstack);","\t\tcar(Dstack) = n;","\t\treturn;","\t}","\tif (string_p(y) \u0026\u0026 char_p(x)) {","\t\tn = find_string(x, y);","\t\tDstack = cdr(Dstack);","\t\tcar(Dstack) = n;","\t\treturn;","\t}","\tif (string_p(y) \u0026\u0026 string_p(x)) {","\t\tn = find_substring(x, y);","\t\tDstack = cdr(Dstack);","\t\tcar(Dstack) = n;","\t\treturn;","\t}","\tif (dictionary_p(y) \u0026\u0026 !dictionary_p(x)) {","\t\tx = dict_lookup(y, x);","\t\tDstack = cdr(Dstack);","\t\tcar(Dstack) = UNDEFINED==x? x: cadr(x);","\t\treturn;","\t}","\tunknown2(\"find\");","}","","static cell safe_floor(cell x) {","\tif (integer_p(x)) return x;","\tif (number_p(x)) {","\t\tx = real_floor(x);","\t\tif (real_exponent(x) \u003c S9_MANTISSA_SIZE)","\t\t\tx = real_to_bignum(x);","\t\treturn x;","\t}","\treturn error(\"floor: type error\", cons(x, NIL));","}","","static void op_floor(void) {","\tcell\tx;","","\tONE_ARG(\"floor\");","\tx = car(Dstack);","\tmonadrec(\"floor\", safe_floor, x);","}","","static int intpart(cell x) {","\tx = real_floor(x);","\tsave(x);","\tx = real_to_bignum(x);","\tunsave(1);","\treturn intvalue(x);","}","","static int fracpart(cell x) {","\tcell\tn;","","\tn = real_floor(x);","\tsave(n);","\tn = real_subtract(x, n);","\tn = real_mantissa(n);","\tunsave(1);","\treturn intvalue(n);","}","","static cell form(cell x, cell proto) {","\t#define L\t1024","\tchar\t*s, *p, buf[L];","\tcell\tn;","","\tif (string_len(x) \u003e L)","\t\treturn UNDEFINED;","\tstrcpy(buf, string(x));","\tif (integer_p(proto)) {","\t\tif (!integer_string_p(buf))","\t\t\treturn UNDEFINED;","\t\treturn string_to_bignum(buf);","\t}","\tif (real_p(proto)) {","\t\tif (!string_numeric_p(buf))","\t\t\treturn UNDEFINED;","\t\treturn string_to_real(buf);","\t}","\tif (string_p(proto)) {","\t\treturn x;","\t}","\tif (char_p(proto)) {","\t\tif (string_len(x) != 2)","\t\t\treturn UNDEFINED;","\t\treturn make_char(string(x)[0]);","\t}","\tif (symbol_p(proto)) {","\t\ts = string(x);","\t\tif (':' == s[0]) s++;","\t\tif (!isalpha(s[0]))","\t\t\treturn UNDEFINED;","\t\tfor (p = s; *p; p++)","\t\t\tif (!is_symbolic(*p))","\t\t\t\treturn UNDEFINED;","\t\tif (s != string(x)) {","\t\t\tn = make_string(\"\", string_len(x)-2);","\t\t\tstrcpy(string(n), string(x)+1);","\t\t\tsave(n);","\t\t\tn = string_to_symbol(n);","\t\t\tunsave(1);","\t\t\treturn n;","\t\t}","\t\treturn string_to_symbol(x);","\t}","\treturn x;","}","","static cell safe_form(cell x, cell y) {","\tif (string_p(x)) {","\t\treturn form(x, y);","\t}","\treturn error(\"form: expected string, got\", x);","}","","static void op_form(void) {","\tcell\tx, y;","","\tTWO_ARGS(\"form\");","\ty = cadr(Dstack);","\tx = car(Dstack);","\tdyadrec(\"form\", safe_form, x, y);","}","","static cell format_symbol(cell x) {","\tcell\tn;","","\tn = make_string(\"\", symbol_len(x));","\tstring(n)[0] = ':';","\tstrcpy(\u0026string(n)[1], symbol_name(x));","\treturn n;","}","","static cell safe_format(cell x) {","\tchar\tb[2];","","\tif (string_p(x))","\t\treturn x;","\tif (symbol_p(x))","\t\treturn format_symbol(x);","\tif (variable_p(x))","\t\treturn format_symbol(var_symbol(x));","\tif (integer_p(x))","\t\treturn bignum_to_string(x);","\tif (char_p(x)) {","\t\tb[0] = char_value(x);","\t\tb[1] = 0;","\t\treturn make_string(b, 1);","\t}","\tif (real_p(x))","\t\treturn real_to_string(x, 0);","\treturn UNDEFINED;","}","","static void op_format(void) {","\tcell\tx;","","\tONE_ARG(\"format\");","\tx = car(Dstack);","\tmonadrec(\"format\", safe_format, x);","}","","static cell safe_format2(cell x, cell y) {","\tcell\tn, m;","\tint\tk, kf, kp, off, p;","","\tif (integer_p(y)) {","\t\tk = intvalue(y);","\t\tkf = 0;","\t}","\telse if (real_p(y)) {","\t\tn = real_abs(y);","\t\tk = intpart(n);","\t\tkf = fracpart(n);","\t}","\telse {","\t\treturn error(\"format2: type error\", cons(x, cons(y, NIL)));","\t}","\tn = safe_format(x);","\tsave(n);","\tif (real_p(x) \u0026\u0026 strchr(string(n), 'e') == NULL \u0026\u0026 kf \u003e 0) {","\t\tk = abs(k);","\t\tkp = k;","\t\tk = abs(k) + kf+1;","\t\tp = strlen(strchr(string(n), '.')) - 1;","\t\toff = kp - string_len(n) + p + 2;","\t\tif (k \u003e= string_len(n) \u0026\u0026 p \u003c= kf) {","\t\t\tm = make_string(\"\", k);","\t\t\tmemset(string(m), ' ', k);","\t\t\tstring(m)[k] = 0;","\t\t\tmemcpy(string(m)+off, string(n), string_len(n)-1);","\t\t\tmemset(string(m)+k-kf+p, '0', kf-p);","\t\t\tn = m;","\t\t}","\t}","\telse {","\t\tif (abs(k) \u003e= string_len(n)) {","\t\t\tm = make_string(\"\", abs(k));","\t\t\tmemset(string(m), ' ', abs(k));","\t\t\tstring(m)[abs(k)] = 0;","\t\t\tif (k \u003e 0) {","\t\t\t\tmemcpy(string(m), string(n), string_len(n)-1);","\t\t\t}","\t\t\telse {","\t\t\t\tk = -k;","\t\t\t\tmemcpy(string(m)+k-string_len(n)+1, string(n),","\t\t\t\t\tstring_len(n));","\t\t\t}","\t\t\tn = m;","\t\t}","\t}","\tunsave(1);","\treturn n;","}","","static void op_format2(void) {","\tcell\tx, y;","","\tTWO_ARGS(\"format2\");","\ty = cadr(Dstack);","\tx = car(Dstack);","\tdyadrec(\"format2\", safe_format2, x, y);","}","","static void fun(int immed, int arity) {","\tcell\tx;","","\tONE_ARG(\"function\");","\tx = car(Dstack);","\tif (list_p(x)) {","\t\tx = make_function(x, immed, arity);","\t\tcar(Dstack) = x;","\t\treturn;","\t}","\tunknown1(\"function\");","}","","static void op_fun0(void) { fun(0, 0); }","static void op_fun1(void) { fun(0, 1); }","static void op_fun2(void) { fun(0, 2); }","static void op_fun3(void) { fun(0, 3); }","static void op_imm1(void) { fun(1, 1); }","static void op_imm2(void) { fun(1, 2); }","","static void op_group(void) {","\tcell\tx;","","\tONE_ARG(\"group\");","\tx = car(Dstack);","\tif (list_p(x)) {","\t\tx = group(x);","\t\tcar(Dstack) = x;","\t\treturn;","\t}","\tif (string_p(x)) {","\t\tx = group_string(x);","\t\tcar(Dstack) = x;","\t\treturn;","\t}","\tunknown1(\"group\");","}","","static void op_first(void) {","\tcell\tx;","","\tONE_ARG(\"first\");","\tx = car(Dstack);","\tif (pair_p(x)) {","\t\tcar(Dstack) = caar(Dstack);","\t\treturn;","\t}","\tif (string_p(x)) {","\t\tif (!empty_p(x))","\t\t\tx = make_char(string(x)[0]);","\t\tcar(Dstack) = x;","\t\treturn;","\t}","\t/* identity */","}","","static void op_if(void) {","\tcell\tx, y, z;","","\tTHREE_ARGS(\"if\")","\tz = caddr(Dstack);","\ty = cadr(Dstack);","\tx = car(Dstack);","\tif (list_p(y) \u0026\u0026 list_p(x)) {","\t\tDstack = cddr(Dstack);","\t\tif (false_p(z))","\t\t\tcar(Dstack) = x;","\t\telse","\t\t\tcar(Dstack) = y;","\t\tState = S_APPIF;","\t\treturn;","\t}","\tunknown3(\"if\");","}","","static void op_index(void) {","\tcell\tx, y;","","\tTWO_ARGS(\"index\")","\ty = cadr(Dstack);","\tx = car(Dstack);","\tif (function_p(y)) {","\t\top_apply();","\t\treturn;","\t}","\tif ((list_p(y) || string_p(y)) \u0026\u0026 (list_p(x) || integer_p(x))) {","\t\tif (string_p(y))","\t\t\ty = string_to_vector(y);","\t\telse","\t\t\ty = list_to_vector(y);","\t\tsave(y);","\t\tx = ndx(y, vector_len(y), x);","\t\tunsave(1);","\t\ty = cadr(Dstack);","\t\tcar(Dstack) = x; /* protect x */","\t\tif (string_p(y))","\t\t\tx = list_to_string(x);","\t\tDstack = cdr(Dstack);","\t\tcar(Dstack) = x;","\t\treturn;","\t}","\tunknown2(\"index\");","}","","static void op_indexd(void) {","\tcell\tx, y;","","\tTWO_ARGS(\"index-in-depth\")","\ty = cadr(Dstack);","\tx = car(Dstack);","\tif (function_p(y)) {","\t\top_apply();","\t\treturn;","\t}","\tif (pair_p(y) \u0026\u0026 (pair_p(x) || integer_p(x))) {","\t\tx = ndx_in_depth(y, x);","\t\tDstack = cdr(Dstack);","\t\tcar(Dstack) = x;","\t\treturn;","\t}","\tunknown2(\"index-in-depth\");","}","","static cell safe_intdiv(cell x, cell y) {","\tif (integer_p(x) \u0026\u0026 integer_p(y)) {","\t\tx = bignum_divide(x, y);","\t\tif (undefined_p(x))","\t\t\treturn error(\"division by zero\", VOID);","\t\treturn car(x);","\t}","\treturn error(\"integer-divide: type error\", cons(x, cons(y, NIL)));","}","","static void op_intdiv(void) {","\tcell\tx, y;","","\tTWO_ARGS(\"integer-divide\")","\ty = cadr(Dstack);","\tx = car(Dstack);","\tdyadrec(\"integer-divide\", safe_intdiv, y, x);","}","","static void iter(int s) {","\tcell\tx, y, z, n;","","\tTHREE_ARGS(\"iterate\")","\tz = caddr(Dstack);","\ty = cadr(Dstack);","\tx = car(Dstack);","\tif (integer_p(z) \u0026\u0026 function_p(x)) {","\t\tif (bignum_zero_p(z)) {","\t\t\tDstack = cddr(Dstack);","\t\t\tcar(Dstack) = y;","\t\t}","\t\telse {","\t\t\tn = bignum_abs(z);","\t\t\tcaddr(Dstack) = n;","\t\t\tif (S_S_ITER == s)","\t\t\t\tpush(cons(y, NIL));","\t\t\tpush(Barrier);","\t\t\tn = cons(x, NIL);","\t\t\tpush(cons(y, n));","\t\t\tState = s;","\t\t}","\t\treturn;","\t}","\tunknown3(\"iterate\");","}","","static void op_iter(void) {","\titer(S_ITER);","}","","static void op_join(void) {","\tcell\ty, x, n;","","\tTWO_ARGS(\"join\")","\ty = cadr(Dstack);","\tx = car(Dstack);","\tif (dictionary_p(x) \u0026\u0026 tuple_p(y)) {","\t\tx = dict_add(x, car(y), cadr(y));","\t\tDstack = cdr(Dstack);","\t\tcar(Dstack) = x;","\t\treturn;","\t}","\tif (tuple_p(x) \u0026\u0026 dictionary_p(y)) {","\t\tx = dict_add(y, car(x), cadr(x));","\t\tDstack = cdr(Dstack);","\t\tcar(Dstack) = x;","\t\treturn;","\t}","\tn = join(y, x);","\tDstack = cdr(Dstack);","\tcar(Dstack) = n;","}","","static void op_list(void) {","\tcell\tx, n;","","\tONE_ARG(\"list\");","\tx = car(Dstack);","\tif (char_p(x)) {","\t\tn = make_string(\"\", 1);","\t\tstring(n)[0] = char_value(x);","\t\tstring(n)[1] = 0;","\t\tcar(Dstack) = n;","\t\treturn;","\t}","\tx = cons(x, NIL);","\tcar(Dstack) = x;","}","","static void op_match(void) {","\tcell\tx, y;","","\tTWO_ARGS(\"match\")","\ty = cadr(Dstack);","\tx = car(Dstack);","\tx = match(x, y)? One: Zero;","\tDstack = cdr(Dstack);","\tcar(Dstack) = x;","}","","static cell safe_max(cell x, cell y) {","\tif (number_p(y) \u0026\u0026 number_p(x)) {","\t\treturn real_less_p(x, y)? y: x;","\t}","\treturn error(\"max: type error\", cons(x, cons(y, NIL)));","}","","static void op_max(void) {","\tcell\tx, y;","","\tTWO_ARGS(\"max\")","\ty = cadr(Dstack);","\tx = car(Dstack);","\tdyadrec(\"max\", safe_max, y, x);","}","","static cell safe_min(cell x, cell y) {","\tif (number_p(y) \u0026\u0026 number_p(x)) {","\t\treturn real_less_p(x, y)? x: y;","\t}","\treturn error(\"min: type error\", cons(x, cons(y, NIL)));","}","","static void op_min(void) {","\tcell\tx, y;","","\tTWO_ARGS(\"min\")","\ty = cadr(Dstack);","\tx = car(Dstack);","\tdyadrec(\"min\", safe_min, y, x);","}","","static cell safe_real_subtract(cell x, cell y) {","\tif (number_p(x) \u0026\u0026 number_p(y))","\t\treturn real_subtract(x, y);","\treturn error(\"minus: type error\", cons(x, cons(y, NIL)));","}","","static void op_minus(void) {","\tcell\tx, y;","","\tTWO_ARGS(\"minus\")","\ty = cadr(Dstack);","\tx = car(Dstack);","\tdyadrec(\"minus\", safe_real_subtract, y, x);","}","","static cell safe_negate(cell x) {","\tif (number_p(x))","\t\treturn real_negate(x);","\treturn error(\"negate: type error\", cons(x, NIL));","}","","static void op_neg(void) {","\tcell\tx;","","\tONE_ARG(\"negate\");","\tx = car(Dstack);","\tmonadrec(\"negate\", safe_negate, x);","}","","static void op_newdict(void) {","\tcell\tx;","","\tx = copy_dict(car(Dstack));","\tcar(Dstack) = x;","}","","static cell safe_not(cell x) {","\treturn false_p(x)? One: Zero;","}","","static void op_not(void) {","\tcell\tx;","","\tONE_ARG(\"not\");","\tx = car(Dstack);","\tmonadrec(\"negate\", safe_not, x);","}","","static void over(int s) {","\tcell\tx, y, n;","","\tTWO_ARGS(\"over\")","\ty = cadr(Dstack);","\tx = car(Dstack);","\tif ((list_p(y) || string_p(y)) \u0026\u0026 function_p(x)) {","\t\tn = cons(NIL, cddr(Dstack));","\t\tcddr(Dstack) = n;","\t\tif (NIL == y || empty_p(y)) {","\t\t\tDstack = cddr(Dstack);","\t\t\tcar(Dstack) = y;","\t\t}","\t\telse if (NIL == cdr(y)) {","\t\t\tDstack = cddr(Dstack);","\t\t\tif (S_OVER == s)","\t\t\t\ty = car(y);","\t\t\tcar(Dstack) = y;","\t\t}","\t\telse if (string_p(y) \u0026\u0026 string_len(y) \u003c 3) {","\t\t\tDstack = cddr(Dstack);","\t\t\ty = make_char(string(y)[0]);","\t\t\tif (S_S_OVER == s)","\t\t\t\ty = cons(y, NIL);","\t\t\tcar(Dstack) = y;","\t\t}","\t\telse {","\t\t\tif (string_p(y)) {","\t\t\t\ty = string_to_list(y, STRING_NIL);","\t\t\t}","\t\t\tcadr(Dstack) = y;","\t\t\tpush(cons(car(y), NIL));","\t\t\tpush(Barrier);","\t\t\tn = cons(x, NIL);","\t\t\tn = cons(cadr(y), n);","\t\t\tpush(cons(car(y), n));","\t\t\tcadr(cdddr(Dstack)) = cddr(y);","\t\t\tState = s;","\t\t}","\t\treturn;","\t}","\tif (S_S_OVER == s)","\t\ty = cons(y, NIL);","\tDstack = cdr(Dstack);","\tcar(Dstack) = y;","}","","static void op_over(void) {","\tover(S_OVER);","}","","static void over_n(int s) {","\tcell\tx, y, z, n;","","\tTHREE_ARGS(\"over/n\")","\tz = caddr(Dstack);","\ty = cadr(Dstack);","\tx = car(Dstack);","\tif ((list_p(y) || string_p(y)) \u0026\u0026 function_p(x)) {","\t\tif (NIL == y || empty_p(y)) {","\t\t\tDstack = cddr(Dstack);","\t\t\tcar(Dstack) = z;","\t\t}","\t\telse {","\t\t\tif (string_p(y)) {","\t\t\t\ty = string_to_list(y, STRING_NIL);","\t\t\t}","\t\t\tsave(y);","\t\t\tcadr(Dstack) = cdr(y);","\t\t\tpush(cons(z, NIL));","\t\t\tpush(Barrier);","\t\t\tn = cons(x, NIL);","\t\t\tn = cons(car(y), n);","\t\t\tpush(cons(z, n));","\t\t\tState = s;","\t\t\tunsave(1);","\t\t}","\t\treturn;","\t}","\tif (function_p(x)) {","\t\tn = NIL;","\t\tif (S_S_OVER == s) {","\t\t\tn = cons(S_join, n);","\t\t\tn = cons(S_list, n);","\t\t}","\t\tn = cons(x, n);","\t\tn = cons(y, n);","\t\tn = cons(z, n);","\t\tif (S_S_OVER == s) n = cons(z, n);","\t\tDstack = cddr(Dstack);","\t\tcar(Dstack) = n;","\t\tState = S_APPLY;","\t\treturn;","\t}","\tunknown3(\"over/n\");","}","","static void op_over_n(void) {","\tover_n(S_OVER);","}","","static cell safe_real_add(cell x, cell y) {","\tif (number_p(x) \u0026\u0026 number_p(y))","\t\treturn real_add(x, y);","\treturn error(\"plus: type error\", cons(x, cons(y, NIL)));","}","","static void op_plus(void) {","\tcell\tx, y;","","\tTWO_ARGS(\"plus\")","\ty = cadr(Dstack);","\tx = car(Dstack);","\tdyadrec(\"plus\", safe_real_add, y, x);","}","","static void op_pop0(void) {","\tunsave_vars();","}","","static void op_pop1(void) {","\tcdr(Dstack) = cddr(Dstack);","\tunsave_vars();","}","","static void op_pop2(void) {","\tcdr(Dstack) = cdddr(Dstack);","\tunsave_vars();","}","","static void op_pop3(void) {","\tcdr(Dstack) = cddddr(Dstack);","\tunsave_vars();","}","","static cell safe_power(cell x, cell y) {","\tif (number_p(x) \u0026\u0026 number_p(y)) {","\t\treturn real_power(x, y);","\t}","\treturn error(\"power: type error\", cons(x, cons(y, NIL)));","}","","static void op_pow(void) {","\tcell\tx, y;","","\tTWO_ARGS(\"power\")","\ty = cadr(Dstack);","\tx = car(Dstack);","\tdyadrec(\"power\", safe_power, y, x);","}","","static void op_range(void) {","\tcell\tx;","","\tONE_ARG(\"range\");","\tx = car(Dstack);","\tif (list_p(x) || string_p(x)) {","\t\tx = range(x);","\t\tcar(Dstack) = x;","\t\treturn;","\t}","\tunknown1(\"range\");","}","","static cell safe_recip(cell x) {","\tif (number_p(x))","\t\treturn real_divide(One, x);","\treturn error(\"reciprocal: type error\", cons(x, NIL));","}","","static void op_recip(void) {","\tcell\tx;","","\tONE_ARG(\"reciprocal\");","\tx = car(Dstack);","\tmonadrec(\"reciprocal\", safe_recip, x);","}","","static cell safe_rem(cell x, cell y) {","\tif (integer_p(y) \u0026\u0026 integer_p(x)) {","\t\tx = bignum_divide(x, y);","\t\tif (undefined_p(x))","\t\t\treturn error(\"division by zero\", VOID);","\t\treturn cdr(x);","\t}","\treturn error(\"rem: type error\", cons(x, cons(y, NIL)));","}","","static void op_rem(void) {","\tcell\tx, y;","","\tTWO_ARGS(\"rem\")","\ty = cadr(Dstack);","\tx = car(Dstack);","\tdyadrec(\"rem\", safe_rem, y, x);","}","","static void op_reshape(void) {","\tcell\ty, x;","","\tTWO_ARGS(\"reshape\");","\ty = cadr(Dstack);","\tx = car(Dstack);","\tif (integer_p(y)) {","\t\tif (bignum_zero_p(y)) {","\t\t\tpop();","\t\t\tcar(Dstack) = x;","\t\t\treturn;","\t\t}","\t\tbinop(reshape, y, x);","\t\treturn;","\t}","\tif (list_p(y)) {","\t\tbinop(reshape, y, x);","\t\treturn;","\t}","\tunknown2(\"reshape\");","}","","static void op_rot(void) {","\tcell\tx, y;","","\tTWO_ARGS(\"rotate\");","\ty = cadr(Dstack);","\tx = car(Dstack);","\tif (atom_p(x) \u0026\u0026 !string_p(x)) {","\t\tDstack = cdr(Dstack);","\t\tcar(Dstack) = x;","\t\treturn;","\t}","\tif (integer_p(y) \u0026\u0026 list_p(x)) {","\t\tx = rotate(x, y);","\t\tDstack = cdr(Dstack);","\t\tcar(Dstack) = x;","\t\treturn;","\t}","\tif (integer_p(y) \u0026\u0026 string_p(x)) {","\t\tx = rotate_string(x, y);","\t\tDstack = cdr(Dstack);","\t\tcar(Dstack) = x;","\t\treturn;","\t}","\tunknown2(\"rotate\");","}","","static void op_rev(void) {","\tcell\tx;","","\tONE_ARG(\"reverse\");","\tx = car(Dstack);","\tif (list_p(x)) {","\t\tx = rev(car(Dstack));","\t\tcar(Dstack) = x;","\t\treturn;","\t}","\tif (string_p(x)) {","\t\tx = rev_string(car(Dstack));","\t\tcar(Dstack) = x;","\t\treturn;","\t}","\t/* identity */","}","","static void op_s_conv(void) {","\tconv(S_S_CONV);","}","","static void op_s_iter(void) {","\titer(S_S_ITER);","}","","static void op_s_over(void) {","\tover(S_S_OVER);","}","","static void op_s_over_n(void) {","\tover_n(S_S_OVER);","}","","static void op_shape(void) {","\tcell\tx;","","\tONE_ARG(\"shape\");","\tx = car(Dstack);","\tif (string_p(x) \u0026\u0026 string_len(x) \u003e 1) {","\t\tx = cons(make_integer(string_len(x)-1), NIL);","\t\tcar(Dstack) = x;","\t\treturn;","\t}","\tif (pair_p(x)) {","\t\tx = shape(car(Dstack));","\t\tcar(Dstack) = x;","\t\treturn;","\t}","\tcar(Dstack) = Zero;","}","","static void op_size(void) {","\tcell\tx, new;","","\tONE_ARG(\"size\");","\tx = car(Dstack);","\tif (list_p(x)) {","\t\tx = make_integer(length(x));","\t\tcar(Dstack) = x;","\t\treturn;","\t}","\tif (number_p(x)) {","\t\tx = real_abs(x);","\t\tcar(Dstack) = x;","\t\treturn;","\t}","\tif (char_p(x)) {","\t\tnew = make_integer(char_value(x));","\t\tcar(Dstack) = new;","\t\treturn;","\t}","\tif (string_p(x)) {","\t\tx = make_integer(string_len(x)-1);","\t\tcar(Dstack) = x;","\t\treturn;","\t}","\tif (dictionary_p(x)) {","\t\tx = make_integer(dict_size(x));","\t\tcar(Dstack) = x;","\t\treturn;","\t}","\tunknown1(\"size\");","}","","static void op_split(void) {","\tcell\tx, y;","","\tTWO_ARGS(\"split\")","\ty = cadr(Dstack);","\tx = car(Dstack);","\tif ((pair_p(y) || integer_p(y)) \u0026\u0026 list_p(x)) {","\t\tbinop(split, y, x);","\t\treturn;","\t}","\tif ((pair_p(y) || integer_p(y)) \u0026\u0026 string_p(x)) {","\t\tbinop(split_string, y, x);","\t\treturn;","\t}","\tunknown2(\"split\");","}","","static void op_swap(void) {","\tcell\tx;","","\tTWO_ARGS(\"swap\")","\tx = car(Dstack);","\tcar(Dstack) = cadr(Dstack);","\tcadr(Dstack) = x;","}","","static void sysfn(int id);","","static void op_syscall(void) {","\tcell\tx;","\tint\tid;","","\tONE_ARG(\"syscall\");","\tx = car(Dstack);","\tif (integer_p(x)) {","\t\tid = intvalue(x);","\t\tDstack = cdr(Dstack);","\t\tsysfn(id);","\t\treturn;","\t}","\tunknown1(\"syscall\");","}","","static void op_take(void) {","\tcell\tx, y;","","\tTWO_ARGS(\"take\")","\ty = cadr(Dstack);","\tx = car(Dstack);","\tif (integer_p(y) \u0026\u0026 list_p(x)) {","\t\tx = take(x, intvalue(y));","\t\tDstack = cdr(Dstack);","\t\tcar(Dstack) = x;","\t\treturn;","\t}","\tif (integer_p(y) \u0026\u0026 string_p(x)) {","\t\tx = take_string(x, intvalue(y));","\t\tDstack = cdr(Dstack);","\t\tcar(Dstack) = x;","\t\treturn;","\t}","\tunknown2(\"take\");","}","","static cell safe_real_multiply(cell x, cell y) {","\tif (number_p(x) \u0026\u0026 number_p(y))","\t\treturn real_multiply(x, y);","\treturn error(\"times: type error\", cons(x, cons(y, NIL)));","}","","static void op_times(void) {","\tcell\tx, y;","","\tTWO_ARGS(\"times\")","\ty = cadr(Dstack);","\tx = car(Dstack);","\tdyadrec(\"times\", safe_real_multiply, y, x);","}","","static void op_transp(void) {","\tcell\tx;","","\tONE_ARG(\"transpose\");","\tx = car(Dstack);","\tif (list_p(x)) {","\t\tx = transpose(x);","\t\tcar(Dstack) = x;","\t\treturn;","\t}","\tunknown1(\"transpose\");","}","","static void op_up(void) {","\tcell\tx;","","\tONE_ARG(\"grade-up\");","\tx = car(Dstack);","\tif (list_p(x)) {","\t\tx = grade(less, x);","\t\tcar(Dstack) = x;","\t\treturn;","\t}","\tif (string_p(x)) {","\t\tx = string_to_list(x, NIL);","\t\tcar(Dstack) = x;","\t\tx = grade(less, x);","\t\tcar(Dstack) = x;","\t\treturn;","\t}","\tunknown1(\"grade-up\");","}","","static void op_undef(void) {","\tcell\tx;","","\tONE_ARG(\"undefined\");","\tx = car(Dstack);","\tcar(Dstack) = UNDEFINED == x? One: Zero;","}","","static void op_while(void) {","\tcell\tx, y, z, n;","","\tTHREE_ARGS(\"while\")","\tz = caddr(Dstack);","\ty = cadr(Dstack);","\tx = car(Dstack);","\tif (function_p(z) \u0026\u0026 function_p(x)) {","\t\tpush(Barrier);","\t\tn = cons(S_pop1, NIL);","\t\tn = cons(S_call1, n);","\t\tn = cons(z, n);","\t\tpush(cons(y, n));","\t\tState = S_WPRED;","\t\treturn;","\t}","\tunknown3(\"while\");","}","","static void op_s_while(void) {","\tcell\tx, y, z, n;","","\tTHREE_ARGS(\"while\")","\tz = caddr(Dstack);","\ty = cadr(Dstack);","\tx = car(Dstack);","\tif (function_p(z) \u0026\u0026 function_p(x)) {","\t\tn = cons(y, NIL);","\t\tcadr(Dstack) = n;","\t\tpush(Barrier);","\t\tn = cons(S_pop1, NIL);","\t\tn = cons(S_call1, n);","\t\tn = cons(z, n);","\t\tpush(cons(y, n));","\t\tState = S_S_WPRED;","\t\treturn;","\t}","\tunknown3(\"while\");","}","","static void op_x(void) {","\tpush(NIL == Frame? UNDEFINED: car(Frame));","}","","static void op_y(void) {","\tpush(NIL == Frame || NIL == cdr(Frame)? UNDEFINED: cadr(Frame));","}","","static void op_z(void) {","\tpush(NIL == Frame || NIL == cdr(Frame) || NIL == cddr(Frame)?","\t\tUNDEFINED: caddr(Frame));","}","","OP Ops[] = {","\t{ \"%amend\",   0, op_amend   },","\t{ \"%amendd\",  0, op_amendd  },","\t{ \"%atom\",    0, op_atom    },","\t{ \"%call0\",   1, op_call0   },","\t{ \"%call1\",   1, op_call1   },","\t{ \"%call2\",   1, op_call2   },","\t{ \"%call3\",   1, op_call3   },","\t{ \"%char\",    0, op_char    },","\t{ \"%clear\",   0, op_clear   },","\t{ \"%conv\",    1, op_conv    },","\t{ \"%cut\",     0, op_cut     },","\t{ \"%def\",     0, op_def     },","\t{ \"%div\",     0, op_div     },","\t{ \"%down\",    0, op_down    },","\t{ \"%drop\",    0, op_drop    },","\t{ \"%each\",    1, op_each    },","\t{ \"%each2\",   1, op_each2   },","\t{ \"%eachl\",   1, op_eachl   },","\t{ \"%eachp\",   1, op_eachp   },","\t{ \"%eachr\",   1, op_eachr   },","\t{ \"%enum\",    0, op_enum    },","\t{ \"%eq\",      0, op_eq      },","\t{ \"%expand\",  0, op_expand  },","\t{ \"%find\",    0, op_find    },","\t{ \"%first\",   0, op_first   },","\t{ \"%floor\",   0, op_floor   },","\t{ \"%form\",    0, op_form    },","\t{ \"%format\",  0, op_format  },","\t{ \"%format2\", 0, op_format2 },","\t{ \"%fun0\",    0, op_fun0    },","\t{ \"%fun1\",    0, op_fun1    },","\t{ \"%fun2\",    0, op_fun2    },","\t{ \"%fun3\",    0, op_fun3    },","\t{ \"%group\",   0, op_group   },","\t{ \"%gt\",      0, op_gt      },","\t{ \"%if\",      1, op_if      },","\t{ \"%imm1\",    0, op_imm1    },","\t{ \"%imm2\",    0, op_imm2    },","\t{ \"%index\",   1, op_index   },","\t{ \"%indexd\",  1, op_indexd  },","\t{ \"%intdiv\",  0, op_intdiv  },","\t{ \"%iter\",    1, op_iter    },","\t{ \"%join\",    0, op_join    },","\t{ \"%list\",    0, op_list    },","\t{ \"%lt\",      0, op_lt      },","\t{ \"%match\",   0, op_match   },","\t{ \"%max\",     0, op_max     },","\t{ \"%min\",     0, op_min     },","\t{ \"%minus\",   0, op_minus   },","\t{ \"%neg\",     0, op_neg     },","\t{ \"%newdict\", 0, op_newdict },","\t{ \"%not\",     0, op_not     },","\t{ \"%over\",    1, op_over    },","\t{ \"%over2\",   1, op_over_n  },","\t{ \"%plus\",    0, op_plus    },","\t{ \"%pop0\",    0, op_pop0    },","\t{ \"%pop1\",    0, op_pop1    },","\t{ \"%pop2\",    0, op_pop2    },","\t{ \"%pop3\",    0, op_pop3    },","\t{ \"%power\",   0, op_pow     },","\t{ \"%range\",   0, op_range   },","\t{ \"%recip\",   0, op_recip   },","\t{ \"%rem\",     0, op_rem     },","\t{ \"%reshape\", 0, op_reshape },","\t{ \"%rev\",     0, op_rev     },","\t{ \"%rot\",     0, op_rot     },","\t{ \"%sconv\",   1, op_s_conv  },","\t{ \"%siter\",   1, op_s_iter  },","\t{ \"%sover\",   1, op_s_over  },","\t{ \"%sover2\",  1, op_s_over_n},","\t{ \"%swhile\",  1, op_s_while },","\t{ \"%shape\",   0, op_shape   },","\t{ \"%size\",    0, op_size    },","\t{ \"%siter\",   0, op_s_iter  },","\t{ \"%split\",   0, op_split   },","\t{ \"%swap\",    0, op_swap    },","\t{ \"%syscall\", 0, op_syscall },","\t{ \"%take\",    0, op_take    },","\t{ \"%times\",   0, op_times   },","\t{ \"%transp\",  0, op_transp  },","\t{ \"%up\",      0, op_up      },","\t{ \"%undef\",   0, op_undef   },","\t{ \"%while\",   1, op_while   },","\t{ \"%x\",       0, op_x       },","\t{ \"%y\",       0, op_y       },","\t{ \"%z\",       0, op_z       },","\t{ NULL }","};","","/*"," * Built-in System Functions"," */","","static void sys_close(void) {","\tcell\tx;","","\tONE_ARG(\".cc\");","\tx = car(Dstack);","\tpush(car(Dstack));","\tif (input_port_p(x) || output_port_p(x)) {","\t\tif (x == From_chan) {","\t\t\tset_input_port(0);","\t\t\tFrom_chan = 0;","\t\t}","\t\tif (x == To_chan) {","\t\t\tset_output_port(1);","\t\t\tTo_chan = 1;","\t\t}","\t\tif (\tport_no(x) != 0 \u0026\u0026","\t\t\tport_no(x) != 1 \u0026\u0026","\t\t\tport_no(x) != 2)","\t\t{","\t\t\tclose_port(port_no(x));","\t\t}","\t\tcar(Dstack) = NIL;","\t\treturn;","\t}","\tunknown1(\".cc\");","}","","static void sys_comment(void) {","\tcell\tx;","\tchar\tmsg[80];","\tchar    *s;","\tint\tsln, k;","","\tONE_ARG(\".comment\");","\tx = car(Dstack);","\tpush(car(Dstack));","\tif (string_p(x)) {","\t\tsln = Line;","\t\tk = strlen(string(x));","\t\tset_input_port(Prog_chan);","\t\tfor (;;) {","\t\t\tif (kg_getline(Inbuf, TOKEN_LENGTH) == NULL) {","\t\t\t\t// sprintf(msg, \"undelimited comment (line %d)\", ","\t\t\t\t//\tsln);","\t\t\t\tmsg[0] = '\\0';","\t\t\t\ts = strcat(msg, \"undelemited comment (line \");","\t\t\t\ts = strcati(s, sln);","\t\t\t\ts[0] = ')';","\t\t\t\ts[1] = '\\0';","\t\t\t\terror(msg, VOID);","\t\t\t\tbreak;","\t\t\t}","\t\t\tif (!strncmp(string(x), Inbuf, k))","\t\t\t\tbreak;","\t\t}","\t\treturn;","\t}","\tunknown1(\".comment\");","}","","static void sys_delete(void) {","\tcell\tx;","","\tONE_ARG(\".df\");","\tx = car(Dstack);","\tpush(car(Dstack));","\tif (string_p(x)) {","\t\tif (remove(string(x)) \u003c 0)","\t\t\terror(\"could not delete\", x);","\t\treturn;","\t}","\tunknown1(\".df\");","}","","static void sys_display(void) {","\tcell\tx;","","\tONE_ARG(\".p\");","\tx = car(Dstack);","\tDisplay = 1;","\tif (!outport_open_p())","\t\terror(\".d: writing to closed channel\",","\t\t\tmake_port(To_chan, T_OUTPUT_PORT));","\telse","\t\tkg_write(x);","\tDisplay = 0;","\tpush(car(Dstack));","}","","static cell evalstr(cell x);","","static void sys_eval(void) {","\tcell\tx;","","\tONE_ARG(\".E\");","\tx = car(Dstack);","\tif (string_p(x)) {","\t\tx = evalstr(x);","\t\tcar(Dstack) = x;","\t\tpush(car(Dstack));","\t\treturn;","\t}","\tunknown1(\".E\");","}","","static void sys_flush(void) {","\tif (!outport_open_p())","\t\terror(\".fl: writing to closed channel\",","\t\t\tmake_port(To_chan, T_OUTPUT_PORT));","\telse","\t\tflush();","\tpush(NIL);","}","","static void sys_fromchan(void) {","\tcell\tx, old;","","\tONE_ARG(\".fc\");","\tx = car(Dstack);","\tpush(car(Dstack));","\told = From_chan;","\tif (false_p(x)) {","\t\tset_input_port(0);","\t\told = make_port(old, T_INPUT_PORT);","\t\tcar(Dstack) = old;","\t\treturn;","\t}","\tif (input_port_p(x)) {","\t\tFrom_chan = port_no(x);","\t\tset_input_port(port_no(x));","\t\told = make_port(old, T_INPUT_PORT);","\t\tcar(Dstack) = old;","\t\treturn;","\t}","\tunknown1(\".fc\");","}","","static void sys_infile(void) {","\tcell\tx;","\tint\tp;","","\tONE_ARG(\".ic\");","\tx = car(Dstack);","\tpush(car(Dstack));","\tif (string_p(x)) {","\t\tif ((p = open_input_port(string(x))) \u003c 0) {","\t\t\terror(\".ic: failed to open input file\", x);","\t\t\treturn;","\t\t}","\t\tx = make_port(p, T_INPUT_PORT);","\t\tcar(Dstack) = x;","\t\treturn;","\t}","\tunknown1(\".ic\");","}","","static void sys_load(void) {","\tcell\tx;","","\tONE_ARG(\".l\");","\tx = car(Dstack);","\tpush(car(Dstack));","\tif (string_p(x)) {","\t\tx = load(x, 0, 0);","\t\tcar(Dstack) = x;","\t\treturn;","\t}","\tunknown1(\".l\");","}","","static void sys_module(void) {","\tcell\tx;","","\tONE_ARG(\".module\");","\tx = car(Dstack);","\tpush(car(Dstack));","\tif (symbol_p(x)) {","\t\tif (Module != UNDEFINED) {","\t\t\terror(\"nested module; contained in\",","\t\t\t\tmake_symbol(Modname, strlen(Modname)));","\t\t}","\t\telse {","\t\t\tModule = NIL;","\t\t\tMod_funvars = NIL;","\t\t\tstrcpy(Modname, symbol_name(x));","\t\t}","\t\treturn;","\t}","\tif (false_p(x)) {","\t\tif (UNDEFINED == Module)","\t\t\terror(\"no module open\", VOID);","\t\tModule = UNDEFINED;","\t\treturn;","\t}","\tunknown1(\".module\");","}","","static void sys_more(void) {","\tONE_ARG(\".mi\");","\tif (!inport_open_p())","\t\terror(\".mi: testing closed channel\",","\t\t\tmake_port(From_chan, T_INPUT_PORT));","\tpush(port_eof(input_port())? Zero: One);","}","","static void outfile(int append) {","\tcell\tx;","\tint\tp;","","\tONE_ARG(\".oc\");","\tx = car(Dstack);","\tpush(car(Dstack));","\tif (string_p(x)) {","\t\tif ((p = open_output_port(string(x), append)) \u003c 0) {","\t\t\tif (append)","\t\t\t\terror(\".ac: failed to open output file\", x);","\t\t\telse","\t\t\t\terror(\".oc: failed to open output file\", x);","\t\t\treturn;","\t\t}","\t\tx = make_port(p, T_OUTPUT_PORT);","\t\tcar(Dstack) = x;","\t\treturn;","\t}","\tunknown1(\".oc\");","}","","static void sys_outfile(void) {","\toutfile(0);","}","","static void sys_appfile(void) {","\toutfile(1);","}","","static void sys_print(void) {","\tif (!outport_open_p())","\t\terror(\".p: writing to closed channel\",","\t\t\tmake_port(To_chan, T_OUTPUT_PORT));","\telse","\t\tsys_display();","\tnl();","}","","static void sys_randnum(void) {","\tcell\tx, n, e = 0;","","\tn = rand() % S9_INT_SEG_LIMIT;","\tx = 0;","\twhile (n \u003e 0) {","\t\tx = x*10+n%10;","\t\te++;","\t\tn /= 10;","\t}","\tx = make_real(1, -e, make_integer(x));","\tpush(x);","}","","static void sys_read(void) {","\tif (!inport_open_p())","\t\terror(\".r: reading from closed channel\",","\t\t\tmake_port(From_chan, T_INPUT_PORT));","\telse {","\t\tpush(kg_read());","\t\twhile (readc() != '\\n' \u0026\u0026 readc() != EOF)","\t\t\t;","\t}","}","","static void sys_readln(void) {","\tcell\tx = NIL;","\tint\tc;","","\tsave(x);","\tif (!inport_open_p()) {","\t\terror(\".rl: reading from closed channel\",","\t\t\tmake_port(From_chan, T_INPUT_PORT));","\t}","\telse {","\t\twhile ((c = readc()) != '\\n') {","\t\t\tif (EOF == c)","\t\t\t\tbreak;","\t\t\tx = cons(make_char(c), x);","\t\t\tcar(Stack) = x;","\t\t}","\t\tx = rev(x);","\t}","\tcar(Stack) = x;","\tx = list_to_string(x);","\tunsave(1);","\tpush(x);","}","","static cell compile(char *p);","","static void sys_readstr(void) {","\tcell\tx;","","\tif (s9_aborted())","\t\treturn;","\tONE_ARG(\".rs\");","\tx = car(Dstack);","\tif (string_p(x)) {","\t\tReport = 0;","\t\tx = compile(string(x));","\t\tReport = 1;","\t\tcar(Dstack) = car(x);","\t\tif (s9_aborted()) {","\t\t\ts9_reset();","\t\t\tcar(Dstack) = UNDEFINED;","\t\t}","\t\tpush(car(Dstack));","\t\treturn;","\t}","\tunknown1(\".rs\");","}","","static void sys_system(void) {","\tcell\tx;","\tint\tr;","","#ifdef SAFE","\terror(\"shell access disabled\", VOID);","\treturn;","#else","\tONE_ARG(\".sys\");","\tx = car(Dstack);","\tif (string_p(x)) {","\t\tr = system(string(x));","\t\tx = make_integer(r);","\t\tcar(Dstack) = x;","\t\tpush(car(Dstack));","\t\treturn;","\t}","\tunknown1(\".sys\");","#endif","}","","#ifndef plan9","static void sys_pclock(void) {","\tclock_t\tt;","\tcell\tx, y;","","\tt = clock();","\tx = make_integer(t);","\tsave(x);","\ty = make_integer(10000000);","\tx = bignum_multiply(x, y);","\tcar(Stack) = x;","\ty = make_integer(CLOCKS_PER_SEC);","\tx = bignum_divide(x, y);","\tx = car(x);","\tx = make_real(1, -7, x);","\tunsave(1);","\tpush(x);","}","#endif","","static void sys_tochan(void) {","\tcell\tx, old;","","\tONE_ARG(\".tc\");","\tx = car(Dstack);","\tpush(car(Dstack));","\told = To_chan;","\tif (false_p(x)) {","\t\tset_output_port(1);","\t\told = make_port(old, T_OUTPUT_PORT);","\t\tcar(Dstack) = old;","\t\treturn;","\t}","\tif (output_port_p(x)) {","\t\tTo_chan = port_no(x);","\t\tset_output_port(port_no(x));","\t\told = make_port(old, T_OUTPUT_PORT);","\t\tcar(Dstack) = old;","\t\treturn;","\t}","\tunknown1(\".tc\");","}","","static void sys_write(void) {","\tONE_ARG(\".w\");","\tif (!outport_open_p())","\t\terror(\".w: writing to closed channel\",","\t\t\tmake_port(To_chan, T_OUTPUT_PORT));","\telse","\t\tkg_write(car(Dstack));","\tpush(car(Dstack));","}","","static void sys_exit(void) {","\tcell\tx;","","\tONE_ARG(\".x\");","\tx = car(Dstack);","\tbye(false_p(x) == 0);","}","","SYS Sysfns[] = {","\t{ \".ac\",      1, sys_appfile },","\t{ \".cc\",      1, sys_close   },","\t{ \".comment\", 1, sys_comment },","\t{ \".df\",      1, sys_delete  },","\t{ \".d\",       1, sys_display },","\t{ \".E\",       1, sys_eval    },","\t{ \".fc\",      1, sys_fromchan},","\t{ \".fl\",      0, sys_flush   },","\t{ \".ic\",      1, sys_infile  },","\t{ \".l\",       1, sys_load    },","\t{ \".mi\",      1, sys_more    },","\t{ \".module\",  1, sys_module  },","\t{ \".oc\",      1, sys_outfile },","\t{ \".p\",       1, sys_print   },","#ifndef plan9","\t{ \".pc\",      0, sys_pclock  },","#endif","\t{ \".r\",       0, sys_read    },","\t{ \".rl\",      0, sys_readln  },","\t{ \".rn\",      0, sys_randnum },","\t{ \".rs\",      1, sys_readstr },","\t{ \".sys\",     1, sys_system  },","\t{ \".tc\",      1, sys_tochan  },","\t{ \".w\",       1, sys_write   },","\t{ \".x\",       1, sys_exit    },","\t{ NULL }","};","","static void sysfn(int id) {","\t(*Sysfns[id].handler)();","}","","/*"," * Virtual Machine, Adverb Handlers"," */","","static cell next_conv(cell s) {","\tcell\ty0, y1;","\tcell\tn;","","\ty0 = cadr(Dstack);","\ty1 = car(Dstack);","\tif (match(y0, y1)) {","\t\tn = y0;","\t\tDstack = cdddr(Dstack);","\t\tcar(Dstack) = n;","\t\treturn cdr(s);","\t}","\tcadr(Dstack) = y1;","\tcar(Dstack) = Barrier;","\tn = cons(caddr(Dstack), NIL);","\tpush(cons(y1, n));","\treturn s;","}","","static cell next_each(cell s) {","\tcell\tx = cdr(Dstack), y = cddr(Dstack);","\tcell\tn;","","\tif (NIL == car(y) || STRING_NIL == car(y)) {","\t\tn = revb(car(Dstack));","\t\tcar(Dstack) = n; /* protect x */","\t\tif (STRING_NIL == car(y))","\t\t\tn = list_to_string(n);","\t\tDstack = cddr(Dstack);","\t\tcar(Dstack) = n;","\t\treturn cdr(s);","\t}","\tpush(Barrier);","\tn = cons(car(x), NIL);","\tpush(cons(caar(y), n));","\tcar(y) = cdar(y);","\treturn s;","}","","static cell next_each2(cell s) {","\tcell\tx = cdr(Dstack), y = cddr(Dstack), z = cdddr(Dstack);","\tcell\tn;","","\tif (\tNIL == car(y) || NIL == car(z) ||","\t\tSTRING_NIL == car(y) || STRING_NIL == car(z)","\t) {","\t\tn = revb(car(Dstack));","\t\tif (STRING_NIL == car(y) || STRING_NIL == car(z))","\t\t\tn = list_to_string(n);","\t\tDstack = cdddr(Dstack);","\t\tcar(Dstack) = n;","\t\treturn cdr(s);","\t}","\tpush(Barrier);","\tn = cons(car(x), NIL);","\tn = cons(caar(y), n);","\tpush(cons(caar(z), n));","\tcar(y) = cdar(y);","\tcar(z) = cdar(z);","\treturn s;","}","","static cell next_eachl(cell s) {","\tcell\tx = cdr(Dstack), y = cddr(Dstack), z = cdddr(Dstack);","\tcell\tn;","","\tif (NIL == car(y) || STRING_NIL == car(y)) {","\t\tn = revb(car(Dstack));","\t\tif (STRING_NIL == car(y))","\t\t\tn = list_to_string(n);","\t\tDstack = cdddr(Dstack);","\t\tcar(Dstack) = n;","\t\treturn cdr(s);","\t}","\tpush(Barrier);","\tn = cons(car(x), NIL);","\tn = cons(caar(y), n);","\tpush(cons(car(z), n));","\tcar(y) = cdar(y);","\treturn s;","}","","static cell next_eachp(cell s) {","\tcell\tx = cdr(Dstack), y = cddr(Dstack);","\tcell\tn;","","\tif (\tNIL == car(y) || NIL == cdar(y) ||","\t\tSTRING_NIL == car(y) || STRING_NIL == cdar(y)","\t) {","\t\tn = revb(car(Dstack));","\t\tif (STRING_NIL == car(y) || STRING_NIL == cdar(y))","\t\t\tn = list_to_string(n);","\t\tDstack = cddr(Dstack);","\t\tcar(Dstack) = n;","\t\treturn cdr(s);","\t}","\tpush(Barrier);","\tn = cons(car(x), NIL);","\tn = cons(cadar(y), n);","\tpush(cons(caar(y), n));","\tcar(y) = cdar(y);","\treturn s;","}","","static cell next_eachr(cell s) {","\tcell\tx = cdr(Dstack), y = cddr(Dstack), z = cdddr(Dstack);","\tcell\tn;","","\tif (NIL == car(y) || STRING_NIL == car(y)) {","\t\tn = revb(car(Dstack));","\t\tif (STRING_NIL == car(y))","\t\t\tn = list_to_string(n);","\t\tDstack = cdddr(Dstack);","\t\tcar(Dstack) = n;","\t\treturn cdr(s);","\t}","\tpush(Barrier);","\tn = cons(car(x), NIL);","\tn = cons(car(z), n);","\tpush(cons(caar(y), n));","\tcar(y) = cdar(y);","\treturn s;","}","","static cell next_over(cell s) {","\tcell\tx = cdr(Dstack), y = cddr(Dstack);","\tcell\tn;","","\tif (NIL == car(y) || STRING_NIL == car(y)) {","\t\tn = car(Dstack);","\t\tif (STRING_NIL == car(y))","\t\t\tn = list_to_string(n);","\t\tDstack = cdddr(Dstack);","\t\tcar(Dstack) = n;","\t\treturn cdr(s);","\t}","\tpush(Barrier);","\tn = cons(car(x), NIL);","\tn = cons(caar(y), n);","\tpush(cons(cadr(Dstack), n));","\tcar(y) = cdar(y);","\treturn s;","}","","static cell next_iter(cell s) {","\tcell\tx = cdr(Dstack), z = cdddr(Dstack);","\tcell\tn;","","\tn = bignum_subtract(car(z), One);","\tcar(z) = n;","\tif (bignum_zero_p(car(z))) {","\t\tn = car(Dstack);","\t\tDstack = cdddr(Dstack);","\t\tcar(Dstack) = n;","\t\treturn cdr(s);","\t}","\tn = cons(car(x), NIL);","\tn = cons(car(Dstack), n);","\tcar(Dstack) = Barrier;","\tpush(n);","\treturn s;","}","","static cell next_s_conv(cell s) {","\tcell\tys, y1;","\tcell\tn;","","\tys = cadr(Dstack);","\ty1 = car(Dstack);","\tif (match(car(ys), y1)) {","\t\tn = ys;","\t\tDstack = cdddr(Dstack);","\t\tcar(Dstack) = revb(n);","\t\treturn cdr(s);","\t}","\tn = cons(y1, ys);","\tcadr(Dstack) = n;","\tcar(Dstack) = Barrier;","\tn = cons(caddr(Dstack), NIL);","\tpush(cons(y1, n));","\treturn s;","}","","static cell next_s_iter(cell s) {","\tcell\tx = cdr(Dstack), z = cdddr(Dstack);","\tcell\tn;","","\tn = bignum_subtract(car(z), One);","\tcar(z) = n;","\tif (bignum_zero_p(car(z))) {","\t\tn = car(Dstack);","\t\tDstack = cdddr(Dstack);","\t\tcar(Dstack) = revb(n);","\t\treturn cdr(s);","\t}","\tn = cons(car(x), NIL);","\tn = cons(caar(Dstack), n);","\tpush(Barrier);","\tpush(n);","\treturn s;","}","","static cell next_s_over(cell s) {","\tcell\tx = cdr(Dstack), y = cddr(Dstack);","\tcell\tn;","","\tif (NIL == car(y) || STRING_NIL == car(y)) {","\t\tif (STRING_NIL == car(y))","\t\t\tconv_to_strlst(car(Dstack));","\t\tn = revb(car(Dstack));","\t\tDstack = cdddr(Dstack);","\t\tcar(Dstack) = n;","\t\treturn cdr(s);","\t}","\tpush(Barrier);","\tn = cons(car(x), NIL);","\tn = cons(caar(y), n);","\tpush(cons(caadr(Dstack), n));","\tcar(y) = cdar(y);","\treturn s;","}","","static cell next_s_wpred(cell s) {","\tcell\tx = cdr(Dstack), y = cddr(Dstack);","\tcell\tn;","","\tif (false_p(car(Dstack))) {","\t\tn = car(y);","\t\tDstack = cdddr(Dstack);","\t\tif (NIL != n)","\t\t\tn = cdr(n);","\t\tcar(Dstack) = revb(n);","\t\treturn cdr(s);","\t}","\tn = cons(car(x), NIL);","\tn = cons(caar(y), n);","\tcar(Dstack) = Barrier;","\tpush(n);","\tcar(S) = S_S_WEXPR;","\treturn s;","}","","static cell next_s_wexpr(cell s) {","\tcell\ty = cddr(Dstack), z = cdddr(Dstack);","\tcell\tn;","","\tn = cons(car(Dstack), car(y));","\tcar(y) = n;","\tn = cons(S_pop1, NIL);","\tn = cons(S_call1, n);","\tn = cons(car(z), n);","\tn = cons(caar(y), n);","\tcar(Dstack) = Barrier;","\tpush(n);","\tcar(S) = S_S_WPRED;","\treturn s;","}","","static cell next_wpred(cell s) {","\tcell\tx = cdr(Dstack), y = cddr(Dstack);","\tcell\tn;","","\tif (false_p(car(Dstack))) {","\t\tn = car(y);","\t\tDstack = cdddr(Dstack);","\t\tcar(Dstack) = n;","\t\treturn cdr(s);","\t}","\tn = cons(car(x), NIL);","\tn = cons(car(y), n);","\tcar(Dstack) = Barrier;","\tpush(n);","\tcar(S) = S_WEXPR;","\treturn s;","}","","static cell next_wexpr(cell s) {","\tcell\ty = cddr(Dstack), z = cdddr(Dstack);","\tcell\tn;","","\tcar(y) = car(Dstack);","\tn = cons(S_pop1, NIL);","\tn = cons(S_call1, n);","\tn = cons(car(z), n);","\tn = cons(car(y), n);","\tcar(Dstack) = Barrier;","\tpush(n);","\tcar(S) = S_WPRED;","\treturn s;","}","","static void acc(void) {","\tcell\tn;","","\tn = cons(car(Dstack), cadr(Dstack));","\tDstack = cdr(Dstack);","\tcar(Dstack) = n;","}","","static void mov(void) {","\tcell\tn;","","\tn = car(Dstack);","\tDstack = cdr(Dstack);","\tcar(Dstack) = n;","}","","static cell next(cell s) {","\tcell\tn;","","\tif (cadr(Dstack) != Barrier)","\t\treturn error(\"adverb arity error\", VOID);","\tn = car(Dstack);","\tDstack = cdr(Dstack);","\tcar(Dstack) = n;","\tswitch (car(s)) {","\tcase S_EACH:\tacc(); return next_each(s);","\tcase S_EACH2:\tacc(); return next_each2(s);","\tcase S_EACHL:\tacc(); return next_eachl(s);","\tcase S_EACHP:\tacc(); return next_eachp(s);","\tcase S_EACHR:\tacc(); return next_eachr(s);","\tcase S_OVER:\tmov(); return next_over(s);","\tcase S_CONV:\treturn next_conv(s);","\tcase S_ITER:\treturn next_iter(s);","\tcase S_WPRED:\treturn next_wpred(s);","\tcase S_WEXPR:\treturn next_wexpr(s);","\tcase S_S_OVER:\tacc(); return next_s_over(s);","\tcase S_S_CONV:\treturn next_s_conv(s);","\tcase S_S_ITER:\tacc(); return next_s_iter(s);","\tcase S_S_WPRED:\treturn next_s_wpred(s);","\tcase S_S_WEXPR:\treturn next_s_wexpr(s);","\tdefault:\terror(\"stack dump\", Dstack);","\t\t\tfatal(\"bad state\");","\t}","\treturn UNDEFINED; /*LINT*/","}","","/*"," * Virtual Machine, Interpreter"," */","","static cell savestate(cell f, cell fr, cell s) {","\tif (NIL == f) {","\t\treturn s;","\t}","\treturn cons(f, cons(fr, s));","}","","static void cleartrace(void) {","\tint\ti;","","\tfor (i=0; i\u003cNTRACE; i++)","\t\tTrace[i] = UNDEFINED;","\tTraceptr = 0;","}","","static void funtrace(cell v) {","\tif (function_p(var_value(v))) {","\t\tif (Traceptr \u003e= NTRACE)","\t\t\tTraceptr = 0;","\t\tTrace[Traceptr++] = var_symbol(v);","\t}","}","","static void eval(cell x) {","\tcell\t\ty;","\tint\t\tskip = 0;","\textern int\tAbort_flag;","","\tsave(x);","\tsave(S);","\tsave(F);","\tsave(Frame);","\tFrame = Dstack;","\tS = NIL;","\tF = cdr(x);","\tx = car(x);","\tState = S_EVAL;","\tcleartrace();","\tfor (s9_reset(); 0 == Abort_flag;) {","\t\tif (skip) {","\t\t\tskip = 0;","\t\t}","\t\telse {","\t\t\tif (variable_p(x)) {","\t\t\t\tif (Debug) {","\t\t\t\t\tfuntrace(x);","\t\t\t\t}","\t\t\t\ty = var_value(x);","\t\t\t\tif (NO_VALUE == y) {","\t\t\t\t\terror(\"undefined\", x);","\t\t\t\t\tbreak;","\t\t\t\t}","\t\t\t\tx = y;","\t\t\t}","\t\t\tif (primop_p(x)) {","\t\t\t\t(Ops[primop_slot(x)].handler)();","\t\t\t}","\t\t\telse if (syntax_p(x)) {","\t\t\t\tState = S_EVAL;","\t\t\t\t(Ops[primop_slot(x)].handler)();","\t\t\t\tif (State != S_EVAL) {","\t\t\t\t\tS = savestate(F, Frame, S);","\t\t\t\t\tif (State != S_APPIF)","\t\t\t\t\t\tFrame = cdr(Dstack);","\t\t\t\t\tif (\tS_APPLY == State ||","\t\t\t\t\t\tS_APPIF == State","\t\t\t\t\t)","\t\t\t\t\t\tState = S_EVAL;","\t\t\t\t\telse","\t\t\t\t\t\tS = new_atom(State, S);","\t\t\t\t\tF = pop();","\t\t\t\t}","\t\t\t}","\t\t\telse if (function_p(x) \u0026\u0026 fun_immed(x)) {","\t\t\t\tS = savestate(F, Frame, S);","\t\t\t\tFrame = Dstack;","\t\t\t\tF = fun_body(x);","\t\t\t}","\t\t\telse {","\t\t\t\tpush(x);","\t\t\t}","\t\t}","\t\tif (F != NIL) {","\t\t\tx = car(F);","\t\t\tF = cdr(F);","\t\t}","\t\telse if (S != NIL) {","\t\t\tif (atom_p(S)) {","\t\t\t\ty = S;","\t\t\t\tS = next(S);","\t\t\t\t/*","\t\t\t\t * next_*() uses return cdr(s) to exit,","\t\t\t\t * so y =/= S is certain in this case.","\t\t\t\t */","\t\t\t\tif (y == S)","\t\t\t\t\tF = pop();","\t\t\t\tskip = 1;","\t\t\t}","\t\t\telse {","\t\t\t\tF = car(S);","\t\t\t\tFrame = cadr(S);","\t\t\t\tS = cddr(S);","\t\t\t\tx = car(F);","\t\t\t\tF = cdr(F);","\t\t\t}","\t\t}","\t\telse {","\t\t\tFrame = NIL;","\t\t\tbreak;","\t\t}","\t}","\tFrame = unsave(1);","\tF = unsave(1);","\tS = unsave(1);","\tunsave(1);","}","","/*"," * Bytecode Compiler, Parser"," */","","static int adverb_arity(cell a, int ctx) {","\tint\tc0, c1;","","\tc0 = symbol_name(a)[0];","\tc1 = symbol_name(a)[1];","\tif ('\\'' == c0) return ctx;","\tif (':'  == c0 \u0026\u0026 '\\\\' == c1) return 2;","\tif (':'  == c0 \u0026\u0026 '\\'' == c1) return 2;","\tif (':'  == c0 \u0026\u0026 '/'  == c1) return 2;","\tif ('/'  == c0) return 2;","\tif (':'  == c0 \u0026\u0026 '~'  == c1) return 1;","\tif (':'  == c0 \u0026\u0026 '*'  == c1) return 1;","\tif ('\\\\' == c0 \u0026\u0026   0  == c1) return 2;","\tif ('\\\\' == c0 \u0026\u0026 '~'  == c1) return 1;","\tif ('\\\\' == c0 \u0026\u0026 '*'  == c1) return 1;","\terror(\"internal: adverb_arity(): unknown adverb\", a);","\treturn 0;","}","","static cell monadsym(char *b) {","\tchar\t*m = \"expected monad, got\";","","\tswitch (b[0]) {","\tcase '!': return S_enum;","\tcase '#': return S_size;","\tcase '$': return S_format;","\tcase '%': return S_recip;","\tcase '\u0026': return S_expand;","\tcase '*': return S_first;","\tcase '+': return S_transp;","\tcase ',': return S_list;","\tcase '-': return S_neg;","\tcase '\u003c': return S_up;","\tcase '=': return S_group;","\tcase '\u003e': return S_down;","\tcase '?': return S_range;","\tcase '@': return S_atom;","\tcase '^': return S_shape;","\tcase '_': return S_floor;","\tcase '|': return S_rev;","\tcase '~': return S_not;","\tcase ':':","\t\tswitch (b[1]) {","\t\tcase '#': return S_char;","\t\tcase '_': return S_undef;","\t\tdefault:  error(m, make_symbol(b, 2));","\t\t}","\t\tbreak;","\t}","\terror(\"monad expected\", make_symbol(b, strlen(b)));","\treturn UNDEFINED;","}","","static cell dyadsym(char *b) {","\tswitch (b[0]) {","\tcase '!': return S_rem;","\tcase '#': return S_take;","\tcase '$': return S_format2;","\tcase '%': return S_div;","\tcase '\u0026': return S_min;","\tcase '*': return S_times;","\tcase '+': return S_plus;","\tcase ',': return S_join;","\tcase '-': return S_minus;","\tcase '\u003c': return S_lt;","\tcase '=': return S_eq;","\tcase '\u003e': return S_gt;","\tcase '?': return S_find;","\tcase '@': return S_index;","\tcase '^': return S_power;","\tcase '_': return S_drop;","\tcase '|': return S_max;","\tcase '~': return S_match;","\tcase ':':","\t\tswitch (b[1]) {","\t\tcase '@': return S_indexd;","\t\tcase '#': return S_split;","\t\tcase '$': return S_form;","\t\tcase '%': return S_intdiv;","\t\tcase '+': return S_rot;","\t\tcase '-': return S_amendd;","\t\tcase ':': return S_def;","\t\tcase '=': return S_amend;","\t\tcase '^': return S_reshape;","\t\tcase '_': return S_cut;","\t\t}","\t}","\terror(\"dyad expected\", make_symbol(b, strlen(b)));","\treturn UNDEFINED;","}","","static cell opsym(cell op, int ctx) {","\tif (1 == ctx)","\t\treturn monadsym(symbol_name(op));","\telse","\t\treturn dyadsym(symbol_name(op));","}","","static char *opname2(cell y) {","\tstatic char\tb[100];","","\tif (y == S_amend) return \":=\";","\tif (y == S_amendd) return \":-\";","\tif (y == S_atom) return \"@\";","\tif (y == S_char) return \":#\";","\tif (y == S_conv) return \":~\";","\tif (y == S_cut) return \":_\";","\tif (y == S_def) return \"::\";","\tif (y == S_div) return \"%\";","\tif (y == S_down) return \"\u003e\";","\tif (y == S_drop) return \"_\";","\tif (y == S_each) return \"'\";","\tif (y == S_each2) return \"'\";","\tif (y == S_eachl) return \":\\\\\";","\tif (y == S_eachp) return \":'\";","\tif (y == S_eachr) return \":/\";","\tif (y == S_enum) return \"~\";","\tif (y == S_eq) return \"=\";","\tif (y == S_expand) return \"\u0026\";","\tif (y == S_find) return \"?\";","\tif (y == S_first) return \"*\";","\tif (y == S_floor) return \"_\";","\tif (y == S_form) return \":$\";","\tif (y == S_format) return \"$\";","\tif (y == S_format2) return \"$\";","\tif (y == S_group) return \"=\";","\tif (y == S_gt) return \"\u003e\";","\tif (y == S_if) return \":[\";","\tif (y == S_index) return \"@\";","\tif (y == S_indexd) return \":@\";","\tif (y == S_intdiv) return \":%\";","\tif (y == S_iter) return \":*\";","\tif (y == S_join) return \",\";","\tif (y == S_list) return \",\";","\tif (y == S_lt) return \"\u003c\";","\tif (y == S_match) return \"~\";","\tif (y == S_max) return \"|\";","\tif (y == S_min) return \"\u0026\";","\tif (y == S_minus) return \"-\";","\tif (y == S_neg) return \"-\";","\tif (y == S_not) return \"~\";","\tif (y == S_over) return \"/\";","\tif (y == S_over2) return \"/\";","\tif (y == S_plus) return \"+\";","\tif (y == S_power) return \"^\";","\tif (y == S_range) return \"?\";","\tif (y == S_recip) return \"\";","\tif (y == S_rem) return \"!\";","\tif (y == S_reshape) return \":^\";","\tif (y == S_rev) return \"|\";","\tif (y == S_rot) return \":+\";","\tif (y == S_sconv) return \"\\\\~\";","\tif (y == S_siter) return \"\\\\*\";","\tif (y == S_sover) return \"\\\\\";","\tif (y == S_sover2) return \"\\\\\";","\tif (y == S_swhile) return \"\\\\~\";","\tif (y == S_shape) return \"^\";","\tif (y == S_size) return \"#\";","\tif (y == S_split) return \":#\";","\tif (y == S_take) return \"#\";","\tif (y == S_times) return \"*\";","\tif (y == S_transp) return \"+\";","\tif (y == S_up) return \"\u003c\";","\tif (y == S_undef) return \":_\";","\tif (y == S_while) return \":~\";","\tif (y == S_x) return \"x\";","\tif (y == S_y) return \"y\";","\tif (y == S_z) return \"z\";","\tstrcpy(b, string(var_symbol(y)));","\treturn b;","}","","static cell opname(cell y) {","\tchar\t*s;","","\ts = opname2(y);","\treturn make_symbol(s, strlen(s));","}","","static cell adverbsym(cell adv, int ctx) {","\tint\tc0, c1;","","\tc0 = symbol_name(adv)[0];","\tc1 = symbol_name(adv)[1];","\tswitch (c0) {","\tcase '\\'': return 2 == ctx? S_each2: S_each;","\tcase '/':  return 2 == ctx? S_over2: S_over;","\tcase '\\\\': if ('~' == c1)","\t\t\treturn 2 == ctx? S_swhile: S_sconv;","\t\t   else if ('*' == c1)","\t\t\treturn S_siter;","\t\t   else","\t\t\treturn 2 == ctx? S_sover2: S_sover;","\tcase ':':  switch (c1) {","\t\t\tcase '\\\\': return S_eachl;","\t\t\tcase '\\'': return S_eachp;","\t\t\tcase '/':  return S_eachr;","\t\t\tcase '*':  return S_iter;","\t\t\tcase '~':  return 2 == ctx? S_while: S_conv;","\t\t   }","\t\t   break;","\t}","\treturn UNDEFINED;","}","","static int adverb_p(cell x) {","\tint\tc0, c1;","","\tif (!symbol_p(x))","\t\treturn 0;","\tc0 = symbol_name(x)[0];","\tc1 = symbol_name(x)[1];","\treturn\t('\\'' == c0 \u0026\u0026    0 == c1) ||","\t\t( ':' == c0 \u0026\u0026 '\\\\' == c1) ||","\t\t( ':' == c0 \u0026\u0026 '\\'' == c1) ||","\t\t( ':' == c0 \u0026\u0026  '/' == c1) ||","\t\t( '/' == c0 \u0026\u0026    0 == c1) ||","\t\t( ':' == c0 \u0026\u0026  '~' == c1) ||","\t\t( ':' == c0 \u0026\u0026  '*' == c1) ||","\t\t('\\\\' == c0 \u0026\u0026    0 == c1) ||","\t\t('\\\\' == c0 \u0026\u0026  '~' == c1) ||","\t\t('\\\\' == c0 \u0026\u0026  '*' == c1);","}","","static int fundef_arity(cell x) {","\tint\tn, m;","","\tif (pair_p(x)) {","\t\tif (car(x) == S_fun0 ||","\t\t    car(x) == S_fun1 ||","\t\t    car(x) == S_fun2 ||","\t\t    car(x) == S_fun3","\t\t)","\t\t\treturn 0;","\t\tn = 0;","\t\twhile (x != NIL) {","\t\t\tm = fundef_arity(car(x));","\t\t\tif (m \u003e n) n = m;","\t\t\tx = cdr(x);","\t\t}","\t\treturn n;","\t}","\tif (S_x == x) return 1;","\tif (S_y == x) return 2;","\tif (S_z == x) return 3;","\treturn 0;","}","","static cell funtype(cell f) {","\tint\tk;","","\tk = fundef_arity(f);","\treturn \t0 == k? S_fun0:","\t\t1 == k? S_fun1:","\t\t2 == k? S_fun2:","\t\tS_fun3;","}","","#define syntax_error() \\","\terror(\"syntax error\", Tok)","","#define token() \\","\tkg_read()","","static int cmatch(int c) {","\treturn symbol_p(Tok) \u0026\u0026 symbol_name(Tok)[0] == c;","}","","static int cmatch2(char *c2) {","\treturn\tsymbol_p(Tok) \u0026\u0026","\t\tsymbol_name(Tok)[0] == c2[0] \u0026\u0026","\t\tsymbol_name(Tok)[1] == c2[1];","}","","static void expect(int c) {","\tchar\tb[100];","","\tif (cmatch(c)) {","\t\tTok = token();","\t}","\telse {","\t\t// sprintf(b, \"expected :%c, got\", c);","\t\tb[0] = '\\0';","\t\tstrcat(b, \"expected :\");","\t\tb[0] = c;","\t\tb[1] = '\\0';","\t\terror(b, Tok);","\t}","}","","static cell expr(void);","static cell prog(int fun);","","static cell function(int ctx, cell *t) {","\tif (cmatch('{')) {","\t\tTok = token();","\t\tInfun++;","\t\tT = prog(1);","\t\tcar(T) = funtype(T);","\t\tInfun--;","\t\texpect('}');","\t\treturn T;","\t}","\telse if (variable_p(Tok)) {","\t\tT = Tok;","\t\tTok = token();","\t\treturn T;","\t}","\telse {","\t\tif (t != NULL) *t = Tok;","\t\tT = opsym(Tok, ctx);","\t\tTok = token();","\t\treturn T;","\t}","}","","static cell conditional(void) {","\tcell\tn;","","\tIncond++;","\tTok = token();","\tn = cons(expr(), NIL);","\tsave(n);","\texpect(';');","\tn = cons(expr(), n);","\tcar(Stack) = n;","\tif (cmatch2(\":|\")) {","\t\tIncond--;","\t\tn = cons(conditional(), n);","\t\tunsave(1);","\t\treturn cons(S_if, revb(n));","\t}","\telse {","\t\texpect(';');","\t\tn = cons(expr(), n);","\t\tcar(Stack) = n;","\t\tIncond--;","\t\texpect(']');","\t\tn = unsave(1);","\t\treturn cons(S_if, revb(n));","\t}","}","","static cell funapp_or_proj(cell v, int proj, int *fn) {","\tint\tn, pa;","\tcell\ta;","","\tsave(v);","\tpa = 0;","\tTok = token();","\ta = NIL;","\tsave(a);","\tif (cmatch(')')) {","\t\tTok = token();","\t\tn = 0;","\t}","\telse {","\t\tif (proj \u0026\u0026 cmatch(';')) {","\t\t\ta = cons(S_x, a);","\t\t\tcar(Stack) = a;","\t\t\tpa++;","\t\t}","\t\telse {","\t\t\ta = cons(expr(), a);","\t\t\tcar(Stack) = a;","\t\t}","\t\tn = 1;","\t\tif (cmatch(';')) {","\t\t\tTok = token();","\t\t\tif (proj \u0026\u0026 (cmatch(';') || cmatch(')'))) {","\t\t\t\ta = cons(pa? S_y: S_x, a);","\t\t\t\tcar(Stack) = a;","\t\t\t\tpa++;","\t\t\t}","\t\t\telse {","\t\t\t\ta = cons(expr(), a);","\t\t\t\tcar(Stack) = a;","\t\t\t}","\t\t\tn = 2;","\t\t\tif (cmatch(';')) {","\t\t\t\tTok = token();","\t\t\t\tif ( proj \u0026\u0026 cmatch(')')) {","\t\t\t\t\ta = cons(pa? S_y: S_x, a);","\t\t\t\t\tcar(Stack) = a;","\t\t\t\t\tpa++;","\t\t\t\t}","\t\t\t\telse {","\t\t\t\t\ta = cons(expr(), a);","\t\t\t\t\tcar(Stack) = a;","\t\t\t\t}","\t\t\t\tn = 3;","\t\t\t}","\t\t}","\t\texpect(')');","\t\tif (pa \u003e= n)","\t\t\terror(\"too few arguments in projection\", VOID);","\t}","\tv = cons(v, revb(a));","\tif (pa) {","\t\tv = cons(n\u003e2? S_call3: n\u003e1? S_call2: S_call1, v);","\t\tv = cons(v, NIL);","\t\tv = cons(pa\u003e1? S_fun2: S_fun1, v);","\t}","\telse {","\t\tv = cons(n\u003e2? S_call3:","\t\t\t n\u003e1? S_call2:","\t\t\t n\u003e0? S_call1:","\t\t\t S_call0,","\t\t\t v);","\t}","\tif (proj \u0026\u0026 pa \u003e 0 \u0026\u0026 (cmatch('(') || cmatch2(\":(\"))) {","\t\tv = funapp_or_proj(v, 0, NULL);","\t\tpa = 0;","\t}","\tif (fn != NULL) *fn = pa != 0;","\tunsave(2);","\treturn v;","}","","static cell apply_adverbs(cell f, cell a1, int ctx) {","\tcell\tadv, n, ex;","","\tTmp = f;","\tsave(a1);","\tsave(f);","\tTmp = NIL;","\tadv = ex = cons(NIL, NIL);","\tif (a1 != VOID)","\t\tadv = cons(a1, adv);","\tadv = cons(f, adv);","\tsave(adv);","\twhile (adverb_p(Tok)) {","\t\tadv = cons(adverbsym(Tok, ctx), adv);","\t\tcar(Stack) = adv;","\t\tTok = token();","\t\tctx = 1;","\t}","\tn = expr();","\tcar(ex) = n;","\tf = unsave(1);","\tunsave(2);","\treturn f;","}","","#define is_var(x) \\","\t(x == var_name(Tok)[0] \u0026\u0026 0 == var_name(Tok)[1])","","#define operator_p(x) \\","\t(symbol_p(x) \u0026\u0026 is_special(symbol_name(x)[0]))","","static cell factor(void) {","\tcell\tf, v, op;","\tint\tfn;","","\tif (\tnumber_p(Tok) ||","\t\tchar_p(Tok) ||","\t\tstring_p(Tok)","\t) {","\t\tT = Tok;","\t\tTok = token();","\t\treturn T;","\t}","\telse if (dictionary_p(Tok)) {","\t\tT = cons(Tok, NIL);","\t\tT = cons(S_newdict, T);","\t\tTok = token();","\t\treturn T;","\t}","\telse if (list_p(Tok)) {","\t\tT = cons(S_lslit, Tok);","\t\tTok = token();","\t\treturn T;","\t}","\telse if (variable_p(Tok)) {","\t\tv = Tok;","\t\tsave(v);","\t\tif (Infun) {","\t\t\t     if (is_var('x')) v = S_x;","\t\t\telse if (is_var('y')) v = S_y;","\t\t\telse if (is_var('z')) v = S_z;","\t\t}","\t\tTok = token();","\t\tfn = 1;","\t\tif (cmatch('(') || cmatch2(\":(\"))","\t\t\tv = funapp_or_proj(v, 1, \u0026fn);","\t\tif (adverb_p(Tok)) {","\t\t\tif (!fn) error(\"missing verb\", Tok);","\t\t\tv = apply_adverbs(v, VOID, 1);","\t\t}","\t\tunsave(1);","\t\treturn v;","\t}","\telse if (cmatch('(')) {","\t\tTok = token();","\t\tT = expr();","\t\texpect(')');","\t\treturn T;","\t}","\telse if (cmatch('{')) {","\t\tf = function(1, \u0026op);","\t\tsave(f);","\t\tfn = 1;","\t\tif (cmatch('(') || cmatch2(\":(\"))","\t\t\tf = funapp_or_proj(f, 1, \u0026fn);","\t\tif (adverb_p(Tok)) {","\t\t\tif (!fn) error(\"missing verb\", Tok);","\t\t\tf = apply_adverbs(f, VOID, 1);","\t\t}","\t\tunsave(1);","\t\treturn f;","\t}","\telse if (cmatch2(\":[\")) {","\t\treturn conditional();","\t}","\telse if (operator_p(Tok)) {","\t\tf = function(1, \u0026op);","\t\tif (adverb_p(Tok)) {","\t\t\tf = opsym(op, adverb_arity(Tok, 1));","\t\t\tf = apply_adverbs(f, VOID, 1);","\t\t}","\t\telse {","\t\t\tsave(f);","\t\t\tf = cons(f, cons(NIL, NIL));","\t\t\tcar(Stack) = f;","\t\t\tv = expr();","\t\t\tcadr(f) = v;","\t\t\tunsave(1);","\t\t}","\t\treturn f;","\t}","\telse if (symbol_p(Tok)) {","\t\tT = Tok;","\t\tTok = token();","\t\treturn T;","\t}","\telse {","\t\tsyntax_error();","\t\treturn UNDEFINED;","\t}","}","","#define is_delimiter(s) \\","\t(')' == s[0] || \\","\t '}' == s[0] || \\","\t ']' == s[0] || \\","\t ';' == s[0] || \\","\t (':' == s[0] \u0026\u0026 '|' == s[1]))","","static cell expr(void) {","\tcell\tf, a, y, n, dy;","\tcell\top;","\tchar\t*s;","\tchar\tname[TOKEN_LENGTH+1];","\tint\tfn;","","\ta = factor();","\twhile (operator_p(Tok) || variable_p(Tok) || cmatch('{')) {","\t\tsave(a);","\t\tif (variable_p(Tok))","\t\t\ts = var_name(Tok);","\t\telse","\t\t\ts = symbol_name(Tok);","\t\tif (operator_p(Tok) \u0026\u0026 is_delimiter(s)) {","\t\t\tunsave(1);","\t\t\tbreak;","\t\t}","\t\tif (':' == s[0] \u0026\u0026 ':' == s[1]) {","\t\t\tif (S_x == a) error(\"'x' is read-only\", VOID);","\t\t\tif (S_y == a) error(\"'y' is read-only\", VOID);","\t\t\tif (S_z == a) error(\"'z' is read-only\", VOID);","\t\t\tif (variable_p(a)) {","\t\t\t\tif (!Infun \u0026\u0026","\t\t\t\t    Module != UNDEFINED \u0026\u0026","\t\t\t\t    !is_local(var_name(a)) \u0026\u0026","\t\t\t\t    !is_funvar(var_name(a))","\t\t\t\t) {","\t\t\t\t\tstrcpy(name, var_name(a));","\t\t\t\t\tmkmodlocal(name);","\t\t\t\t\ty = make_variable(name, NIL);","\t\t\t\t\ta = var_symbol(y);","\t\t\t\t}","\t\t\t\telse {","\t\t\t\t\ta = var_symbol(a);","\t\t\t\t}","\t\t\t\tcar(Stack) = a;","\t\t\t}","\t\t}","\t\tdy = Tok;","\t\tsave(dy);","\t\top = 0;","\t\tf = function(2, \u0026op);","\t\tsave(f);","\t\tif ((!operator_p(dy) || '{' == symbol_name(dy)[0]) \u0026\u0026","\t\t    (cmatch('(') || cmatch2(\":(\")))","\t\t{","\t\t\tf = funapp_or_proj(f, 1, \u0026fn);","\t\t\tcar(Stack) = f;","\t\t\tif (!fn) error(\"dyad expected\", dy);","\t\t}","\t\tif (adverb_p(Tok)) {","\t\t\tif (op) f = opsym(op, adverb_arity(Tok, 2));","\t\t\ta = apply_adverbs(f, a, 2);","\t\t}","\t\telse {","\t\t\tn = cons(expr(), NIL);","\t\t\tn = cons(a, n);","\t\t\ta = cons(f, n);","\t\t\tif (!operator_p(dy) || '{' == symbol_name(dy)[0])","\t\t\t\ta = cons(S_call2, a);","\t\t}","\t\tunsave(3);","\t}","\treturn a;","}","","static cell rename_locals(cell loc, int id) {","\tcell\tn, a, nn;","\tchar\tb1[TOKEN_LENGTH], b2[TOKEN_LENGTH+1];","\tchar    *s;","","\tif (NIL == loc)","\t\treturn NIL;","\tn = cons(NIL, NIL);","\tsave(n);","\twhile (loc != NIL) {","\t\tstrcpy(b1, symbol_name(car(loc)));","\t\tmkglobal(b1);","\t\t// sprintf(b2, \"%s`%d\", b1, id);","\t\tb2[0] = '\\0';","\t\ts = strcat(b2, b1);","\t\ts[0] = '`';","\t\ts++;","\t\ts = strcati(s, id);","\t\t","\t\tnn = symbol_ref(b2);","\t\tcar(n) = nn;","\t\tloc = cdr(loc);","\t\tif (loc != NIL) {","\t\t\ta = cons(NIL, NIL);","\t\t\tcdr(n) = a;","\t\t\tn = cdr(n);","\t\t}","\t}","\tn = unsave(1);","\treturn n;","}","","static cell prog(int fun) {","\tcell\tp, ps, n, mfvs, locns;","\tchar\t*s;","\tint\tfirst = 1;","","\tmfvs = Mod_funvars;","\tlocns = Locnames;","\tsave(ps = NIL);","\tfor (;;) {","\t\tp = expr();","\t\tps = cons(p, ps);","\t\tcar(Stack) = ps;","\t\tif (!cmatch(';'))","\t\t\tbreak;","\t\tif (fun \u0026\u0026 first \u0026\u0026 pair_p(p) \u0026\u0026 car(p) == S_lslit) {","\t\t\tif (Module != UNDEFINED)","\t\t\t\tMod_funvars = cons(cdr(p), Mod_funvars);","\t\t\tLocnames = cons(new_atom(Local_id, cdr(p)),","\t\t\t\t\tLocnames);","\t\t\tcdr(p) = rename_locals(cdr(p), Local_id++);","\t\t\tcar(ps) = p;","\t\t}","\t\tfirst = 0;","\t\tTok = token();","\t}","\tMod_funvars = mfvs;","\tLocnames = locns;","\tcar(Stack) = ps = revb(ps);","\tif (\tfun \u0026\u0026","\t\tps != NIL \u0026\u0026","\t\tpair_p(car(ps)) \u0026\u0026","\t\tS_lslit == caar(ps) \u0026\u0026","\t\tcdr(ps) != NIL)","\t{","\t\tfor (p = car(ps); p != NIL; p = cdr(p)) {","\t\t\tif (symbol_p(car(p))) {","\t\t\t\ts = symbol_name(car(p));","\t\t\t\tn = make_variable(s, NO_VALUE);","\t\t\t\tcar(p) = n;","\t\t\t}","\t\t}","\t}","\treturn cons(S_prog, unsave(1));","}","","static cell parse(char *p) {","\tcell\tx;","","\topen_input_string(p);","\tTok = token();","\tif (END_OF_FILE == Tok) {","\t\tclose_input_string();","\t\treturn END_OF_FILE;","\t}","\tx = prog(0);","\tif (Tok != END_OF_FILE)","\t\tsyntax_error();","\tclose_input_string();","\treturn x;","}","","/*"," * Bytecode Compiler, Code generator"," */","","static void emit(cell p) {","\tsave(p);","\tif (NIL == P) {","\t\tP = Prog = cons(p, NIL);","\t}","\telse {","\t\tcdr(P) = cons(p, NIL);","\t\tP = cdr(P);","\t}","\tunsave(1);","}","","static void\tcomp(cell p);","","static void comp_funcall(cell p, int k) {","\tcell\tq;","\tint\ti;","","\tif (length(cddr(p)) != k)","\t\terror(\"wrong argument count\", cdr(p));","\tfor (i=0, q = cddr(p); i\u003ck; q = cdr(q), i++)","\t\tcomp(car(q));","\tcomp(cadr(p));","\temit(3==k? S_call3: 2==k? S_call2: 1==k? S_call1: S_call0);","\temit(3==k? S_pop3: 2==k? S_pop2: 1==k? S_pop1: S_pop0);","}","","static void comp_fundef(cell p, int k) {","\tcell\tq, f;","","\tf = P;","\tfor (q = cdr(p); q != NIL; q = cdr(q)) {","\t\tcomp(car(q));","\t\tif (cdr(q) != NIL)","\t\t\temit(S_clear);","\t}","\tP = f; emit(NIL == f? Prog: cdr(f));","\temit(3==k? S_fun3: 2==k? S_fun2: 1==k? S_fun1: S_fun0);","}","","#define adverb_op_p(op) \\","\t(op) == S_conv || (op) == S_each || (op) == S_sconv || \\","\t(op) == S_iter || (op) == S_siter || (op) == S_while || \\","\t(op) == S_swhile || (op) == S_eachp || (op) == S_over || \\","\t(op) == S_sover || (op) == S_each2 || (op) == S_eachl || \\","\t(op) == S_eachr || (op) == S_over2 || (op) == S_sover2","","static int adverb_op_arity(cell op) {","\tif (op == S_conv) return 1;","\tif (op == S_each) return 1;","\tif (op == S_sconv) return 1;","\tif (op == S_iter) return 1;","\tif (op == S_siter) return 1;","\tif (op == S_while) return 1;","\tif (op == S_swhile) return 1;","\tif (op == S_eachp) return 2;","\tif (op == S_over) return 2;","\tif (op == S_sover) return 2;","\tif (op == S_each2) return 2;","\tif (op == S_eachl) return 2;","\tif (op == S_eachr) return 2;","\tif (op == S_over2) return 2;","\tif (op == S_sover2) return 2;","\terror(\"internal: adverb_op_arity():  bad adverb op\", op);","\treturn 0;","}","","static int adverb_op_ctx(cell op) {","\tif (op == S_conv) return 1;","\tif (op == S_each) return 1;","\tif (op == S_sconv) return 1;","\tif (op == S_iter) return 2;","\tif (op == S_siter) return 2;","\tif (op == S_while) return 2;","\tif (op == S_swhile) return 2;","\tif (op == S_eachp) return 1;","\tif (op == S_over) return 1;","\tif (op == S_sover) return 1;","\tif (op == S_each2) return 2;","\tif (op == S_eachl) return 2;","\tif (op == S_eachr) return 2;","\tif (op == S_over2) return 2;","\tif (op == S_sover2) return 2;","\terror(\"internal: adverb_op_ctx():  bad adverb op\", op);","\treturn 0;","}","","static void comp_adverb(cell p, int args) {","\tcell\tf, q;","\tint\tctx, aa, nest;","","\taa = adverb_op_arity(car(p));","\tif (args) {","\t\tf = p;","\t\tfor (q = p; adverb_op_p(car(q)); q = cdr(q))","\t\t\tf = q;","\t\tctx = adverb_op_ctx(car(f));","\t\tif (2 == ctx) {","\t\t\tif (NIL == cdr(q) || NIL == cddr(q) || cdddr(q) != NIL)","\t\t\t\terror(\"wrong adverb context\", opname(car(f)));","\t\t\tcomp(caddr(q));","\t\t\tcomp(cadr(q));","\t\t\temit(S_swap);","\t\t}","\t\telse {","\t\t\tif (NIL == cdr(q) || cddr(q) != NIL)","\t\t\t\terror(\"wrong adverb context\", car(f));","\t\t\tcomp(cadr(q));","\t\t}","\t}","\tnest = 0;","\tif (adverb_op_p(cadr(p))) {","\t\tf = P;","\t\tcomp_adverb(cdr(p), 0);","\t\tP = f; emit(cdr(f));","\t\tnest = 1;","\t}","\tif (nest \u0026\u0026 aa \u003e 1)","\t\terror(\"monad expected in chained adverb\", opname(car(p)));","\tif (\tvariable_p(cadr(p)) \u0026\u0026","\t\tcadr(p) != S_x \u0026\u0026","\t\tcadr(p) != S_y \u0026\u0026","\t\tcadr(p) != S_z \u0026\u0026","\t\t'%' == var_name(cadr(p))[0])","\t{","\t\tif (!nest) emit(cons(cadr(p), NIL));","\t\temit(2==aa? S_imm2: S_imm1);","\t}","\telse {","\t\tf = P;","\t\tcomp(cadr(p));","\t\temit(2==aa? S_call2: S_call1);","\t\temit(2==aa? S_pop2: S_pop1);","\t\tP = f; emit(cdr(f));","\t\temit(2==aa? S_imm2: S_imm1);","\t}","\temit(car(p));","}","","static void comp(cell p) {","\tcell\top, q;","","\tif (!atom_p(p))","\t\top = car(p);","\telse","\t\top = UNDEFINED;","\tif (atom_p(p)) {","\t\temit(p);","\t}","\telse if (op == S_lslit) {","\t\temit(cdr(p));","\t}","\telse if (op == S_newdict) {","\t\temit(cadr(p));","\t\temit(S_newdict);","\t}","\telse if (op == S_atom || op == S_char || op == S_down ||","\t\t op == S_enum || op == S_expand || op == S_first ||","\t\t op == S_floor || op == S_format || op == S_group ||","\t\t op == S_list || op == S_neg || op == S_not ||","\t\t op == S_range || op == S_recip || op == S_rev ||","\t\t op == S_shape || op == S_size || op == S_transp ||","\t\t op == S_up || op == S_undef)","\t{","\t\tif (NIL == cdr(p) || cddr(p) != NIL)","\t\t\terror(\"wrong argument count\", op);","\t\tcomp(cadr(p));","\t\temit(car(p));","\t}","\telse if (op == S_amend || op == S_amendd || op == S_cut ||","\t\t op == S_def || op == S_div || op == S_drop ||","\t\t op == S_eq || op == S_find || op == S_form ||","\t\t op == S_format2 || op == S_gt || op == S_index ||","\t\t op == S_indexd || op == S_intdiv || op == S_join ||","\t\t op == S_lt || op == S_match || op == S_max ||","\t\t op == S_min || op == S_minus || op == S_plus ||","\t\t op == S_power || op == S_rem || op == S_reshape ||","\t\t op == S_rot || op == S_split || op == S_take ||","\t\t op == S_times)","\t{","\t\tif (NIL == cdr(p) || NIL == cddr(p) || cdddr(p) != NIL)","\t\t\terror(\"wrong argument count\", op);","\t\tif (\top == S_power \u0026\u0026","\t\t\tHL_power != UNDEFINED \u0026\u0026","\t\t\t!false_p(var_value(S_fastpow)))","\t\t{","\t\t\tcomp(cadr(p));","\t\t\tcomp(caddr(p));","\t\t\temit(HL_power);","\t\t\temit(S_call2);","\t\t\temit(S_pop2);","\t\t}","\t\telse {","\t\t\tcomp(caddr(p));","\t\t\tcomp(cadr(p));","\t\t\temit(S_swap);","\t\t\temit(car(p));","\t\t}","\t}","\telse if (op == S_conv || op == S_each || op == S_sconv ||","\t\t op == S_iter || op == S_siter || op == S_while ||","\t\t op == S_swhile || op == S_eachp || op == S_over ||","\t\t op == S_sover || op == S_each2 || op == S_eachl ||","\t\t op == S_eachr || op == S_over2 || op == S_sover2)","\t{","\t\tcomp_adverb(p, 1);","\t}","\telse if (op == S_prog) {","\t\tfor (p = cdr(p); p != NIL; p = cdr(p)) {","\t\t\tcomp(car(p));","\t\t\tif (cdr(p) != NIL)","\t\t\t\temit(S_clear);","\t\t}","\t}","\telse if (op == S_if) {","\t\tcomp(cadr(p));","\t\tq = P; comp(caddr(p));","\t\tP = q; emit(cdr(q));","\t\tq = P; comp(cadddr(p));","\t\tP = q; emit(cdr(q));","\t\temit(S_if);","\t}","\telse if (op == S_call0)  { comp_funcall(p, 0); }","\telse if (op == S_call1)  { comp_funcall(p, 1); }","\telse if (op == S_call2)  { comp_funcall(p, 2); }","\telse if (op == S_call3)  { comp_funcall(p, 3); }","\telse if (op == S_fun0)   { comp_fundef(p, 0); }","\telse if (op == S_fun1)   { comp_fundef(p, 1); }","\telse if (op == S_fun2)   { comp_fundef(p, 2); }","\telse if (op == S_fun3)   { comp_fundef(p, 3); }","\telse {","\t\terror(\"internal: unknown operator in AST\", p);","\t}","}","","static cell compile(char *s) {","\tcell\tp;","","\tp = parse(s);","\tif (END_OF_FILE == p)","\t\treturn END_OF_FILE;","\tsave(p);","\tP = Prog = NIL;","\tcomp(p);","\tif (Debug) {","\t\tkg_write(Prog);","\t\tnl();","\t}","\tunsave(1);","\treturn Prog;","}","","/*"," * Interpreters"," */","","static cell pjoin(cell a, cell b) {","\tTmp = b;","\tsave(a);","\tsave(b);","\tTmp = NIL;","\ta = join(a, b);","\tunsave(2);","\treturn a;","}","","static cell load(cell x, int v, int scr) {","\tint\tp, oldp, oline, oldprog;","\tchar\t*s, *kp, kpbuf[TOKEN_LENGTH+1];","\tcell\tn = NIL; /*LINT*/","\tcell\tr = NIL;","","\tsave(x);","\tif ('.' == string(x)[0] || '/' == string(x)[0]) {","\t\tsave(NIL);","\t\tn = x;","\t\tp = open_input_port(string(x));","\t\tif (p \u003c 0) {","\t\t\tn = pjoin(x, make_string(\".kg\", 3));","\t\t\tcar(Stack) = n;","\t\t\tp = open_input_port(string(n));","\t\t}","\t}","\telse {","\t\ts = getenv(\"KLONGPATH\");","\t\tif (NULL == s) {","\t\t\tstrcpy(kpbuf, DFLPATH);","\t\t}","\t\telse {","\t\t\tstrncpy(kpbuf, s, TOKEN_LENGTH);","\t\t\tkpbuf[TOKEN_LENGTH] = 0;","\t\t\tif (strlen(kpbuf) \u003e= TOKEN_LENGTH) {","\t\t\t\terror(\"KLONGPATH too long!\", VOID);","\t\t\t\treturn UNDEFINED;","\t\t}","\t\t}","\t\tkp = strtok(kpbuf, \":\");","\t\tp = -1;","\t\tsave(NIL);","\t\twhile (kp != NULL) {","\t\t\tn = pjoin(make_string(\"/\", 1), x);","\t\t\tcar(Stack) = n;","\t\t\tn = pjoin(make_string(kp, strlen(kp)), n);","\t\t\tif ((p = open_input_port(string(n))) \u003e= 0)","\t\t\t\tbreak;","\t\t\tn = pjoin(n, make_string(\".kg\", 3));","\t\t\tif ((p = open_input_port(string(n))) \u003e= 0)","\t\t\t\tbreak;","\t\t\tkp = strtok(NULL, \":\");","\t\t}","\t}","\tif (p \u003c 0) {","\t\terror(\".l: cannot open file\", x);","\t\tunsave(2);","\t\treturn UNDEFINED;","\t}","\tif (1 == v \u0026\u0026 0 == Quiet \u0026\u0026 NIL == Loading) {","\t\tprints(\"loading \");","\t\tkg_write(n);","\t\tnl();","\t}","\tclose_input_string();","\tlock_port(p);","\toldp = input_port();","\tset_input_port(p);","\toline = Line;","\tLine = 1;","\tLoading = cons(x, Loading);","\toldprog = Prog_chan;","\tProg_chan = p;","\tsave(r);","\tif (scr) kg_getline(kpbuf, TOKEN_LENGTH);","\tfor (;;) {","\t\tTok = token();","\t\tif (port_eof(p))","\t\t\tbreak;","\t\tif (END_OF_FILE == Tok)","\t\t\tcontinue;","\t\tx = prog(0);","\t\tif (Tok != END_OF_FILE)","\t\t\tsyntax_error();","\t\tsave(x);","\t\tP = Prog = 0;","\t\tcomp(x);","\t\tx = Prog;","\t\tunsave(1);","\t\tif (s9_aborted())","\t\t\tbreak;","\t\tset_input_port(oldp);","\t\teval(x);","\t\tr = car(Stack) = car(Dstack);","\t\tset_input_port(p);","\t\top_clear();","\t}","\tProg_chan = oldprog;","\tLoading = cdr(Loading);","\tLine = oline;","\tset_input_port(oldp);","\tunlock_port(p);","\tclose_port(p);","\tunsave(3);","\treturn r;","}","","static cell evalstr(cell x) {","\tchar\tbuf[TOKEN_LENGTH+1];","","\tif (string_len(x) \u003e= TOKEN_LENGTH)","\t\treturn error(\"evalstr: expression too long\", VOID);","\tstrcpy(buf, string(x));","\tx = compile(buf);","\tif (END_OF_FILE == x)","\t\treturn END_OF_FILE;","\tif (s9_aborted())","\t\treturn UNDEFINED;","\teval(x);","\tif (s9_aborted())","\t\treturn UNDEFINED;","\treturn pop();","}","","static void eval_arg(char *s, int echo) {","\tcell\tx;","","\tx = make_string(s, strlen(s));","\tsave(x);","\tx = evalstr(x);","\tunsave(1);","\tif (s9_aborted())","\t\tbye(1);","\tif (0 == echo)","\t\treturn;","\tkg_write(x);","\tnl();","}","","int rep() {","\tcell\tx;","\t","\tProg_chan = 0;","\treset_std_ports();","\tDstack = NIL;","\ts9_reset();","\tIntr = 0;","\tif (!Quiet) {","\t\tprints(\"        \");","\t\tflush();","\t}","\tif (kg_getline(Inbuf, TOKEN_LENGTH) == NULL \u0026\u0026 Intr == 0)","\t\treturn 0;","\tif (Intr)","\t\treturn 1;","\tx = compile(Inbuf);","\ttranscribe(make_string(Inbuf, strlen(Inbuf)), 1);","\tif (s9_aborted() || atom_p(x))","\t\treturn 1;","\tSafe_dict = Sys_dict;","\teval(x);","\tif (s9_aborted()) {","\t\tSys_dict = Safe_dict;","\t\treturn 1;","\t}","\tset_output_port(1);","\tkg_write(car(Dstack));","\tnl();","\ttranscribe(car(Dstack), 0);","\tvar_value(S_it) = car(Dstack);","\treturn 1;","}","","static void interpret(void) {","\twhile(rep()) { }","}","","static void make_image_file(char *s) {","\tchar\tmagic[16];","\tchar\terrbuf[128];","\tchar\t*r;","","\tmemcpy(magic, \"KLONGYYYYMMDD___\", 16);","\tmemcpy(\u0026magic[5], VERSION, 8);","\timage_vars(Image_vars);","\tr = dump_image(s, magic);","\tif (NULL == r)","\t\treturn;","\t// sprintf(errbuf, \"kg: dump_image(): %s\", r);","\terrbuf[0] = '\\0';","\tr = strcat(errbuf, \"kg: dump_image(): \");","\tr = strcat(r, r);","\tfatal(errbuf);","}","","static void load_image_file(void) {","\tchar\tmagic[16];","\tchar\tkpbuf[TOKEN_LENGTH+1];","\tchar\terrbuf[128];","\tchar\t*r, *s, *kp;","\tFILE\t*f;","","\tmemcpy(magic, \"KLONGYYYYMMDD___\", 16);","\tmemcpy(\u0026magic[5], VERSION, 8);","\tif (NULL == (kp = getenv(\"KLONGPATH\")))","\t\tkp = DFLPATH;","\tif (strlen(kp) \u003e= TOKEN_LENGTH)","\t\tfatal(\"KLONGPATH too long\");","\tstrcpy(kpbuf, kp);","\tkp = strtok(kpbuf, \":\");","\twhile (kp != NULL) {","\t\t// sprintf(Image_path, \"%s/klong.image\", kp);","\t\tImage_path[0] = '\\0';","\t\ts = strcat(Image_path, kp);","\t\ts = strcat(s, \"/klong.image\");","\t\tf = fopen(Image_path, \"r\");","\t\tif (f != NULL) {","\t\t\tr = load_image(Image_path, magic);","\t\t\tif (r != NULL) {","\t\t\t\t//fprintf(stderr, \"kg: bad image file: %s\\n\",","\t\t\t\t//\tImage_path);","\t\t\t\tfwrite(\"kg:bad image file: \", 1, 19, stderr);","\t\t\t\tfwrite(Image_path, 1, strlen(Image_path), stderr);","\t\t\t\tputc('\\n', stderr);","\t\t\t\t//sprintf(errbuf, \"load_image(): %s\", r);","\t\t\t\terrbuf[0] = '\\0';","\t\t\t\ts = strcat(errbuf, \"load_image(): \");","\t\t\t\ts = strcat(s, r);","\t\t\t\tfatal(errbuf);","\t\t\t}","\t\t}","\t\tkp = strtok(NULL, \":\");","\t}","\tHL_power = find_var(\".pow\");","}","","/*"," * Initialization and Startup"," */","","static void init(void) {","\tint\ti;","\tcell\tn, op;","","\tcleartrace();","\ts9_init(GC_root, NULL, NULL);","\timage_vars(Image_vars);","\tDstack = NIL;","\tFrame = NIL;","\tLocals = NIL;","\tQuiet = 0;","\tScript = 0;","\tSys_dict = NIL;","\tFrom_chan = 0;","\tTo_chan = 1;","\tProg_chan = 0;","\tLine = 1;","\tListlev = 0;","\tIncond = 0;","\tReport = 1;","\tTranscript = -1;","\tInfun = 0;","\tLoading = NIL;","\tModule = UNDEFINED;","\tLocnames = NIL;","\tLocal_id = 0;","\tDisplay = 0;","\tIntr = 0;","\tImage_path[0] = 0;","\tHL_power = UNDEFINED;","\tBarrier = new_atom(T_BARRIER, 0);","#ifndef wasm","\tsrand(time(NULL)*123);","#endif","\tfor (i = 0; Ops[i].name != NULL; i++) {","\t\top = make_primop(i, Ops[i].syntax);","\t\tmake_variable(Ops[i].name, op);","\t}","\tS_amend = var_ref(\"%amend\");","\tS_amendd = var_ref(\"%amendd\");","\tS_atom = var_ref(\"%atom\");","\tS_call0 = var_ref(\"%call0\");","\tS_call1 = var_ref(\"%call1\");","\tS_call2 = var_ref(\"%call2\");","\tS_call3 = var_ref(\"%call3\");","\tS_char = var_ref(\"%char\");","\tS_clear = var_ref(\"%clear\");","\tS_conv = var_ref(\"%conv\");","\tS_cut = var_ref(\"%cut\");","\tS_def = var_ref(\"%def\");","\tS_div = var_ref(\"%div\");","\tS_down = var_ref(\"%down\");","\tS_drop = var_ref(\"%drop\");","\tS_each = var_ref(\"%each\");","\tS_each2 = var_ref(\"%each2\");","\tS_eachl = var_ref(\"%eachl\");","\tS_eachp = var_ref(\"%eachp\");","\tS_eachr = var_ref(\"%eachr\");","\tS_enum = var_ref(\"%enum\");","\tS_eq = var_ref(\"%eq\");","\tS_expand = var_ref(\"%expand\");","\tS_find = var_ref(\"%find\");","\tS_first = var_ref(\"%first\");","\tS_floor = var_ref(\"%floor\");","\tS_form = var_ref(\"%form\");","\tS_format = var_ref(\"%format\");","\tS_format2 = var_ref(\"%format2\");","\tS_fun0 = var_ref(\"%fun0\");","\tS_fun1 = var_ref(\"%fun1\");","\tS_fun2 = var_ref(\"%fun2\");","\tS_fun3 = var_ref(\"%fun3\");","\tS_group = var_ref(\"%group\");","\tS_gt = var_ref(\"%gt\");","\tS_if = var_ref(\"%if\");","\tS_imm1 = var_ref(\"%imm1\");","\tS_imm2 = var_ref(\"%imm2\");","\tS_index = var_ref(\"%index\");","\tS_indexd = var_ref(\"%indexd\");","\tS_intdiv = var_ref(\"%intdiv\");","\tS_it = var_ref(\"it\");","\tS_iter = var_ref(\"%iter\");","\tS_join = var_ref(\"%join\");","\tS_list = var_ref(\"%list\");","\tS_lslit = var_ref(\"%lslit\");","\tS_lt = var_ref(\"%lt\");","\tS_match = var_ref(\"%match\");","\tS_max = var_ref(\"%max\");","\tS_min = var_ref(\"%min\");","\tS_minus = var_ref(\"%minus\");","\tS_neg = var_ref(\"%neg\");","\tS_newdict = var_ref(\"%newdict\");","\tS_not = var_ref(\"%not\");","\tS_over = var_ref(\"%over\");","\tS_over2 = var_ref(\"%over2\");","\tS_plus = var_ref(\"%plus\");","\tS_pop0 = var_ref(\"%pop0\");","\tS_pop1 = var_ref(\"%pop1\");","\tS_pop2 = var_ref(\"%pop2\");","\tS_pop3 = var_ref(\"%pop3\");","\tS_power = var_ref(\"%power\");","\tS_prog = var_ref(\"%prog\");","\tS_range = var_ref(\"%range\");","\tS_recip = var_ref(\"%recip\");","\tS_rem = var_ref(\"%rem\");","\tS_reshape = var_ref(\"%reshape\");","\tS_rev = var_ref(\"%rev\");","\tS_rot = var_ref(\"%rot\");","\tS_sconv = var_ref(\"%sconv\");","\tS_siter = var_ref(\"%siter\");","\tS_sover = var_ref(\"%sover\");","\tS_sover2 = var_ref(\"%sover2\");","\tS_swhile = var_ref(\"%swhile\");","\tS_shape = var_ref(\"%shape\");","\tS_size = var_ref(\"%size\");","\tS_split = var_ref(\"%split\");","\tS_swap = var_ref(\"%swap\");","\tS_syscall = var_ref(\"%syscall\");","\tS_take = var_ref(\"%take\");","\tS_times = var_ref(\"%times\");","\tS_transp = var_ref(\"%transp\");","\tS_up = var_ref(\"%up\");","\tS_undef = var_ref(\"%undef\");","\tS_while = var_ref(\"%while\");","\tS_x = var_ref(\"%x\");","\tS_y = var_ref(\"%y\");","\tS_z = var_ref(\"%z\");","\tS_argv = var_ref(\".a\");","\tn = var_ref(\".cin\");","\tvar_value(n) = make_port(0, T_INPUT_PORT);","\tn = var_ref(\".cout\");","\tvar_value(n) = make_port(1, T_OUTPUT_PORT);","\tn = var_ref(\".cerr\");","\tvar_value(n) = make_port(2, T_OUTPUT_PORT);","\tS_cols = var_ref(\".cols\");","\tvar_value(S_cols) = make_integer(80);","\tEpsilon_var = make_variable(\".e\", Epsilon);","\tS_edit = var_ref(\".edit\");","\tvar_value(S_edit) = make_integer(1);","\tS_thisfn = var_ref(\".f\");","\tS_fastpow = var_ref(\".fastpow\");","\tvar_value(S_fastpow) = make_integer(0);","\tS_host = var_ref(\".h\");","#ifdef plan9","\tn = symbol_ref(\"plan9\");","#else","\tn = symbol_ref(\"unix\");","#endif","\tvar_value(S_host) = n;","\tn = var_ref(\".helpdb\");","\tvar_value(n) = NIL;","\tfor (i = 0; Sysfns[i].name != NULL; i++) {","\t\tn = cons(S_syscall, NIL);","\t\tsave(n);","\t\tn = make_integer(i);","\t\tn = cons(n, unsave(1));","\t\top = make_function(n, 0, Sysfns[i].arity);","\t\tmake_variable(Sysfns[i].name, op);","\t}","}","","#ifdef plan9"," void keyboard_interrupt(void *dummy, char *note) {","\tUSED(dummy);","\tif (strstr(note, \"interrupt\") == NULL)","\t\tnoted(NDFLT);","\treset_std_ports();","\terror(\"interrupted\", VOID);","\tIntr = 1;","\tnoted(NCONT);"," }","#else"," #ifndef wasm","  void keyboard_interrupt(int sig) {"," \treset_std_ports();"," \terror(\"interrupted\", VOID);"," \tIntr = 1;"," \thandle_sigint();","  }"," ","  void keyboard_quit(int sig) {"," \tfatal(\"quit signal received, exiting\");","  }"," #endif","#endif","","static void usage(int x) {","\tprints(\"Usage: kg [-dhnqsuv?] [-e expr] [-l file] [-o file]\");","\tnl();","\tprints(\"          [-r expr] [-t file] [file [args]] [-- args]\");","\tnl();","\tif (x) {","\t\tbye(1);","\t}","}","","static void longusage(void) {","\tchar\t*s;","","\tnl();","\tprints(\"Klong \");","\tprints(VERSION);","\tprints(\" by Nils M Holm, in the public domain\");","\tnl();","\tnl();","\tusage(0);","\tnl();","\tprints(\"-d         debug (print bytecode and call traces)\"); nl();","\tprints(\"-e expr    evaluate expression, no interactive mode\"); nl();","\tprints(\"-l file    load program from file\"); nl();","\tprints(\"-n         clean start: don't parse KLONGOPTS, don't\"); nl();","\tprints(\"           load any image (must be first option!)\"); nl();","\tprints(\"-o file    output image to file, then exit\"); nl();","\tprints(\"-q         quiet (no banner, no prompt, exit on errors)\");","\tnl();","\tprints(\"-r expr    run expr (like -e, but don't print result)\"); nl();","\tprints(\"-s         skip first line (#!) in script files\"); nl();","\tprints(\"-t file    send transcript to file\"); nl();","\tprints(\"-u         allocate unlimited memory (use with care!)\"); nl();","\tprints(\"file args  run program with arguments, then exit\"); nl();","\tprints(\"-- args    bind remaining arguments to .a\"); nl();","\tnl();","\tif ((s = getenv(\"KLONGPATH\")) != NULL) {","\t\tprints(\"KLONGPATH = \");","\t\tprints(s);","\t\tnl();","\t}","\tif ((s = getenv(\"KLONGOPTS\")) != NULL) {","\t\tprints(\"KLONGOPTS = \");","\t\tprints(s);","\t\tnl();","\t}","\tif (Image_path[0] != 0) {","\t\tprints(\"Imagefile = \");","\t\tprints(Image_path);","\t\tnl();","\t}","\tnl();","\tbye(0);","}","","static cell\tNew;","","#define setargv(a) \\","\tdo { \\","\t\tNew = argv_to_list(\u0026argv[a]); \\","\t\tvar_value(S_argv) = New; \\","\t} while (0)","","#ifndef wasm","static int readopts(int argc, char **argv, int *p_loop, int *p_endargs) {","\tint\ti, j, echo, loop = 1, endargs = 0;","","\tfor (i=1; i\u003cargc; i++) {","\t\tif (argv[i][0] != '-')","\t\t\tbreak;","\t\tfor (j=1; argv[i][j]; j++) {","\t\t\tswitch (argv[i][j]) {","\t\t\tcase '?':","\t\t\tcase 'v':","\t\t\tcase 'h':\tlongusage();","\t\t\t\t\tbreak;","\t\t\tcase 'd':\tDebug = 1;","\t\t\t\t\tbreak;","\t\t\tcase 'r':","\t\t\tcase 'e':\techo = argv[i][j] == 'e';","\t\t\t\t\tif (++i \u003e= argc)","\t\t\t\t\t\tusage(1);","\t\t\t\t\tQuiet = 1;","\t\t\t\t\tsetargv(i+1);","\t\t\t\t\teval_arg(argv[i], echo);","\t\t\t\t\tj = strlen(argv[i])-1;","\t\t\t\t\tloop = 0;","\t\t\t\t\tbreak;","\t\t\tcase 'l':\tif (++i \u003e= argc)","\t\t\t\t\t\tusage(1);","\t\t\t\t\tload(make_string(argv[i],","\t\t\t\t\t\t\tstrlen(argv[i])),","\t\t\t\t\t\t0, 0);","\t\t\t\t\tj = strlen(argv[i])-1;","\t\t\t\t\tbreak;","\t\t\tcase 'n':\tfprintf(stderr, \"kg: -n must be\"","\t\t\t\t\t\t\t\" first option\\n\");","\t\t\t\t\tbye(1);","\t\t\tcase 'o':\tif (++i \u003e= argc)","\t\t\t\t\t\tusage(1);","\t\t\t\t\tmake_image_file(argv[i]);","\t\t\t\t\tbye(0);","\t\t\t\t\tbreak;","\t\t\tcase 'q':\tQuiet = 1;","\t\t\t\t\tbreak;","\t\t\tcase 's':\tScript = 1;","\t\t\t\t\tbreak;","\t\t\tcase 't':\tif (++i \u003e= argc)","\t\t\t\t\t\tusage(1);","\t\t\t\t\ttranscript(argv[i]);","\t\t\t\t\tj = strlen(argv[i])-1;","\t\t\t\t\tbreak;","\t\t\tcase 'u':\tset_node_limit(0);","\t\t\t\t\tset_vector_limit(0);","\t\t\t\t\tbreak;","\t\t\tcase '-':\tendargs = 1;","\t\t\t\t\tbreak;","\t\t\tdefault:\tusage(1);","\t\t\t\t\tbreak;","\t\t\t}","\t\t}","\t\tif (endargs) {","\t\t\ti++;","\t\t\tbreak;","\t\t}","\t}","\tif (p_endargs != NULL \u0026\u0026 p_loop != NULL) {","\t\t*p_endargs = endargs;","\t\t*p_loop = loop;","\t}","\treturn i;","}","","static void klongopts(void) {","\t#define MAX 100","\tchar\t*a[MAX], *k, *kp;","\tint\ti;","","\tif ((k = getenv(\"KLONGOPTS\")) == NULL)","\t\treturn;","\tk = strdup(k);","\tkp = strtok(k, \" \");","\ta[0] = \"\";","\ti = 1;","\twhile (kp != NULL) {","\t\tif (i \u003e= MAX-1)","\t\t\tfatal(\"too many KLONGOPTS arguments\");","\t\ta[i++] = kp;","\t\tkp = strtok(NULL, \" \");","\t}","\ta[i] = NULL;","\treadopts(i, a, NULL, NULL);","\tfree(k);","}","#endif","","#ifdef wasm","void kginit(x){"," \tinit();","\tif(x) load_image_file();","\tprints(\"        Klong \");","\tprints(VERSION);","\tnl();","}","#else","int main(int argc, char **argv) {","\tint\ti, loop, endargs;","","\tinit();","\tif (!(argc \u003e 1 \u0026\u0026 '-' == argv[1][0] \u0026\u0026 'n' == argv[1][1])) {","\t\tklongopts();","\t\tload_image_file();","\t\ti = readopts(argc, argv, \u0026loop, \u0026endargs);","\t}","\telse {","\t\ti = readopts(argc-1, argv+1, \u0026loop, \u0026endargs) + 1;","\t}","\tif (endargs == 0 \u0026\u0026 i \u003c argc) {","\t\tQuiet = 1;","\t\tsetargv(i+1);","\t\tload(make_string(argv[i], strlen(argv[i])), 0, Script);","\t\tbye(0);","\t}","\tif (!Quiet) {","\t\thandle_sigint();","\t\thandle_sigquit();","\t\tprints(\"        Klong \");","\t\tprints(VERSION);","\t\tnl();","\t}","\tif (loop) {","\t\tsetargv(i);","\t\tinterpret();","\t}","\tif (!Quiet) prints(\"bye!\\n\");","\tbye(0);","\treturn 0;","}","#endif",""],"s9core.c":["/*"," * S9core Toolkit, Mk IVd"," * By Nils M Holm, 2007-2019"," * In the public domain"," *"," * Under jurisdictions without a public domain, the CC0 applies."," * See the file CC0 for a copy of the license."," */","","#include \"s9core.h\"","#define S9_S9CORE","#include \"s9import.h\"","#include \"s9ext.h\"","","","/*"," * Global state"," */","","static int\tCons_segment_size,","\t\tVec_segment_size;","static int\tCons_pool_size,","\t\tVec_pool_size;","","static int\tVerbose_GC = 0;","","s9_cell\t\t*Car,","\t\t*Cdr;","char\t\t*Tag;","","s9_cell\t\t*Vectors;","s9_cell\t\tNullvec;","s9_cell\t\tNullstr;","s9_cell\t\tBlank;","","cell\t\tStack;","","static cell\tProtect;","static int\tProtp;","","static cell\tFree_list;","static cell\tFree_vecs;","","S9_PRIM\t\t*Primitives;","static int\tLast_prim,","\t\tMax_prims;","","static cell\tTmp_car,","\t\tTmp_cdr,","\t\tTmp;","","static cell\tSymbols;","static cell\tSymhash;","","static int\tPrinter_count,","\t\tPrinter_limit;","","static int\tIO_error;","","FILE\t\t*Ports[S9_MAX_PORTS];","static char\tPort_flags[S9_MAX_PORTS];","","int\t\tInput_port,","\t\tOutput_port,","\t\tError_port;","","volatile int\tAbort_flag;","","static char\t*Str_outport;","static int\tStr_outport_len;","static char\t*Str_inport;","static char\tRejected[2];","","static long     Node_limit,","\t\tVector_limit;","","static char\t*Exponent_chars;","static cell\t**Image_vars;","","static void\t(*Mem_error_handler)(int src);","","/* Predefined bignum literals */","cell\tZero,","\tOne,","\tTwo,","\tTen;","","/* Smallest value by which two real numbers can differ:"," * 10 ^ -(S9_MANTISSA_SIZE+1)"," */","cell\tEpsilon;","","/* Internal GC roots */","static cell\t*GC_int_roots[] = {","\t\t\t\u0026Stack, \u0026Symbols, \u0026Symhash, \u0026Tmp, \u0026Tmp_car,","\t\t\t\u0026Tmp_cdr, \u0026Zero, \u0026One, \u0026Two, \u0026Ten, \u0026Epsilon,","\t\t\t\u0026Nullvec, \u0026Nullstr, \u0026Blank, \u0026Protect, NULL };","","/* External GC roots */","static cell\t**GC_ext_roots = NULL;","","/* GC stack */","cell\t*S9_gc_stack;","int\t*S9_gc_stkptr;","","/*"," * Internal vector representation"," */","","#define RAW_VECTOR_LINK         0","#define RAW_VECTOR_INDEX        1","#define RAW_VECTOR_SIZE         2","#define RAW_VECTOR_DATA         3","","/*"," * Internal node protection"," */","","#ifdef S9_BITS_PER_WORD_64"," #define PROT_STACK_LEN\t400","#else"," #define PROT_STACK_LEN\t200","#endif","","static void prot(cell x) {","\tif (Protp \u003e= PROT_STACK_LEN-1)","\t\ts9_fatal(\"internal prot() stack overflow\");","\tvector(Protect)[++Protp] = x;","}","","static cell unprot(int n) {","\tcell\tx;","","\tif (Protp - n \u003c -1)","\t\ts9_fatal(\"internal prot() stack underflow\");","\tx = vector(Protect)[Protp-n+1];","\twhile (n) {","\t\tvector(Protect)[Protp--] = UNDEFINED;","\t\tn--;","\t}","\treturn x;","}","","#define pref(n)\t(vector(Protect)[Protp-(n)])","","/*"," * Counting"," */","","static int\tRun_stats, Cons_stats;","","static s9_counter\tConses,","\t\t\tNodes,","\t\t\tVecspace,","\t\t\tCollections;","","void s9_run_stats(int x) {","\tRun_stats = x;","\tif (Run_stats) {","\t\ts9_reset_counter(\u0026Nodes);","\t\ts9_reset_counter(\u0026Conses);","\t\ts9_reset_counter(\u0026Vecspace);","\t\ts9_reset_counter(\u0026Collections);","\t}","}","","void s9_cons_stats(int x) {","\tCons_stats = x;","}","","void s9_reset_counter(s9_counter *c) {","\tc-\u003en = 0;","\tc-\u003en1k = 0;","\tc-\u003en1m = 0;","\tc-\u003en1g = 0;","\tc-\u003en1t = 0;","}","","void s9_count(s9_counter *c) {","\tc-\u003en++;","\tif (c-\u003en \u003e= 1000) {","\t\tc-\u003en -= 1000;","\t\tc-\u003en1k++;","\t\tif (c-\u003en1k \u003e= 1000) {","\t\t\tc-\u003en1k -= 1000;","\t\t\tc-\u003en1m++;","\t\t\tif (c-\u003en1m \u003e= 1000) {","\t\t\t\tc-\u003en1m -= 1000;","\t\t\t\tc-\u003en1g++;","\t\t\t\tif (c-\u003en1g \u003e= 1000) {","\t\t\t\t\tc-\u003en1g -= 1000;","\t\t\t\t\tc-\u003en1t++;","\t\t\t\t}","\t\t\t}","\t\t}","\t}","}","","void s9_countn(s9_counter *c, int n) {","\tc-\u003en += n;","\tif (c-\u003en \u003e= 1000) {","\t\tc-\u003en1k += c-\u003en / 1000;","\t\tc-\u003en = c-\u003en % 1000;","\t\tif (c-\u003en1k \u003e= 1000) {","\t\t\tc-\u003en1m += c-\u003en1k / 1000;","\t\t\tc-\u003en1k = c-\u003en1k % 1000;","\t\t\tif (c-\u003en1m \u003e= 1000) {","\t\t\t\tc-\u003en1g += c-\u003en1m / 1000;","\t\t\t\tc-\u003en1m = c-\u003en1m % 1000;","\t\t\t\tif (c-\u003en1g \u003e= 1000) {","\t\t\t\t\tc-\u003en1t += c-\u003en1g / 1000;","\t\t\t\t\tc-\u003en1g = c-\u003en1g % 1000;","\t\t\t\t}","\t\t\t}","\t\t}","\t}","}","","cell s9_read_counter(s9_counter *c) {","\tcell\tn, m;","","\tn = s9_make_integer(c-\u003en);","\tn = cons(n, NIL);","\tprot(n);","\tm = s9_make_integer(c-\u003en1k);","\tn = cons(m, n);","\tpref(0) = n;","\tm = s9_make_integer(c-\u003en1m);","\tn = cons(m, n);","\tpref(0) = n;","\tm = s9_make_integer(c-\u003en1g);","\tn = cons(m, n);","\tpref(0) = n;","\tm = s9_make_integer(c-\u003en1t);","\tn = cons(m, n);","\tunprot(1);","\treturn n;","}","","void s9_get_counters(s9_counter **nc, s9_counter **cc, s9_counter **vc,","\t\t\ts9_counter **gc) {","\t*nc = \u0026Nodes;","\t*cc = \u0026Conses;","\t*vc = \u0026Vecspace;","\t*gc = \u0026Collections;","}","","/*"," * Raw I/O"," */","","int s9_inport_open_p(void) {","#ifdef wasm","\tif(Input_port == 0)","\t\treturn 1;","#endif","\treturn Ports[Input_port] != NULL;","}","","int s9_outport_open_p(void) {","\treturn Ports[Output_port] != NULL;","}","","int s9_readc(void) {","\tint\tc, i;","","\tif (Str_inport != NULL) {","\t\tfor (i=1; i\u003e=0; i--) {","\t\t\tif (Rejected[i] \u003e -1) {","\t\t\t\tc = Rejected[i];","\t\t\t\tRejected[i] = -1;","\t\t\t\treturn c;","\t\t\t}","\t\t}","\t\tif (0 == *Str_inport) {","\t\t\treturn EOF;","\t\t}","\t\telse {","\t\t\treturn *Str_inport++;","\t\t}","\t}","\telse {","\t\tif (!s9_inport_open_p())","\t\t\ts9_fatal(\"s9_readc(): input port is not open\");","\t\treturn getc(Ports[Input_port]);","\t}","}","","void s9_rejectc(int c) {","\tif (Str_inport != NULL) {","\t\tif (Rejected[0] == -1)","\t\t\tRejected[0] = c;","\t\telse","\t\t\tRejected[1] = c;","\t}","\telse {","\t\tungetc(c, Ports[Input_port]);","\t}","}","","void s9_writec(int c) {","\tif (!s9_outport_open_p())","\t\ts9_fatal(\"s9_writec(): output port is not open\");","\t(void) putc(c, Ports[Output_port]);","}","","char *s9_open_input_string(char *s) {","\tchar\t*os;","","\tos = Str_inport;","\tStr_inport = s;","\tRejected[0] = Rejected[1] = -1;","\treturn os;","}","","void s9_close_input_string(void) {","\tStr_inport = NULL;","}","","void s9_flush(void) {","\tif (fflush(Ports[Output_port]))","\t\tIO_error = 1;","}","","void s9_set_printer_limit(int k) {","\tPrinter_limit = k;","\tPrinter_count = 0;","}","","int s9_printer_limit(void) {","\treturn Printer_limit \u0026\u0026 Printer_count \u003e= Printer_limit;","}","","void s9_blockwrite(char *s, int k) {","\tif (Str_outport) {","\t\tif (k \u003e= Str_outport_len) {","\t\t\tk = Str_outport_len;","\t\t\tIO_error = 1;","\t\t}","\t\tmemcpy(Str_outport, s, k);","\t\tStr_outport += k;","\t\tStr_outport_len -= k;","\t\t*Str_outport = 0;","\t\treturn;","\t}","\tif (!s9_outport_open_p())","\t\ts9_fatal(\"s9_blockwrite(): output port is not open\");","\tif (Printer_limit \u0026\u0026 Printer_count \u003e Printer_limit) {","\t\tif (Printer_limit \u003e 0)","\t\t\tfwrite(\"...\", 1, 3, Ports[Output_port]);","\t\tPrinter_limit = -1;","\t\treturn;","\t}","\tif (fwrite(s, 1, k, Ports[Output_port]) != k)","\t\tIO_error = 1;","\tif (Output_port == 1 \u0026\u0026 s[k-1] == '\\n')","\t\ts9_flush();","\tPrinter_count += k;","}","","int s9_blockread(char *s, int k) {","\tint\tn;","","\tif (!s9_inport_open_p())","\t\ts9_fatal(\"s9_blockread(): input port is not open\");","\tn = fread(s, 1, k, Ports[Input_port]);","\tif (n \u003c 0) IO_error = 1;","\treturn n;","}","","void s9_prints(char *s) {","\ts9_blockwrite(s, strlen(s));","}","","int s9_io_status(void) {","\treturn IO_error? -1: 0;","}","","void s9_io_reset(void) {","\tIO_error = 0;","}","","/*"," * Error Handling"," */","","void s9_fatal(char *msg) {","\tconst char *s = \"S9core: fatal error: \";","\tfwrite(s, 1, strlen(s), stderr);","\tfwrite(msg, 1, strlen(msg), stderr);","\tputc('\\n', stderr);","\tbye(1);","}","","void s9_abort(void) {","\tAbort_flag = 1;","}","","void s9_reset(void) {","\tAbort_flag = 0;","}","","int s9_aborted(void) {","\treturn Abort_flag;","}","","/*"," * Memory Management"," */","","void s9_set_node_limit(int n) {","\tNode_limit = n * 1024L;","}","","void s9_set_vector_limit(int n) {","\tVector_limit = n * 1024L;","}","","void s9_gc_verbosity(int n) {","\tVerbose_GC = n;","}","","void s9_mem_error_handler(void (*h)(int src)) {","\tMem_error_handler = h;","}","","static void new_cons_segment(void) {","\tCar = realloc(Car, sizeof(cell)*(Cons_pool_size+Cons_segment_size));","\tCdr = realloc(Cdr, sizeof(cell)*(Cons_pool_size+Cons_segment_size));","\tTag = realloc(Tag, Cons_pool_size + Cons_segment_size);","\tif (Car == NULL || Cdr == NULL || Tag == NULL)","\t\ts9_fatal(\"new_cons_segment: out of physical memory\");","\tmemset(\u0026car(Cons_pool_size), 0, Cons_segment_size * sizeof(cell));","\tmemset(\u0026cdr(Cons_pool_size), 0, Cons_segment_size * sizeof(cell));","\tmemset(\u0026Tag[Cons_pool_size], 0, Cons_segment_size);","\tCons_pool_size += Cons_segment_size;","\tCons_segment_size = Cons_pool_size / 2;","}","","static void new_vec_segment(void) {","\tVectors = realloc(Vectors, sizeof(cell) *","\t\t\t(Vec_pool_size + Vec_segment_size));","\tif (Vectors == NULL)","\t\ts9_fatal(\"new_vec_segment: out of physical memory\");","\tmemset(\u0026Vectors[Vec_pool_size], 0, Vec_segment_size * sizeof(cell));","\tVec_pool_size += Vec_segment_size;","\tVec_segment_size = Vec_pool_size / 2;","}","","/*"," * Mark nodes which can be accessed through N."," * Using the Deutsch/Schorr/Waite pointer reversal algorithm."," * S0: M==0, S==0, unvisited, process CAR (vectors: process 1st slot);"," * S1: M==1, S==1, CAR visited, process CDR (vectors: process next slot);"," * S2: M==1, S==0, completely visited, return to parent."," */","","static void mark(cell n) {","\tcell\tp, parent, *v;","\tint\ti;","","\tparent = NIL;","\twhile (1) {","\t\tif (s9_special_p(n) || (Tag[n] \u0026 S9_MARK_TAG)) {","\t\t\tif (parent == NIL)","\t\t\t\tbreak;","\t\t\tif (Tag[parent] \u0026 S9_VECTOR_TAG) { /* S1 --\u003e S1|done */","\t\t\t\ti = vector_index(parent);","\t\t\t\tv = vector(parent);","\t\t\t\tif (Tag[parent] \u0026 S9_STATE_TAG \u0026\u0026","\t\t\t\t    i+1 \u003c vector_len(parent)","\t\t\t\t) {\t\t\t/* S1 --\u003e S1 */","\t\t\t\t\tp = v[i+1];","\t\t\t\t\tv[i+1] = v[i];","\t\t\t\t\tv[i] = n;","\t\t\t\t\tn = p;","\t\t\t\t\tvector_index(parent) = i+1;","\t\t\t\t}","\t\t\t\telse {\t\t\t/* S1 --\u003e done */","\t\t\t\t\tTag[parent] \u0026= ~S9_STATE_TAG;","\t\t\t\t\tp = parent;","\t\t\t\t\tparent = v[i];","\t\t\t\t\tv[i] = n;","\t\t\t\t\tn = p;","\t\t\t\t}","\t\t\t}","\t\t\telse if (Tag[parent] \u0026 S9_STATE_TAG) {\t/* S1 --\u003e S2 */","\t\t\t\tp = cdr(parent);","\t\t\t\tcdr(parent) = car(parent);","\t\t\t\tcar(parent) = n;","\t\t\t\tTag[parent] \u0026= ~S9_STATE_TAG;","\t\t\t\t/* Tag[parent] |=  S9_MARK_TAG; */","\t\t\t\tn = p;","\t\t\t}","\t\t\telse {\t\t\t\t/* S2 --\u003e done */","\t\t\t\tp = parent;","\t\t\t\tparent = cdr(p);","\t\t\t\tcdr(p) = n;","\t\t\t\tn = p;","\t\t\t}","\t\t}","\t\telse if (Tag[n] \u0026 S9_VECTOR_TAG) {\t/* S0 --\u003e S1|S2 */","\t\t\tTag[n] |= S9_MARK_TAG;","\t\t\t/* Tag[n] \u0026= ~S9_STATE_TAG; */","\t\t\tvector_link(n) = n;","\t\t\tif (car(n) == T_VECTOR \u0026\u0026 vector_len(n) != 0) {","\t\t\t\tTag[n] |= S9_STATE_TAG;","\t\t\t\tvector_index(n) = 0;","\t\t\t\tv = vector(n);","\t\t\t\tp = v[0];","\t\t\t\tv[0] = parent;","\t\t\t\tparent = n;","\t\t\t\tn = p;","\t\t\t}","\t\t}","\t\telse if (Tag[n] \u0026 S9_ATOM_TAG) {\t/* S0 --\u003e S2 */","\t\t\tif (input_port_p(n) || output_port_p(n))","\t\t\t\tPort_flags[port_no(n)] |= S9_USED_TAG;","\t\t\tp = cdr(n);","\t\t\tcdr(n) = parent;","\t\t\t/*Tag[n] \u0026= ~S9_STATE_TAG;*/","\t\t\tparent = n;","\t\t\tn = p;","\t\t\tTag[parent] |= S9_MARK_TAG;","\t\t}","\t\telse {\t\t\t\t\t/* S0 --\u003e S1 */","\t\t\tp = car(n);","\t\t\tcar(n) = parent;","\t\t\tTag[n] |= S9_MARK_TAG;","\t\t\tparent = n;","\t\t\tn = p;","\t\t\tTag[parent] |= S9_STATE_TAG;","\t\t}","\t}","}","","/* Mark and sweep GC. */","int s9_gc(void) {","\tint\ti, k, sk = 0;","\tchar\tbuf[100];","","\tif (Run_stats)","\t\ts9_count(\u0026Collections);","\tfor (i=0; i\u003cS9_MAX_PORTS; i++) {","\t\tif (Port_flags[i] \u0026 S9_LOCK_TAG)","\t\t\tPort_flags[i] |= S9_USED_TAG;","\t\telse if (i == Input_port || i == Output_port)","\t\t\tPort_flags[i] |= S9_USED_TAG;","\t\telse","\t\t\tPort_flags[i] \u0026= ~S9_USED_TAG;","\t}","\tif (GC_stack \u0026\u0026 *GC_stack != NIL) {","\t\tsk = string_len(*GC_stack);","\t\tstring_len(*GC_stack) = (1 + *GC_stkptr) * sizeof(cell);","\t}","\tfor (i=0; GC_int_roots[i] != NULL; i++) {","\t\tmark(*GC_int_roots[i]);","\t}","\tif (GC_ext_roots) {","\t\tfor (i=0; GC_ext_roots[i] != NULL; i++)","\t\t\tmark(*GC_ext_roots[i]);","\t}","\tif (GC_stack \u0026\u0026 *GC_stack != NIL) {","\t\tstring_len(*GC_stack) = sk;","\t}","\tk = 0;","\tFree_list = NIL;","\tfor (i=0; i\u003cCons_pool_size; i++) {","\t\tif (!(Tag[i] \u0026 S9_MARK_TAG)) {","\t\t\tcdr(i) = Free_list;","\t\t\tFree_list = i;","\t\t\tk++;","\t\t}","\t\telse {","\t\t\tTag[i] \u0026= ~S9_MARK_TAG;","\t\t}","\t}","\tfor (i=0; i\u003cS9_MAX_PORTS; i++) {","\t\tif (!(Port_flags[i] \u0026 S9_USED_TAG) \u0026\u0026 Ports[i] != NULL) {","\t\t\tfclose(Ports[i]);","\t\t\tPorts[i] = NULL;","\t\t}","\t}","#ifndef wasm","\tif (Verbose_GC \u003e 1) {","\t\tsprintf(buf, \"GC: %d nodes reclaimed\", k);","\t\ts9_prints(buf); nl();","\t\ts9_flush();","\t}","#endif","\treturn k;","}","","/* Allocate a fresh node and initialize with PCAR,PCDR,PTAG. */","cell s9_cons3(cell pcar, cell pcdr, int ptag) {","\tcell\tn;","\tint\tk;","\tchar\tbuf[100];","","\tif (Run_stats) {","\t\ts9_count(\u0026Nodes);","\t\tif (\tCons_stats \u0026\u0026","\t\t\t0 == (ptag \u0026 (S9_ATOM_TAG|S9_VECTOR_TAG|S9_PORT_TAG))","\t\t)","\t\t\ts9_count(\u0026Conses);","\t}","\tif (Free_list == NIL) {","\t\tif (ptag == 0)","\t\t\tTmp_car = pcar;","\t\tif (!(ptag \u0026 S9_VECTOR_TAG))","\t\t\tTmp_cdr = pcdr;","\t\tk = s9_gc();","\t\t/*","\t\t * Performance increases dramatically if we","\t\t * do not wait for the pool to run dry.","\t\t * In fact, don't even let it come close to that.","\t\t */","\t\tif (k \u003c Cons_pool_size / 2) {","\t\t\tif (\tNode_limit \u0026\u0026","\t\t\t\tCons_pool_size + Cons_segment_size","\t\t\t\t\t\u003e Node_limit","\t\t\t) {","\t\t\t\tif (Mem_error_handler)","\t\t\t\t\t(*Mem_error_handler)(1);","\t\t\t\telse","\t\t\t\t\ts9_fatal(\"s9_cons3: hit memory limit\");","\t\t\t}","\t\t\telse {","\t\t\t\tnew_cons_segment();","#ifndef wasm","\t\t\t\tif (Verbose_GC) {","\t\t\t\t\tsprintf(buf,","\t\t\t\t\t\t\"GC: new segment,\"","\t\t\t\t\t\t \" nodes = %d,\"","\t\t\t\t\t\t \" next segment = %d\",","\t\t\t\t\t\tCons_pool_size,","\t\t\t\t\t\tCons_segment_size);","\t\t\t\t\ts9_prints(buf); nl();","\t\t\t\t\ts9_flush();","\t\t\t\t}","#endif\t\t\t\t","\t\t\t\ts9_gc();","\t\t\t}","\t\t}","\t\tTmp_car = Tmp_cdr = NIL;","\t}","\tif (Free_list == NIL)","\t\ts9_fatal(","\t\t  \"s9_cons3: failed to recover from low memory condition\");","\tn = Free_list;","\tFree_list = cdr(Free_list);","\tcar(n) = pcar;","\tcdr(n) = pcdr;","\tTag[n] = ptag;","\treturn n;","}","","/* Mark all vectors unused */","static void unmark_vectors(void) {","\tint\tp, k, link;","","\tp = 0;","\twhile (p \u003c Free_vecs) {","\t\tlink = p;","\t\tk = Vectors[p + RAW_VECTOR_SIZE];","\t\tp += vector_size(k);","\t\tVectors[link] = NIL;","\t}","}","","/* In situ vector pool garbage collection and compaction */","int s9_gcv(void) {","\tint\tv, k, to, from;","\tchar\tbuf[100];","","\tunmark_vectors();","\ts9_gc();\t\t/* re-mark live vectors */","\tto = from = 0;","\twhile (from \u003c Free_vecs) {","\t\tv = Vectors[from + RAW_VECTOR_SIZE];","\t\tk = vector_size(v);","\t\tif (Vectors[from + RAW_VECTOR_LINK] != NIL) {","\t\t\tif (to != from) {","\t\t\t\tmemmove(\u0026Vectors[to], \u0026Vectors[from],","\t\t\t\t\tk * sizeof(cell));","\t\t\t\tcdr(Vectors[to + RAW_VECTOR_LINK]) =","\t\t\t\t\tto + RAW_VECTOR_DATA;","\t\t\t}","\t\t\tto += k;","\t\t}","\t\tfrom += k;","\t}","\tk = Free_vecs - to;","#ifndef wasm","\tif (Verbose_GC \u003e 1) {","\t\tsprintf(buf, \"GC: gcv: %d cells reclaimed\", k);","\t\ts9_prints(buf); nl();","\t\ts9_flush();","\t}","#endif","\tFree_vecs = to;","\treturn k;","}","","/* Allocate vector from pool */","cell s9_new_vec(cell type, int size) {","\tcell\tn;","\tint\ti, v, wsize;","\tchar\tbuf[100];","","\twsize = vector_size(size);","\tif (Run_stats) {","\t\ts9_countn(\u0026Vecspace, wsize);","\t}","\tif (Free_vecs + wsize \u003e= Vec_pool_size) {","\t\ts9_gcv();","\t\twhile (\tFree_vecs + wsize \u003e=","\t\t\tVec_pool_size - Vec_pool_size / 2","\t\t) {","\t\t\tif (\tVector_limit \u0026\u0026","\t\t\t\tVec_pool_size + Vec_segment_size","\t\t\t\t\t\u003e Vector_limit","\t\t\t) {","\t\t\t\tif (Mem_error_handler)","\t\t\t\t\t(*Mem_error_handler)(2);","\t\t\t\telse","\t\t\t\t\ts9_fatal(\"new_vec: hit memory limit\");","\t\t\t\tbreak;","\t\t\t}","\t\t\telse {","\t\t\t\tnew_vec_segment();","\t\t\t\ts9_gcv();","#ifndef wasm\t\t\t\t","\t\t\t\tif (Verbose_GC) {","\t\t\t\t\tsprintf(buf,","\t\t\t\t\t\t\"GC: new_vec: new segment,\"","\t\t\t\t\t\t \" cells = %d\",","\t\t\t\t\t\tVec_pool_size);","\t\t\t\t\ts9_prints(buf); nl();","\t\t\t\t\ts9_flush();","\t\t\t\t}","#endif","\t\t\t}","\t\t}","\t}","\tif (Free_vecs + wsize \u003e= Vec_pool_size)","\t\ts9_fatal(","\t\t  \"new_vec: failed to recover from low memory condition\");","\tv = Free_vecs;","\tFree_vecs += wsize;","\tn = s9_cons3(type, v + RAW_VECTOR_DATA, S9_VECTOR_TAG);","\tVectors[v + RAW_VECTOR_LINK] = n;","\tVectors[v + RAW_VECTOR_INDEX] = 0;","\tVectors[v + RAW_VECTOR_SIZE] = size;","\tif (type == T_VECTOR) {","\t\tfor (i = RAW_VECTOR_DATA; i\u003cwsize; i++)","\t\t\tVectors[v+i] = UNDEFINED;","\t}","\treturn n;","}","","/* Pop K nodes off the Stack, return last one. */","cell s9_unsave(int k) {","\tcell\tn = NIL; /*LINT*/","","\twhile (k) {","\t\tif (Stack == NIL)","\t\t\ts9_fatal(\"s9_unsave: stack underflow\");","\t\tn = car(Stack);","\t\tStack = cdr(Stack);","\t\tk--;","\t}","\treturn n;","}","","static unsigned hash(char *s) {","\tunsigned int\th = 0;","","\twhile (*s) h = ((h\u003c\u003c5)+h) ^ *s++;","\treturn h;","}","","static int hash_size(int n) {","\tif (n \u003c 47) return 47;","\tif (n \u003c 97) return 97;","\tif (n \u003c 199) return 199;","\tif (n \u003c 499) return 499;","\tif (n \u003c 997) return 997;","\tif (n \u003c 9973) return 9973;","\tif (n \u003c 19997) return 19997;","\treturn 39989;","}","","#define intval(x) cadr(x)","","static void rehash_symbols(void) {","\tunsigned int\ti;","\tcell\t\t*v, n, p, new;","\tunsigned int\th, k;","","\tif (NIL == Symhash)","\t\tk = hash_size(s9_length(Symbols));","\telse","\t\tk = hash_size(intval(vector(Symhash)[0]));","\tSymhash = s9_new_vec(T_VECTOR, (k+1) * sizeof(cell));","\tv = vector(Symhash);","\tfor (i=1; i\u003c=k; i++) v[i] = NIL;","\ti = 0;","\tfor (p = Symbols; p != NIL; p = cdr(p)) {","\t\th = hash(symbol_name(car(p)));","\t\tn = cons(car(p), NIL);","\t\tn = cons(n, vector(Symhash)[h%k+1]);","\t\tvector(Symhash)[h%k+1] = n;","\t\ti++;","\t}","\tnew = s9_make_integer(i);","\tvector(Symhash)[0] = new;","}","","void add_symhash(cell x) {","\tcell\t\tn, new;","\tunsigned int\th, i, k;","","\tif (NIL == Symhash) {","\t\trehash_symbols();","\t\treturn;","\t}","\ti = intval(vector(Symhash)[0]);","\tk = vector_len(Symhash)-1;","\tif (i \u003e k) {","\t\trehash_symbols();","\t\treturn;","\t}","\th = hash(symbol_name(x));","\tn = cons(x, NIL);","\tn = cons(n, vector(Symhash)[h%k+1]);","\tvector(Symhash)[h%k+1] = n;","\tnew = s9_make_integer(i+1);","\tvector(Symhash)[0] = new;","}","","cell s9_find_symbol(char *s) {","\tunsigned int\th, k;","\tcell\t\tn;","","\tif (NIL == Symhash) return NIL;","\tk = vector_len(Symhash)-1;","\th = hash(s);","\tfor (n = vector(Symhash)[h%k+1]; n != NIL; n = cdr(n))","\t\tif (!strcmp(s, symbol_name(caar(n))))","\t\t\treturn caar(n);","\treturn NIL;","}","","/*","cell s9_find_symbol(char *s) {","\tcell\ty;","","\ty = Symbols;","\twhile (y != NIL) {","\t\tif (!strcmp(symbol_name(car(y)), s))","\t\t\treturn car(y);","\t\ty = cdr(y);","\t}","\treturn NIL;","}","*/","","cell s9_make_symbol(char *s, int k) {","\tcell\tn;","","\tn = s9_new_vec(T_SYMBOL, k+1);","\tstrcpy(symbol_name(n), s);","\treturn n;","}","","cell s9_intern_symbol(cell y) {","\tSymbols = cons(y, Symbols);","\tadd_symhash(y);","\treturn y;","}","","cell s9_symbol_table(void) {","\treturn Symbols;","}","","cell s9_symbol_ref(char *s) {","\tcell\ty, new;","","\ty = s9_find_symbol(s);","\tif (y != NIL)","\t\treturn y;","\tnew = s9_make_symbol(s, strlen(s));","\treturn s9_intern_symbol(new);","}","","cell s9_make_string(char *s, int k) {","\tcell\tn;","","\tif (0 == k) return Nullstr;","\tn = s9_new_vec(T_STRING, k+1);","\tstrncpy(string(n), s, k+1);","\treturn n;","}","","cell s9_make_vector(int k) {","\tif (0 == k) return Nullvec;","\treturn s9_new_vec(T_VECTOR, k * sizeof(cell));","}","","cell s9_mkfix(int v) {","\tcell\tn;","","\tn = new_atom(v, NIL);","\treturn new_atom(T_FIXNUM, n);","}","","cell s9_make_integer(cell i) {","\tcell\tn;","","\tswitch (i) {","\tcase 0:\t\treturn Zero;","\tcase 1:\t\treturn One;","\tcase 2:\t\treturn Two;","\tcase 10:\treturn Ten;","\tdefault:","\t\tn = new_atom(i, NIL);","\t\treturn new_atom(T_INTEGER, n);","\t}","}","","static cell make_init_integer(cell i) {","\tcell\tn;","","\tn = new_atom(i, NIL);","\treturn new_atom(T_INTEGER, n);","}","","cell s9_make_char(int x) {","\tcell n;","","\tif (' ' == x) return Blank;","\tn = new_atom(x \u0026 0xff, NIL);","\treturn new_atom(T_CHAR, n);","}","","static cell real_normalize(cell x);","","static cell S9_make_quick_real(int flags, cell exp, cell mant) {","\tcell\tn;","","\tn = new_atom(exp, mant);","\tn = new_atom(flags, n);","\tn = new_atom(T_REAL, n);","\treturn n;","}","","cell S9_make_real(int flags, cell exp, cell mant) {","\tcell\tr;","","\tprot(mant);","\tr = S9_make_quick_real(flags, exp, mant);","\tr = real_normalize(r);","\tunprot(1);","\treturn r;","}","","cell s9_make_real(int sign, cell exp, cell mant) {","\tcell\tm;","\tint\ti;","","\ti = 0;","\tfor (m = cdr(mant); m != NIL; m = cdr(m))","\t\ti++;","\tif (i \u003e S9_MANTISSA_SIZE)","\t\treturn UNDEFINED;","\treturn S9_make_real(sign \u003c 0? REAL_NEGATIVE: 0, exp, cdr(mant));","}","","static void grow_primitives(void) {","\tMax_prims += S9_PRIM_SEG_SIZE;","\tPrimitives = (S9_PRIM *) realloc(Primitives,","\t\t\t\t\tsizeof(S9_PRIM) * Max_prims);","\tif (Primitives == NULL)","\t\ts9_fatal(\"grow_primitives: out of physical memory\");","}","","cell s9_make_primitive(S9_PRIM *p) {","\tcell\tn;","","\tn = new_atom(Last_prim, NIL);","\tn = new_atom(T_PRIMITIVE, n);","\tif (Last_prim \u003e= Max_prims)","\t\tgrow_primitives();","\tmemcpy(\u0026Primitives[Last_prim], p, sizeof(S9_PRIM));","\tLast_prim++;","\treturn n;","}","","cell s9_make_port(int portno, cell type) {","\tcell\tn;","\tint\tpf;","","\tpf = Port_flags[portno];","\tPort_flags[portno] |= S9_LOCK_TAG;","\tn = new_atom(portno, NIL);","\tn = s9_cons3(type, n, S9_ATOM_TAG|S9_PORT_TAG);","\tPort_flags[portno] = pf;","\treturn n;","}","","cell s9_string_to_symbol(cell x) {","\tcell\ty, n, k;","","\ty = s9_find_symbol(string(x));","\tif (y != NIL)","\t\treturn y;","\t/*","\t * Cannot pass content to s9_make_symbol(), because","\t * string(x) may move during GC.","\t */","\tk = string_len(x);","\tn = s9_make_symbol(\"\", k-1);","\tmemcpy(symbol_name(n), string(x), k);","\treturn s9_intern_symbol(n);","}","","cell s9_symbol_to_string(cell x) {","\tcell\tn, k;","","\t/*","\t * Cannot pass name to s9_make_string(), because","\t * symbol_name(x) may move during GC.","\t */"," \tk = symbol_len(x);","\tn = s9_make_string(\"\", k-1);","\tmemcpy(string(n), symbol_name(x), k);","\treturn n;","}","","cell s9_copy_string(cell x) {","\tcell\tn, k;","","\t/*","\t * See s9_string_to_symbol(), above.","\t */"," \tk = string_len(x);","\tn = s9_make_string(\"\", k-1);","\tmemcpy(string(n), string(x), k);","\treturn n;","}","","/*"," * Miscellanea"," */","","int s9_length(cell n) {","\tint\tk;","","\tfor (k = 0; n != NIL; n = cdr(n))","\t\tk++;","\treturn k;","}","","int s9_conses(cell n) {","\tint\tk;","","\tfor (k = 0; pair_p(n); n = cdr(n))","\t\tk++;","\treturn k;","}","","cell s9_flat_copy(cell n, cell *lastp) {","\tcell\ta, m, last, new;","","\tif (n == NIL) {","\t\tif (lastp != NULL)","\t\t\tlastp[0] = NIL;","\t\treturn NIL;","\t}","\tm = s9_cons3(NIL, NIL, Tag[n]);","\tprot(m);","\ta = m;","\tlast = m;","\twhile (n != NIL) {","\t\tcar(a) = car(n);","\t\tlast = a;","\t\tn = cdr(n);","\t\tif (n != NIL) {","\t\t\tnew = s9_cons3(NIL, NIL, Tag[n]);","\t\t\tcdr(a) = new;","\t\t\ta = cdr(a);","\t\t}","\t}","\tunprot(1);","\tif (lastp != NULL)","\t\tlastp[0] = last;","\treturn m;","}","","long s9_asctol(char *s) {","\twhile (*s == '0' \u0026\u0026 s[1])","\t\ts++;","\treturn atol(s);","}","","static char *ntoa(char *b, cell x, int w) {","\tchar\tbuf[40];","\tint\ti = 0, neg = 0;","\tchar\t*p = \u0026buf[sizeof(buf)-1];","","\tif (x \u003c 0) {","\t\tx = -x;","\t\tneg = 1;","\t}","\t*p = 0;","\twhile (x || i == 0) {","\t\ti++;","\t\tif (i \u003e= sizeof(buf)-1)","\t\t\ts9_fatal(\"ntoa: number too big\");","\t\tp--;","\t\t*p = x % 10 + '0';","\t\tx = x / 10;","\t}","\twhile (i \u003c (w-neg) \u0026\u0026 i \u003c sizeof(buf)-1) {","\t\ti++;","\t\tp--;","\t\t*p = '0';","\t}","\tif (neg) {","\t\tif (i \u003e= sizeof(buf)-1)","\t\t\ts9_fatal(\"ntoa: number too big\");","\t\tp--;","\t\t*p = '-';","\t}","\tstrcpy(b, p);","\treturn b;","}","","cell s9_argv_to_list(char **argv) {","\tint\ti;","\tcell\ta, n;","","\tif (argv[0] == NULL) return NIL;","\ta = cons(NIL, NIL);","\tprot(a);","\tfor (i = 0; argv[i] != NULL; i++) {","\t\tn = s9_make_string(argv[i], strlen(argv[i]));","\t\tcar(a) = n;","\t\tif (argv[i+1] != NULL) {","\t\t\tn = cons(NIL, NIL);","\t\t\tcdr(a) = n;","\t\t\ta = cdr(a);","\t\t}","\t}","\treturn unprot(1);","}","","#ifdef plan9","","int system(char *cmd) {","\tWaitmsg\t*w;","\tint\tpid;","\tchar\t*argv[] = { \"/bin/rc\", \"-c\", cmd, NULL };","\t","\tswitch (pid = fork()) {","\tcase -1:","\t\treturn -1;","\tcase 0:","\t\texec(argv[0], argv);","\t\tbye(1);","\tdefault:","\t\twhile ((w = wait()) != NULL) {","\t\t\tif (w-\u003epid == pid) {","\t\t\t\tif (w-\u003emsg[0] == 0) {","\t\t\t\t\tfree(w);","\t\t\t\t\treturn 0;","\t\t\t\t}","\t\t\t\tfree(w);","\t\t\t\treturn 1;","\t\t\t}","\t\t\tfree(w);","\t\t}","\t\treturn 0;","\t}","}","","#endif /* plan9 */","","/*"," * Bignums"," */","","cell s9_bignum_abs(cell a) {","\tcell\tn;","","\tprot(a);","\tn = new_atom(labs(cadr(a)), cddr(a));","\tn = new_atom(T_INTEGER, n);","\tunprot(1);","\treturn n;","}","","cell s9_bignum_negate(cell a) {","\tcell\tn;","","\tprot(a);","\tn = new_atom(-cadr(a), cddr(a));","\tn = new_atom(T_INTEGER, n);","\tunprot(1);","\treturn n;","}","","static cell reverse_segments(cell n) {","\tcell\tm;","","\tm = NIL;","\twhile (n != NIL) {","\t\tm = new_atom(car(n), m);","\t\tn = cdr(n);","\t}","\treturn m;","}","","int s9_bignum_even_p(cell a) {","\twhile (cdr(a) != NIL)","\t\ta = cdr(a);","\treturn car(a) % 2 == 0;","}","","cell s9_bignum_add(cell a, cell b);","cell s9_bignum_subtract(cell a, cell b);","","static cell Bignum_add(cell a, cell b) {","\tcell\tfa, fb, result, r;","\tint\tcarry;","","\tif (bignum_negative_p(a)) {","\t\tif (bignum_negative_p(b)) {","\t\t\t/* -A+-B --\u003e -(|A|+|B|) */","\t\t\ta = s9_bignum_abs(a);","\t\t\tprot(a);","\t\t\ta = s9_bignum_add(a, s9_bignum_abs(b));","\t\t\tunprot(1);","\t\t\treturn s9_bignum_negate(a);","\t\t}","\t\telse {","\t\t\t/* -A+B --\u003e B-|A| */","\t\t\treturn s9_bignum_subtract(b, s9_bignum_abs(a));","\t\t}","\t}","\telse if (bignum_negative_p(b)) {","\t\t/* A+-B --\u003e A-|B| */","\t\treturn s9_bignum_subtract(a, s9_bignum_abs(b));","\t}","\t/* A+B */","\ta = reverse_segments(cdr(a));","\tprot(a);","\tb = reverse_segments(cdr(b));","\tprot(b);","\tcarry = 0;","\tresult = NIL;","\tprot(result);","\twhile (a != NIL || b != NIL || carry) {","\t\tfa = a == NIL? 0: car(a);","\t\tfb = b == NIL? 0: car(b);","\t\tr = fa + fb + carry;","\t\tcarry = 0;","\t\tif (r \u003e= S9_INT_SEG_LIMIT) {","\t\t\tr -= S9_INT_SEG_LIMIT;","\t\t\tcarry = 1;","\t\t}","\t\tresult = new_atom(r, result);","\t\tpref(0) = result;","\t\tif (a != NIL) a = cdr(a);","\t\tif (b != NIL) b = cdr(b);","\t}","\tunprot(3);","\treturn new_atom(T_INTEGER, result);","}","","cell s9_bignum_add(cell a, cell b) {","\tTmp = b;","\tprot(a);","\tprot(b);","\tTmp = NIL;","\ta = Bignum_add(a, b);","\tunprot(2);","\treturn a;","}","","int s9_bignum_less_p(cell a, cell b) {","\tint\tka, kb, neg_a, neg_b;","","\tneg_a = bignum_negative_p(a);","\tneg_b = bignum_negative_p(b);","\tif (neg_a \u0026\u0026 !neg_b) return 1;","\tif (!neg_a \u0026\u0026 neg_b) return 0;","\tka = s9_length(a);","\tkb = s9_length(b);","\tif (ka \u003c kb) return neg_a? 0: 1;","\tif (ka \u003e kb) return neg_a? 1: 0;","\tTmp = b;","\ta = s9_bignum_abs(a);","\tprot(a);","\tb = s9_bignum_abs(b);","\tunprot(1);","\tTmp = NIL;","\ta = cdr(a);","\tb = cdr(b);","\twhile (a != NIL) {","\t\tif (car(a) \u003c car(b)) return neg_a? 0: 1;","\t\tif (car(a) \u003e car(b)) return neg_a? 1: 0;","\t\ta = cdr(a);","\t\tb = cdr(b);","\t}","\treturn 0;","}","","int s9_bignum_equal_p(cell a, cell b) {","\ta = cdr(a);","\tb = cdr(b);","\twhile (a != NIL \u0026\u0026 b != NIL) {","\t\tif (car(a) != car(b))","\t\t\treturn 0;","\t\ta = cdr(a);","\t\tb = cdr(b);","\t}","\treturn a == NIL \u0026\u0026 b == NIL;","}","","static cell Bignum_subtract(cell a, cell b) {","\tcell\tfa, fb, result, r;","\tint\tborrow;","","\tif (bignum_negative_p(a)) {","\t\tif (bignum_negative_p(b)) {","\t\t\t/* -A--B --\u003e -A+|B| --\u003e |B|-|A| */","\t\t\ta = s9_bignum_abs(a);","\t\t\tprot(a);","\t\t\ta = s9_bignum_subtract(s9_bignum_abs(b), a);","\t\t\tunprot(1);","\t\t\treturn a;","\t\t}","\t\telse {","\t\t\t/* -A-B --\u003e -(|A|+B) */","\t\t\treturn s9_bignum_negate(","\t\t\t\ts9_bignum_add(s9_bignum_abs(a), b));","\t\t}","\t}","\telse if (bignum_negative_p(b)) {","\t\t/* A--B --\u003e A+|B| */","\t\treturn s9_bignum_add(a, s9_bignum_abs(b));","\t}","\t/* A-B, A\u003cB --\u003e -(B-A) */","\tif (s9_bignum_less_p(a, b))","\t\treturn s9_bignum_negate(s9_bignum_subtract(b, a));","\t/* A-B, A\u003e=B */","\ta = reverse_segments(cdr(a));","\tprot(a);","\tb = reverse_segments(cdr(b));","\tprot(b);","\tborrow = 0;","\tresult = NIL;","\tprot(result);","\twhile (a != NIL || b != NIL || borrow) {","\t\tfa = a == NIL? 0: car(a);","\t\tfb = b == NIL? 0: car(b);","\t\tr = fa - fb - borrow;","\t\tborrow = 0;","\t\tif (r \u003c 0) {","\t\t\tr += S9_INT_SEG_LIMIT;","\t\t\tborrow = 1;","\t\t}","\t\tresult = new_atom(r, result);","\t\tpref(0) = result;","\t\tif (a != NIL) a = cdr(a);","\t\tif (b != NIL) b = cdr(b);","\t}","\tunprot(3);","\twhile (car(result) == 0 \u0026\u0026 cdr(result) != NIL)","\t\tresult = cdr(result);","\treturn new_atom(T_INTEGER, result);","}","","cell s9_bignum_subtract(cell a, cell b) {","\tTmp = b;","\tprot(a);","\tprot(b);","\tTmp = NIL;","\ta = Bignum_subtract(a, b);","\tunprot(2);","\treturn a;","}","","cell s9_bignum_shift_left(cell a, int fill) {","\tcell\tr, c, result;","\tint\tcarry;","","\tprot(a);","\ta = reverse_segments(cdr(a));","\tprot(a);","\tcarry = fill;","\tresult = NIL;","\tprot(result);","\twhile (a != NIL) {","\t\tif (car(a) \u003e= S9_INT_SEG_LIMIT/10) {","\t\t\tc = car(a) / (S9_INT_SEG_LIMIT/10);","\t\t\tr = car(a) % (S9_INT_SEG_LIMIT/10) * 10;","\t\t\tr += carry;","\t\t\tcarry = c;","\t\t}","\t\telse {","\t\t\tr = car(a) * 10 + carry;","\t\t\tcarry = 0;","\t\t}","\t\tresult = new_atom(r, result);","\t\tpref(0) = result;","\t\ta = cdr(a);","\t}","\tif (carry)","\t\tresult = new_atom(carry, result);","\tresult = new_atom(T_INTEGER, result);","\tunprot(3);","\treturn result;","}","","/* Result: (a/10 . a%10) */","cell s9_bignum_shift_right(cell a) {","\tcell\tr, c, result;","\tint\tcarry;","","\tprot(a);","\ta = cdr(a);","\tprot(a);","\tcarry = 0;","\tresult = NIL;","\tprot(result);","\twhile (a != NIL) {","\t\tc = car(a) % 10;","\t\tr = car(a) / 10;","\t\tr += carry * (S9_INT_SEG_LIMIT/10);","\t\tcarry = c;","\t\tresult = new_atom(r, result);","\t\tpref(0) = result;","\t\ta = cdr(a);","\t}","\tresult = reverse_segments(result);","\tif (car(result) == 0 \u0026\u0026 cdr(result) != NIL)","\t\tresult = cdr(result);","\tresult = new_atom(T_INTEGER, result);","\tpref(0) = result;","\tcarry = s9_make_integer(carry);","\tresult = cons(result, carry);","\tunprot(3);","\treturn result;","}","","cell s9_bignum_multiply(cell a, cell b) {","\tint\tneg;","\tcell\tr, i, result;","","\tTmp = b;","\tprot(a);","\tprot(b);","\tTmp = NIL;","\tneg = bignum_negative_p(a) != bignum_negative_p(b);","\ta = s9_bignum_abs(a);","\tprot(a);","\tb = s9_bignum_abs(b);","\tprot(b);","\tresult = Zero;","\tprot(result);","\twhile (!bignum_zero_p(a)) {","\t\tr = s9_bignum_shift_right(a);","\t\ti = caddr(r);","\t\ta = car(r);","\t\tpref(2) = a;","\t\twhile (i) {","\t\t\tif (Abort_flag) {","\t\t\t\tunprot(5);","\t\t\t\treturn Zero;","\t\t\t}","\t\t\tresult = s9_bignum_add(result, b);","\t\t\tpref(0) = result;","\t\t\ti--;","\t\t}","\t\tb = s9_bignum_shift_left(b, 0);","\t\tpref(1) = b;","\t}","\tif (neg)","\t\tresult = s9_bignum_negate(result);","\tunprot(5);","\treturn result;","}","","/*"," * Equalize A and B, e.g.:"," * A=123, B=12345 --\u003e 12300, 100"," * Return (scaled-a . scaling-factor)"," */","static cell bignum_equalize(cell a, cell b) {","\tcell\tr, f, r0, f0;","","\tr0 = a;","\tprot(r0);","\tf0 = One;","\tprot(f0);","\tr = r0;","\tprot(r);","\tf = f0;","\tprot(f);","\twhile (s9_bignum_less_p(r, b)) {","\t\tpref(3) = r0 = r;","\t\tpref(2) = f0 = f;","\t\tr = s9_bignum_shift_left(r, 0);","\t\tpref(1) = r;","\t\tf = s9_bignum_shift_left(f, 0);","\t\tpref(0) = f;","\t}","\tunprot(4);","\treturn cons(r0, f0);","}","","/* Result: (a/b . a%b) */","static cell Bignum_divide(cell a, cell b) {","\tint\tneg, neg_a;","\tcell\tresult, f;","\tint\ti;","\tcell\tc, c0;","","\tneg_a = bignum_negative_p(a);","\tneg = neg_a != bignum_negative_p(b);","\ta = s9_bignum_abs(a);","\tprot(a);","\tb = s9_bignum_abs(b);","\tprot(b);","\tif (s9_bignum_less_p(a, b)) {","\t\tif (neg_a)","\t\t\ta = s9_bignum_negate(a);","\t\tunprot(2);","\t\treturn cons(Zero, a);","\t}","\tb = bignum_equalize(b, a);","\tpref(1) = b;","\tpref(0) = a;","\tc = NIL;","\tprot(c);","\tc0 = NIL;","\tprot(c0);","\tf = cdr(b);","\tb = car(b);","\tpref(3) = b;","\tprot(f);","\tresult = Zero;","\tprot(result);","\twhile (!bignum_zero_p(f)) {","\t\tc = Zero;","\t\tpref(3) = c;","\t\tpref(2) = c0 = c;","\t\ti = 0;","\t\twhile (!s9_bignum_less_p(a, c)) {","\t\t\tpref(2) = c0 = c;","\t\t\tc = s9_bignum_add(c, b);","\t\t\tpref(3) = c;","\t\t\ti++;","\t\t}","\t\tresult = s9_bignum_shift_left(result, i-1);","\t\tpref(0) = result;","\t\ta = s9_bignum_subtract(a, c0);","\t\tpref(4) = a;","\t\tf = s9_bignum_shift_right(f);","\t\tf = car(f);","\t\tpref(1) = f;","\t\tb = s9_bignum_shift_right(b);","\t\tb = car(b);","\t\tpref(5) = b;","\t}","\tif (neg)","\t\tresult = s9_bignum_negate(result);","\tpref(0) = result;","\tif (neg_a)","\t\ta = s9_bignum_negate(a);","\tunprot(6);","\treturn cons(result, a);","}","","cell s9_bignum_divide(cell a, cell b) {","\tif (bignum_zero_p(b))","\t\treturn UNDEFINED;","\tTmp = b;","\tprot(a);","\tprot(b);","\tTmp = NIL;","\ta = Bignum_divide(a, b);","\tunprot(2);","\treturn a;","}","","/*"," * Real Number Arithmetics"," */","","static cell count_digits(cell m) {","\tint\tk;","\tcell\tx;","","\tx = car(m);","\tk = 0;","\twhile (x != 0) {","\t\tx /= 10;","\t\tk++;","\t}","\tk = k==0? 1: k;","\tm = cdr(m);","\twhile (m != NIL) {","\t\tk += S9_DIGITS_PER_CELL;","\t\tm = cdr(m);","\t}","\treturn k;","}","","cell s9_real_exponent(cell x) {","\tif (integer_p(x)) return 0;","\treturn Real_exponent(x);","}","","cell s9_real_mantissa(cell x) {","\tcell\tm;","","\tif (integer_p(x))","\t\treturn x;","\tm = new_atom(T_INTEGER, Real_mantissa(x));","\tif (Real_negative_p(x))","\t\tm = s9_bignum_negate(m);","\treturn m;","}","","/*"," * Remove trailing zeros and move the decimal"," * point to the END of the mantissa, e.g.:"," * real_normalize(1.234e0) --\u003e 1234e-3"," *"," * Limit the mantissa to S9_MANTISSA_SEGMENTS"," * machine words. This may cause a loss of"," * precision."," *"," * Also handle numeric overflow/underflow."," */","","static cell real_normalize(cell x) {","\tcell\tm, e, r;","\tint\tdgs;","","\tprot(x);","\te = Real_exponent(x);","\tm = new_atom(T_INTEGER, Real_mantissa(x));","\tprot(m);","\tdgs = count_digits(cdr(m));","\twhile (dgs \u003e S9_MANTISSA_SIZE) {","\t\tr = s9_bignum_shift_right(m);","\t\tm = car(r);","\t\tpref(0) = m;","\t\tdgs--;","\t\te++;","\t}","\twhile (!bignum_zero_p(m)) {","\t\tr = s9_bignum_shift_right(m);","\t\tif (!bignum_zero_p(cdr(r)))","\t\t\tbreak;","\t\tm = car(r);","\t\tpref(0) = m;","\t\te++;","\t}","\tif (bignum_zero_p(m))","\t\te = 0;","\tr = new_atom(e, NIL);","\tif (count_digits(r) \u003e S9_DIGITS_PER_CELL) {","\t\tunprot(2);","\t\treturn UNDEFINED;","\t}","\tr = S9_make_quick_real(Real_flags(x), e, cdr(m));","\tunprot(2);","\treturn r;","}","","cell s9_bignum_to_real(cell a) {","\tint\te, flags, d;","\tcell\tm, n;","","\tprot(a);","\tm = s9_flat_copy(a, NULL);","\tcadr(m) = labs(cadr(m));","\te = 0;","\tif (s9_length(cdr(m)) \u003e S9_MANTISSA_SEGMENTS) {","\t\td = count_digits(cdr(m));","\t\twhile (d \u003e S9_MANTISSA_SIZE) {","\t\t\tm = s9_bignum_shift_right(m);","\t\t\tm = car(m);","\t\t\te++;","\t\t\td--;","\t\t}","\t}","\tflags = bignum_negative_p(a)? REAL_NEGATIVE: 0;","\tn = S9_make_quick_real(flags, e, cdr(m));","\tn = real_normalize(n);","\tunprot(1);","\treturn n;","}","","cell s9_real_negate(cell a) {","\tif (integer_p(a))","\t\treturn s9_bignum_negate(a);","\tTmp = a;","\ta = Real_negate(a);","\tTmp = NIL;","\treturn a;","}","","cell s9_real_negative_p(cell a) {","\tif (integer_p(a))","\t\treturn bignum_negative_p(a);","\treturn Real_negative_p(a);","}","","cell s9_real_positive_p(cell a) {","\tif (integer_p(a))","\t\treturn bignum_positive_p(a);","\treturn Real_positive_p(a);","}","","cell s9_real_zero_p(cell a) {","\tif (integer_p(a))","\t\treturn bignum_zero_p(a);","\treturn Real_zero_p(a);","}","","cell s9_real_abs(cell a) {","\tif (integer_p(a))","\t\treturn s9_bignum_abs(a);","\tif (Real_negative_p(a)) {","\t\tTmp = a;","\t\ta = Real_negate(a);","\t\tTmp = NIL;","\t\treturn a;","\t}","\treturn a;","}","","/*"," * Scale the number R so that it gets exponent DESIRED_E"," * without changing its value. When there is not enough"," * room for scaling the mantissa of R, return UNDEFINED."," * E.g.: scale_mantissa(1.0e0, -2, 0) --\u003e 100.0e-2"," *"," * Allow the mantissa to grow to MAX_SIZE segments."," */","","static cell scale_mantissa(cell r, cell desired_e, int max_size) {","\tint\tdgs;","\tcell\tn, e;","","\tdgs = count_digits(Real_mantissa(r));","\tif (max_size \u0026\u0026 (max_size - dgs \u003c Real_exponent(r) - desired_e))","\t\treturn UNDEFINED;","\tn = new_atom(T_INTEGER, s9_flat_copy(Real_mantissa(r), NULL));","\tprot(n);","\te = Real_exponent(r);","\twhile (e \u003e desired_e) {","\t\tn = s9_bignum_shift_left(n, 0);","\t\tpref(0) = n;","\t\te--;","\t}","\tunprot(1);","\treturn S9_make_quick_real(Real_flags(r), e, cdr(n));","}","","static void autoscale(cell *pa, cell *pb) {","\tif (Real_exponent(*pa) \u003c Real_exponent(*pb)) {","\t\t*pb = scale_mantissa(*pb, Real_exponent(*pa),","\t\t\t\t\tS9_MANTISSA_SIZE*2);","\t\treturn;","\t}","\tif (Real_exponent(*pa) \u003e Real_exponent(*pb)) {","\t\t*pa = scale_mantissa(*pa, Real_exponent(*pb),","\t\t\t\t\tS9_MANTISSA_SIZE*2);","\t}","}","","cell shift_mantissa(cell m) {    ","\tm = new_atom(T_INTEGER, m);","\tprot(m);","\tm = s9_bignum_shift_right(m);","\tunprot(1);","\treturn cdar(m);","}","","static int real_compare(cell a, cell b, int approx) {","\tcell\tma, mb, d, e;","\tint\tp;","","\tif (integer_p(a) \u0026\u0026 integer_p(b))","\t\treturn s9_bignum_equal_p(a, b);","\tTmp = b;","\tprot(a);","\tprot(b);","\tTmp = NIL;","\tif (integer_p(a)) {","\t\ta = s9_bignum_to_real(a);","\t\tpref(1) = a;","\t}","\tif (integer_p(b)) {","\t\tprot(a);","\t\tb = s9_bignum_to_real(b);","\t\tunprot(1);","\t\tpref(0) = b;","\t}","\tif (Real_zero_p(a) \u0026\u0026 Real_zero_p(b)) {","\t\tunprot(2);","\t\treturn 1;","\t}","\tif (Real_negative_p(a) != Real_negative_p(b)) {","\t\tunprot(2);","\t\treturn 0;","\t}","\tif (approx) {","\t\td = s9_real_abs(s9_real_subtract(a, b));","\t\t/* integer magnitudes */","\t\tma = count_digits(Real_mantissa(a))+Real_exponent(a);","\t\tmb = count_digits(Real_mantissa(b))+Real_exponent(b);","\t\tif (ma != mb) {","\t\t\tunprot(2);","\t\t\treturn 0;","\t\t}","\t\tp = ma-S9_MANTISSA_SIZE;","\t\tprot(d);","\t\te = S9_make_quick_real(0, p, cdr(One));","\t\tunprot(3);","\t\treturn !s9_real_less_p(e, d);","\t}","\tunprot(2);","\tif (Real_exponent(a) != Real_exponent(b))","\t\treturn 0;","\tma = Real_mantissa(a);","\tmb = Real_mantissa(b);","\twhile (ma != NIL \u0026\u0026 mb != NIL) {","\t\tif (car(ma) != car(mb))","\t\t\treturn 0;","\t\tma = cdr(ma);","\t\tmb = cdr(mb);","\t}","\tif (ma != mb)","\t\treturn 0;","\treturn 1;","}","","int s9_real_equal_p(cell a, cell b) {","\treturn real_compare(a, b, 0);","}","","int s9_real_approx_p(cell a, cell b) {","\treturn real_compare(a, b, 1);","}","","int s9_real_less_p(cell a, cell b) {","\tcell\tma, mb;","\tint\tka, kb, neg;","\tint\tdpa, dpb;","","\tif (integer_p(a) \u0026\u0026 integer_p(b))","\t\treturn s9_bignum_less_p(a, b);","\tTmp = b;","\tprot(a);","\tprot(b);","\tTmp = NIL;","\tif (integer_p(a))","\t\ta = s9_bignum_to_real(a);","\tif (integer_p(b)) {","\t\tprot(a);","\t\tb = s9_bignum_to_real(b);","\t\tunprot(1);","\t}","\tunprot(2);","\tif (Real_negative_p(a) \u0026\u0026 !Real_negative_p(b)) return 1;","\tif (Real_negative_p(b) \u0026\u0026 !Real_negative_p(a)) return 0;","\tif (Real_zero_p(a) \u0026\u0026 Real_positive_p(b)) return 1;","\tif (Real_zero_p(b) \u0026\u0026 Real_positive_p(a)) return 0;","\tneg = Real_negative_p(a);","\tdpa = count_digits(Real_mantissa(a)) + Real_exponent(a);","\tdpb = count_digits(Real_mantissa(b)) + Real_exponent(b);","\tif (dpa \u003c dpb) return neg? 0: 1;","\tif (dpa \u003e dpb) return neg? 1: 0;","\tTmp = b;","\tprot(a);","\tprot(b);","\tTmp = NIL;","\tautoscale(\u0026a, \u0026b);","\tunprot(2);","\tif (a == UNDEFINED) return neg? 1: 0;","\tif (b == UNDEFINED) return neg? 0: 1;","\tma = Real_mantissa(a);","\tmb = Real_mantissa(b);","\tka = s9_length(ma);","\tkb = s9_length(mb);","\tif (ka \u003c kb) return 1;","\tif (ka \u003e kb) return 0;","\twhile (ma != NIL) {","\t\tif (car(ma) \u003c car(mb)) return neg? 0: 1;","\t\tif (car(ma) \u003e car(mb)) return neg? 1: 0;","\t\tma = cdr(ma);","\t\tmb = cdr(mb);","\t}","\treturn 0;","}","","cell s9_real_add(cell a, cell b) {","\tcell\tr, m, e, aa, ab;","\tint\tflags, nega, negb;","","\tif (integer_p(a) \u0026\u0026 integer_p(b))","\t\treturn s9_bignum_add(a, b);","\tTmp = b;","\tprot(a);","\tprot(b);","\tTmp = NIL;","\tif (integer_p(a))","\t\ta = s9_bignum_to_real(a);","\tprot(a);","\tif (integer_p(b))","\t\tb = s9_bignum_to_real(b);","\tprot(b);","\tif (Real_zero_p(a)) {","\t\tunprot(4);","\t\treturn b;","\t}","\tif (Real_zero_p(b)) {","\t\tunprot(4);","\t\treturn a;","\t}","\tautoscale(\u0026a, \u0026b);","\tif (a == UNDEFINED || b == UNDEFINED) {","\t\tab = s9_real_abs(pref(0));","\t\tprot(ab);","\t\taa = s9_real_abs(pref(2));","\t\tunprot(1);","\t\tb = unprot(1);","\t\ta = unprot(1);","\t\tunprot(2);","\t\treturn s9_real_less_p(aa, ab)? b: a;","\t}","\tpref(1) = a;","\tpref(0) = b;","\te = Real_exponent(a);","\tnega = Real_negative_p(a);","\tnegb = Real_negative_p(b);","\ta = new_atom(T_INTEGER, Real_mantissa(a));","\tif (nega)","\t\ta = s9_bignum_negate(a);","\tpref(1) = a;","\tb = new_atom(T_INTEGER, Real_mantissa(b));","\tif (negb)","\t\tb = s9_bignum_negate(b);","\tpref(0) = b;","\tm = s9_bignum_add(a, b);","\tflags = bignum_negative_p(m)? REAL_NEGATIVE: 0;","\tr = s9_bignum_abs(m);","\tr = S9_make_quick_real(flags, e, cdr(r));","\tr = real_normalize(r);","\tunprot(4);","\treturn r;","}","","cell s9_real_subtract(cell a, cell b) {","\tcell\tr;","","\tTmp = b;","\tprot(a);","\tprot(b);","\tTmp = NIL;","\tif (integer_p(b))","\t\tb = s9_bignum_negate(b);","\telse","\t\tb = Real_negate(b);","\tprot(b);","\tr = s9_real_add(a, b);","\tunprot(3);","\treturn r;","}","","cell s9_real_multiply(cell a, cell b) {","\tcell\tr, m, e, ma, mb, ea, eb, neg;","","\tif (integer_p(a) \u0026\u0026 integer_p(b))","\t\treturn s9_bignum_multiply(a, b);","\tTmp = b;","\tprot(a);","\tprot(b);","\tTmp = NIL;","\tif (integer_p(a))","\t\ta = s9_bignum_to_real(a);","\tprot(a);","\tif (integer_p(b))","\t\tb = s9_bignum_to_real(b);","\tprot(b);","\tneg = Real_negative_flag(a) != Real_negative_flag(b);","\tea = Real_exponent(a);","\teb = Real_exponent(b);","\tma = new_atom(T_INTEGER, Real_mantissa(a));","\tpref(1) = ma;","\tmb = new_atom(T_INTEGER, Real_mantissa(b));","\tpref(0) = mb;","\te = ea + eb;","\tm = s9_bignum_multiply(ma, mb);","\tr = S9_make_quick_real(neg? REAL_NEGATIVE: 0, e, cdr(m));","\tr = real_normalize(r);","\tunprot(4);","\treturn r;","}","","cell s9_real_divide(cell a, cell b) {","\tcell\tr, m, e, ma, mb, ea, eb, neg, div2;","\tint\tnd, dd;","","\tTmp = b;","\tprot(a);","\tprot(b);","\tTmp = NIL;","\tif (integer_p(a))","\t\ta = s9_bignum_to_real(a);","\tprot(a);","\tif (integer_p(b))","\t\tb = s9_bignum_to_real(b);","\tprot(b);","\tif (Real_zero_p(b)) {","\t\tunprot(4);","\t\treturn UNDEFINED;","\t}","\tif (Real_zero_p(a)) {","\t\tr = S9_make_quick_real(0, 0, cdr(Zero));","\t\tunprot(4);","\t\treturn r;","\t}","\tneg = Real_negative_flag(a) != Real_negative_flag(b);","\tea = Real_exponent(a);","\teb = Real_exponent(b);","\tma = new_atom(T_INTEGER, Real_mantissa(a));","\tpref(1) = ma;","\tmb = new_atom(T_INTEGER, Real_mantissa(b));","\tpref(0) = mb;","\tif (bignum_zero_p(mb)) {","\t\tunprot(4);","\t\treturn UNDEFINED;","\t}","\tnd = count_digits(cdr(ma));","\tdd = S9_MANTISSA_SIZE + count_digits(cdr(mb));","\twhile (nd \u003c dd) {","\t\tma = s9_bignum_shift_left(ma, 0);","\t\tpref(1) = ma;","\t\tnd++;","\t\tea--;","\t}","\te = ea - eb;","\tm = s9_bignum_divide(ma, mb);","\tprot(m);","\tdiv2 = s9_bignum_abs(mb);","\tdiv2 = s9_bignum_divide(div2, Two);","\tdiv2 = car(div2);","\tif (s9_bignum_less_p(div2, cdr(m))) {","\t\tm = s9_bignum_add(car(m), One);","\t}","\telse {","\t\tm = car(m);","\t}","\tr = S9_make_quick_real(neg? REAL_NEGATIVE: 0, e, cdr(m));","\tr = real_normalize(r);","\tunprot(5);","\treturn r;","}","","cell s9_real_sqrt(cell x) {","\tcell\tn0, n1;","\tint\tr;","","\tif (s9_real_negative_p(x))","\t\treturn UNDEFINED;","\tif (s9_real_zero_p(x))","\t\treturn Zero;","\tprot(x);","\tn0 = x;","\tprot(n0);","\twhile (1) {","\t\tn1 = s9_real_divide(x, n0);","\t\tif (n1 == UNDEFINED)","\t\t\tbreak;","\t\tn1 = s9_real_add(n1, n0);","\t\tn1 = s9_real_divide(n1, Two);","\t\tprot(n1);","\t\tr = s9_real_approx_p(n0, n1);","\t\tn0 = unprot(1);","\t\tif (r) {","\t\t\tbreak;","\t\t}","\t\tpref(0) = n0;","\t}","\tunprot(2);","\treturn n1;","}","","/*"," * Real power algorithm from"," * http://stackoverflow.com/questions/3518973"," * Thanks, Tom Sirgedas!"," */","","static cell rpower(cell x, cell y, cell prec) {","\tcell\tn, nprec;","","\tif (Abort_flag)","\t\treturn Zero;","\tif (s9_real_equal_p(y, One))","\t\treturn x;","\tif (!s9_real_less_p(y, Ten)) {","\t\tprot(x);","\t\tn = s9_real_divide(y, Two);","\t\tpref(0) = n;","\t\tnprec = s9_real_divide(prec, Two);","\t\tprot(nprec);","\t\tn = rpower(x, n, nprec);","\t\tif (n == UNDEFINED || Abort_flag) {","\t\t\tunprot(2);","\t\t\treturn UNDEFINED;","\t\t}","\t\tunprot(1);","\t\tpref(0) = n;","\t\tn = s9_real_multiply(n, n);","\t\tunprot(1);","\t\treturn n;","\t}","\tif (!s9_real_less_p(y, One)) {","\t\ty = s9_real_subtract(y, One);","\t\tprot(y);","\t\tn = rpower(x, y, prec);","\t\tif (n == UNDEFINED || Abort_flag) {","\t\t\tunprot(1);","\t\t\treturn UNDEFINED;","\t\t}","\t\tunprot(1);","\t\tn = s9_real_multiply(x, n);","\t\treturn n;","\t}","\tif (!s9_real_less_p(prec, One))","\t\treturn s9_real_sqrt(x);","\ty = s9_real_multiply(y, Two);","\tprot(y);","\tnprec = s9_real_multiply(prec, Two);","\tprot(nprec);","\tn = rpower(x, y, nprec);","\tif (n == UNDEFINED || Abort_flag) {","\t\tunprot(2);","\t\treturn UNDEFINED;","\t}","\tunprot(2);","\treturn s9_real_sqrt(n);","}","","static cell npower(cell x, cell y) {","\tcell\tn;","\tint\teven;","","\tif (Abort_flag)","\t\treturn Zero;","\tif (s9_real_zero_p(y))","\t\treturn One;","\tif (s9_real_equal_p(y, One))","\t\treturn x; ","\tprot(x);","\tn = s9_bignum_divide(y, Two);","\teven = bignum_zero_p(cdr(n));","\tpref(0) = n;","\tn = npower(x, car(n));","\tif (Abort_flag) {","\t\tunprot(1);","\t\treturn Zero;","\t}","\tpref(0) = n;","\tn = s9_real_multiply(n, n);","\tpref(0) = n;","\tif (!even) {","\t\tn = s9_real_multiply(x, n);","\t\tpref(0) = n;","\t}","\tunprot(1);","\treturn n;","}","","cell s9_real_power(cell x, cell y) {","\tTmp = x;","\tprot(y);","\tprot(x);","\tTmp = NIL;","\tif (integer_p(y)) {","\t\tx = npower(x, y);","\t\tif (bignum_negative_p(y))","\t\t\tx = s9_real_divide(One, x);","\t\tunprot(2);","\t\treturn x;","\t}","\tif (s9_real_negative_p(y)) {","\t\ty = s9_real_abs(y);","\t\tprot(y);","\t\tx = rpower(x, y, Epsilon);","\t\tunprot(3);","\t\tif (x == UNDEFINED)","\t\t\treturn x;","\t\treturn s9_real_divide(One, x);","\t}","\tx = rpower(x, y, Epsilon);","\tunprot(2);","\treturn x;","}","","/* type: 0=trunc, 1=floor, 2=ceil */","static cell rround(cell x, int type) {","\tcell\tn, m, e;","","\te = s9_real_exponent(x);","\tif (e \u003e= 0)","\t\treturn x;","\tprot(x);","\tm = new_atom(T_INTEGER, Real_mantissa(x));","\tprot(m);","\twhile (e \u003c 0) {","\t\tm = s9_bignum_shift_right(m);","\t\tm = car(m);","\t\tpref(0) = m;","\t\te++;","\t}","\tif (\t(type == 1 \u0026\u0026 Real_negative_p(x)) ||","\t\t(type == 2 \u0026\u0026 Real_positive_p(x))","\t) {","\t\tm = s9_bignum_add(m, One);","\t}","\tn = S9_make_real(Real_flags(x), e, cdr(m));","\tunprot(2);","\treturn n;","}","","cell s9_real_trunc(cell x) { return rround(x, 0); }","cell s9_real_floor(cell x) { return rround(x, 1); }","cell s9_real_ceil (cell x) { return rround(x, 2); }","","cell s9_real_to_bignum(cell r) {","\tcell\tn;","\tint\tneg;","","\tif (Real_exponent(r) \u003e= 0) {","\t\tprot(r);","\t\tneg = Real_negative_p(r);","\t\tn = scale_mantissa(r, 0, 0);","\t\tif (n == UNDEFINED) {","\t\t\tunprot(1);","\t\t\treturn UNDEFINED;","\t\t}","\t\tn = new_atom(T_INTEGER, Real_mantissa(n));","\t\tif (neg)","\t\t\tn = s9_bignum_negate(n);","\t\tunprot(1);","\t\treturn n;","\t}","\treturn UNDEFINED;","}","","cell s9_real_integer_p(cell x) {","\tif (integer_p(x))","\t\treturn 1;","\tif (real_p(x) \u0026\u0026 s9_real_to_bignum(x) != UNDEFINED)","\t\treturn 1;","\treturn 0;","}","","/*"," * String/number conversion"," */","","static int exponent_char_p(int c) {","\treturn c \u0026\u0026 strchr(Exponent_chars, c) != NULL;","}","","int s9_integer_string_p(char *s) {","\tif (*s == '-' || *s == '+')","\t\ts++;","\tif (!*s)","\t\treturn 0;","\twhile (isdigit(*s))","\t\ts++;","\treturn *s == 0;","}","","int s9_string_numeric_p(char *s) {","\tint\ti;","\tint\tgot_point = 0,","\t\tgot_digit = 0;","","\ti = 0;","\tif (s[0] == '+' || s[0] == '-')","\t\ti = 1;","\tif (!s[i])","\t\treturn 0;","\twhile (s[i]) {","\t\tif (isdigit(s[i])) {","\t\t\tgot_digit = 1;","\t\t\ti++;","\t\t}","\t\telse if (s[i] == '.' \u0026\u0026 !got_point) {","\t\t\tgot_point = 1;","\t\t\ti++;","\t\t}","\t\telse {","\t\t\tbreak;","\t\t}","\t}","\tif (!got_digit)","\t\treturn 0;","\tif (s[i] \u0026\u0026 strchr(Exponent_chars, s[i]))","\t\treturn s9_integer_string_p(\u0026s[i+1]);","\treturn s[i] == 0;","}","","cell s9_string_to_bignum(char *s) {","\tcell\tn, v, str;","\tint\tk, j, sign;","","\tsign = 1;","\tif (s[0] == '-') {","\t\ts++;","\t\tsign = -1;","\t}","\telse if (s[0] == '+') {","\t\ts++;","\t}","\tstr = s9_make_string(s, strlen(s));","\tprot(str);","\ts = string(str);","\tk = (int) strlen(s);","\tn = NIL;","\twhile (k) {","\t\tj = k \u003c= S9_DIGITS_PER_CELL? k: S9_DIGITS_PER_CELL;","\t\tv = s9_asctol(\u0026s[k-j]);","\t\ts[k-j] = 0;","\t\tk -= j;","\t\tn = new_atom(v, n);","\t\ts = string(str);","\t}","\tunprot(1);","\tcar(n) = sign * car(n);","\treturn new_atom(T_INTEGER, n);","}","","cell s9_string_to_real(char *s) {","\tcell\tmantissa, n;","\tcell\texponent;","\tint\tfound_dp;","\tint\tneg = 0;","\tint\ti, j, v;","","\tmantissa = Zero;","\tprot(mantissa);","\texponent = 0;","\ti = 0;","\tif (s[i] == '+') {","\t\ti++;","\t}","\telse if (s[i] == '-') {","\t\tneg = 1;","\t\ti++;","\t}","\tfound_dp = 0;","\twhile (isdigit((int) s[i]) || s[i] == '#' || s[i] == '.') {","\t\tif (s[i] == '.') {","\t\t\ti++;","\t\t\tfound_dp = 1;","\t\t\tcontinue;","\t\t}","\t\tif (found_dp)","\t\t\texponent--;","\t\tmantissa = s9_bignum_shift_left(mantissa, 0);","\t\tpref(0) = mantissa;","\t\tif (s[i] == '#')","\t\t\tv = 5;","\t\telse","\t\t\tv = s[i]-'0';","\t\tmantissa = s9_bignum_add(mantissa, s9_make_integer(v));","\t\tpref(0) = mantissa;","\t\ti++;","\t}","\tj = 0;","\tfor (n = cdr(mantissa); n != NIL; n = cdr(n))","\t\tj++;","\tif (exponent_char_p(s[i])) {","\t\ti++;","\t\tif (!isdigit(s[i]) \u0026\u0026 s[i] != '-' \u0026\u0026 s[i] != '+') {","\t\t\tunprot(1);","\t\t\treturn UNDEFINED;","\t\t}","\t\tn = s9_string_to_bignum(\u0026s[i]);","\t\tif (cddr(n) != NIL) {","\t\t\tunprot(1);","\t\t\treturn UNDEFINED;","\t\t}","\t\texponent += cadr(n);","\t}","\tunprot(1);","\tn = S9_make_quick_real((neg? REAL_NEGATIVE: 0),","\t\t\texponent, cdr(mantissa));","\treturn real_normalize(n);","}","","cell s9_string_to_number(char *s) {","\tif (s9_integer_string_p(s))","\t\treturn s9_string_to_bignum(s);","\telse","\t\treturn s9_string_to_real(s);","}","","void s9_print_bignum(cell n) {","\tint\tfirst;","\tchar\tbuf[S9_DIGITS_PER_CELL+2];","","\tn = cdr(n);","\tfirst = 1;","\twhile (n != NIL) {","\t\ts9_prints(ntoa(buf, car(n), first? 0: S9_DIGITS_PER_CELL));","\t\tn = cdr(n);","\t\tfirst = 0;","\t}","}","","void s9_print_expanded_real(cell n) {","\tchar\tbuf[S9_DIGITS_PER_CELL+3];","\tint\tk, first;","\tint\tdp_offset, old_offset;","\tcell\tm, e;","\tint\tn_digits, neg;","","\tm = Real_mantissa(n);","\te = Real_exponent(n);","\tneg = Real_negative_p(n);","\tn_digits = count_digits(m);","\tdp_offset = e+n_digits;","\tif (neg)","\t\ts9_prints(\"-\");","\tif (dp_offset \u003c= 0)","\t\ts9_prints(\"0\");","\tif (dp_offset \u003c 0)","\t\ts9_prints(\".\");","\twhile (dp_offset \u003c 0) {","\t\ts9_prints(\"0\");","\t\tdp_offset++;","\t}","\tdp_offset = e+n_digits;","\tfirst = 1;","\twhile (m != NIL) {","\t\tntoa(buf, labs(car(m)), first? 0: S9_DIGITS_PER_CELL);","\t\tk = strlen(buf);","\t\told_offset = dp_offset;","\t\tdp_offset -= k;","\t\tif (dp_offset \u003c 0 \u0026\u0026 old_offset \u003e= 0) {","\t\t\tmemmove(\u0026buf[k+dp_offset+1], \u0026buf[k+dp_offset],","\t\t\t\t-dp_offset+1);","\t\t\tbuf[k+dp_offset] = '.';","\t\t}","\t\ts9_prints(buf);","\t\tm = cdr(m);","\t\tfirst = 0;","\t}","\tif (dp_offset \u003e= 0) {","\t\twhile (dp_offset \u003e 0) {","\t\t\ts9_prints(\"0\");","\t\t\tdp_offset--;","\t\t}","\t\ts9_prints(\".0\");","\t}","}","","void s9_print_sci_real(cell n) {","\tint\tn_digits;","\tcell\tm, e;","\tchar\tbuf[S9_DIGITS_PER_CELL+2];","\tchar\tes[2];","","\tm = Real_mantissa(n);","\te = Real_exponent(n);","\tn_digits = count_digits(m);","\tif (Real_negative_flag(n))","\t\ts9_prints(\"-\");","\tntoa(buf, car(m), 0);","\ts9_blockwrite(buf, 1);","\ts9_prints(\".\");","\ts9_prints(buf[1] || cdr(m) != NIL? \u0026buf[1]: \"0\");","\tm = cdr(m);","\twhile (m != NIL) {","\t\ts9_prints(ntoa(buf, car(m), S9_DIGITS_PER_CELL));","\t\tm = cdr(m);","\t}","\tes[0] = Exponent_chars[0];","\tes[1] = 0;","\ts9_prints(es);","\tif (e+n_digits-1 \u003e= 0)","\t\ts9_prints(\"+\");","\ts9_prints(ntoa(buf, e+n_digits-1, 0));","}","","void s9_print_real(cell n) {","\tint\tn_digits;","\tcell\tm, e;","","\tm = Real_mantissa(n);","\te = Real_exponent(n);","\tn_digits = count_digits(m);","\tif (e+n_digits \u003e -S9_MANTISSA_SIZE \u0026\u0026 e+n_digits \u003c= S9_MANTISSA_SIZE) {","\t\ts9_print_expanded_real(n);","\t\treturn;","\t}","\ts9_print_sci_real(n);","}","","cell s9_bignum_to_int(cell x, int *of) {","\tint\ta, b, s;","","\t*of = 0;","\tif (small_int_p(x)) return small_int_value(x);","\tif (NIL == cdddr(x)) {","\t\tif ((size_t) S9_INT_SEG_LIMIT \u003e (size_t) INT_MAX)","\t\t\ts9_fatal(\"bignum_to_int(): multi-segment integers \"","\t\t\t\t\"unsupported in 64-bit mode\");","\t\ta = cadr(x);","\t\tb = caddr(x);","\t\tif (a \u003e INT_MAX / S9_INT_SEG_LIMIT) {","\t\t\t*of = 1;","\t\t\treturn 0;","\t\t}","\t\tif (a \u003c INT_MIN / S9_INT_SEG_LIMIT) {","\t\t\t*of = 1;","\t\t\treturn 0;","\t\t}","\t\ts = a\u003c0? -1: 1;","\t\ta = abs(a) * S9_INT_SEG_LIMIT;","\t\tif (b \u003e INT_MAX - a) {","\t\t\t*of = 1;","\t\t\treturn 0;","\t\t}","\t\treturn s*(a+b);","\t}","\t*of = 1;","\treturn 0;","}","","cell s9_int_to_bignum(int v) {","\tcell\tn;","","\tif (v \u003e= 0 \u0026\u0026 (long) v \u003c S9_INT_SEG_LIMIT)","\t\treturn s9_make_integer(v);","\tif (v \u003c 0 \u0026\u0026 (long) -v \u003c S9_INT_SEG_LIMIT)","\t\treturn s9_make_integer(v);","\tif ((size_t) S9_INT_SEG_LIMIT \u003e (size_t) INT_MAX)","\t\ts9_fatal(\"int_to_bignum(): multi-segment integers \"","\t\t\t\"unsupported in 64-bit mode\");","\tn = new_atom(abs(v) % S9_INT_SEG_LIMIT, NIL);","\tn = new_atom(v / S9_INT_SEG_LIMIT, n);","\treturn new_atom(T_INTEGER, n);","}","","cell s9_bignum_to_string(cell x) {","\tint\tn;","\tcell\ts;","\tint\tioe;","","\tprot(x);","\tn = count_digits(cdr(x));","\tif (bignum_negative_p(x))","\t\tn++;","\ts = s9_make_string(\"\", n);","\tStr_outport = string(s);","\tStr_outport_len = n+1;","\tioe = IO_error;","\tIO_error = 0;","\ts9_print_bignum(x);","\tn = IO_error;","\tIO_error = ioe;","\tStr_outport = NULL;","\tStr_outport_len = 0;","\tunprot(1);","\tif (n) {","\t\treturn UNDEFINED;","\t}","\treturn s;","}","","cell s9_real_to_string(cell x, int mode) {","\t#define Z S9_MANTISSA_SIZE+S9_DIGITS_PER_CELL+10","\tchar\tbuf[Z];","\tint\tioe, n;","","\tStr_outport = buf;","\tStr_outport_len = Z;","\tioe = IO_error;","\tIO_error = 0;","\tswitch (mode) {","\tcase 0:\ts9_print_real(x); break;","\tcase 1:\ts9_print_sci_real(x); break;","\tcase 2:\ts9_print_expanded_real(x); break;","\tdefault:","\t\tStr_outport = NULL;","\t\tStr_outport_len = 0;","\t\treturn UNDEFINED;","\t\tbreak;","\t}","\tStr_outport = NULL;","\tStr_outport_len = 0;","\tn = IO_error;","\tIO_error = ioe;","\tif (n) {","\t\treturn UNDEFINED;","\t}","\treturn s9_make_string(buf, strlen(buf));","}","","/*"," * I/O"," */","","void s9_close_port(int port) {","\tif (port \u003c 0 || port \u003e= S9_MAX_PORTS)","\t\treturn;","\tif (Ports[port] == NULL) {","\t\tPort_flags[port] = 0;","\t\treturn;","\t}","\tfclose(Ports[port]); /* already closed? don't care */","\tPorts[port] = NULL;","\tPort_flags[port] = 0;","}","","int s9_new_port(void) {","\tint\ti, tries;","","\tfor (tries=0; tries\u003c2; tries++) {","\t\tfor (i=0; i\u003cS9_MAX_PORTS; i++) {","\t\t\tif (Ports[i] == NULL)","\t\t\t\treturn i;","\t\t}","\t\tif (tries == 0)","\t\t\ts9_gc();","\t}","\treturn -1;","}","","int s9_open_input_port(char *path) {","\tint\ti = s9_new_port();","","\tif (i \u003c 0)","\t\treturn -1;","\tPorts[i] = fopen(path, \"r\");","\tif (Ports[i] == NULL)","\t\treturn -1;","\treturn i;","}","","int s9_open_output_port(char *path, int append) {","\tint\ti = s9_new_port();","","\tif (i \u003c 0)","\t\treturn -1;","\tPorts[i] = fopen(path, append? \"a\": \"w\");","\tif (Ports[i] == NULL)","\t\treturn -1;","\treturn i;","}","","int s9_port_eof(int p) {","\tif (p \u003c 0 || p \u003e= S9_MAX_PORTS)","\t\treturn -1;","\treturn feof(Ports[p]);","}","","int s9_error_port(void) {","\treturn Error_port;","}","","int s9_input_port(void) {","\treturn Str_inport? -1: Input_port;","}","","int s9_output_port(void) {","\treturn Output_port;","}","","cell s9_set_input_port(cell port) {","\tcell\tp = Input_port;","","\tInput_port = port;","\treturn p;","}","","cell s9_set_output_port(cell port) {","\tcell\tp = Output_port;","","\tOutput_port = port;","\treturn p;","}","","void s9_reset_std_ports(void) {","\tclearerr(stdin);","\tclearerr(stdout);","\tclearerr(stderr);","\tInput_port = 0;","\tOutput_port = 1;","\tError_port = 2;","}","","int s9_lock_port(int port) {","\tif (port \u003c 0 || port \u003e= S9_MAX_PORTS)","\t\treturn -1;","\tPort_flags[port] |= S9_LOCK_TAG;","\treturn 0;","}","","int s9_unlock_port(int port) {","\tif (port \u003c 0 || port \u003e= S9_MAX_PORTS)","\t\treturn -1;","\tPort_flags[port] \u0026= ~S9_LOCK_TAG;","\treturn 0;","}","","/*"," * Primitives"," */","","static char *expected(int n, cell who, char *what) {","\tstatic char\tmsg[100];","\tchar            num[32];","\tchar            *s;","\tS9_PRIM\t\t*p;","","\tp = \u0026Primitives[cadr(who)];","\t// sprintf(msg, \"%s: expected %s in argument #%d\", p-\u003ename, what, n);","\tmsg[0] = '\\0';","\ts = strcat(msg, p-\u003ename);","\ts = strcat(s, \": expected \");","\ts = strcat(s, what);","\ts = strcat(s, \" in argument #\");","\titoa(n, num, 10);","\ts = strcat(s, num);","\treturn msg;","}","","static char *wrongargs(char *name, char *what) {","\tstatic char\tbuf[100];","\tchar            *s;","","\t// sprintf(buf, \"%s: too %s arguments\", name, what);","\tbuf[0] = '\\0';","\ts = strcat(buf, name);","\ts = strcat(s, \": too \");","\ts = strcat(s, name);","\ts = strcat(s, \" arguments\");","\treturn buf;","}","","char *s9_typecheck(cell f) {","\tS9_PRIM\t*p;","\tint\tna, i, k;","","\tk = narg();","\tp = prim_info(f);","\tif (k \u003c p-\u003emin_args)","\t\treturn wrongargs(p-\u003ename, \"few\");","\tif (k \u003e p-\u003emax_args \u0026\u0026 p-\u003emax_args \u003e= 0)","\t\treturn wrongargs(p-\u003ename, \"many\");","\tna = p-\u003emax_args \u003c 0? p-\u003emin_args: p-\u003emax_args;","\tif (na \u003e k)","\t\tna = k;","\telse if (na \u003e 3)","\t\tna = 3;","\tfor (i=1; i\u003c=na; i++) {","\t\tswitch (p-\u003earg_types[i-1]) {","\t\tcase T_ANY:","\t\t\tbreak;","\t\tcase T_BOOLEAN:","\t\t\tif (!boolean_p(parg(i)))","\t\t\t\treturn expected(i, f, \"boolean\");","\t\t\tbreak;","\t\tcase T_CHAR:","\t\t\tif (!char_p(parg(i)))","\t\t\t\treturn expected(i, f, \"char\");","\t\t\tbreak;","\t\tcase T_INPUT_PORT:","\t\t\tif (!input_port_p(parg(i)))","\t\t\t\treturn expected(i, f, \"input-port\");","\t\t\tbreak;","\t\tcase T_INTEGER:","\t\t\tif (!integer_p(parg(i)))","\t\t\t\treturn expected(i, f, \"integer\");","\t\t\tbreak;","\t\tcase T_OUTPUT_PORT:","\t\t\tif (!output_port_p(parg(i)))","\t\t\t\treturn expected(i, f, \"output-port\");","\t\t\tbreak;","\t\tcase T_PAIR:","\t\t\tif (atom_p(parg(i)))","\t\t\t\treturn expected(i, f, \"pair\");","\t\t\tbreak;","\t\tcase T_LIST:","\t\t\tif (parg(i) != NIL \u0026\u0026 atom_p(parg(i)))","\t\t\t\treturn expected(i, f, \"list\");","\t\t\tbreak;","\t\tcase T_FUNCTION:","\t\t\tif (\t!function_p(parg(i)) \u0026\u0026","\t\t\t\t!primitive_p(parg(i)) \u0026\u0026","\t\t\t\t!continuation_p(parg(i))","\t\t\t)","\t\t\t\treturn expected(i, f, \"function\");","\t\t\tbreak;","\t\tcase T_REAL:","\t\t\tif (!integer_p(parg(i)) \u0026\u0026 !real_p(parg(i)))","\t\t\t\treturn expected(i, f, \"number\");","\t\t\tbreak;","\t\tcase T_STRING:","\t\t\tif (!string_p(parg(i)))","\t\t\t\treturn expected(i, f, \"string\");","\t\t\tbreak;","\t\tcase T_SYMBOL:","\t\t\tif (!symbol_p(parg(i)))","\t\t\t\treturn expected(i, f, \"symbol\");","\t\t\tbreak;","\t\tcase T_VECTOR:","\t\t\tif (!vector_p(parg(i)))","\t\t\t\treturn expected(i, f, \"vector\");","\t\t\tbreak;","\t\t}","\t}","\treturn NULL;","}","","cell s9_apply_prim(cell f) {","\tS9_PRIM\t*p;","","\tp = prim_info(f);","\treturn (*p-\u003ehandler)();","}","","/*"," * Image I/O"," */","","struct magic {","\tchar\tid[16];\t\t\t/* \"magic#\"\t*/","\tchar\tversion[8];\t\t/* \"yyyymmdd\"\t*/","\tchar\tcell_size[1];\t\t/* size + '0'\t*/","\tchar    mantissa_size[1];\t/* size + '0'\t*/","\tchar\tbyte_order[8];\t\t/* e.g. \"4321\"\t*/","\tchar\tprim_slots[8];\t\t/* see code\t*/","\tchar\tpad[6];","};","","static char *xfwrite(void *buf, int siz, int n, FILE *f) {","\tif (fwrite(buf, siz, n, f) != n) {","\t\treturn \"image file write error\";","\t}","\treturn NULL;","}","","char *s9_dump_image(char *path, char *magic) {","\tFILE\t\t*f;","\tcell\t\tn, **v;","\tint\t\ti;","\tstruct magic\tm;","\tchar\t\t*s;","","\tf = fopen(path, \"wb\");","\tif (f == NULL) {","\t\treturn \"cannot create image file\";","\t}","\tmemset(\u0026m, '_', sizeof(m));","\tstrncpy(m.id, magic, sizeof(m.id));","\tstrncpy(m.version, S9_VERSION, sizeof(m.version));","\tm.cell_size[0] = sizeof(cell)+'0';","\tm.mantissa_size[0] = S9_MANTISSA_SEGMENTS+'0';","#ifdef S9_BITS_PER_WORD_64","\tn = 0x3132333435363738L;","#else","\tn = 0x31323334L;","#endif","\tmemcpy(m.byte_order, \u0026n, sizeof(n)\u003e8? 8: sizeof(n));","\tn = Last_prim;","\tmemcpy(m.prim_slots, \u0026n, sizeof(n)\u003e8? 8: sizeof(n));","\tif ((s = xfwrite(\u0026m, sizeof(m), 1, f)) != NULL) {","\t\tfclose(f);","\t\treturn s;","\t}","\ti = Cons_pool_size;","\tif ((s = xfwrite(\u0026i, sizeof(int), 1, f)) != NULL) {","\t\tfclose(f);","\t\treturn s;","\t}","\ti = Vec_pool_size;","\tif ((s = xfwrite(\u0026i, sizeof(int), 1, f)) != NULL) {","\t\tfclose(f);","\t\treturn s;","\t}","\tif (\t(s = xfwrite(\u0026Free_list, sizeof(cell), 1, f)) != NULL ||","\t\t(s = xfwrite(\u0026Free_vecs, sizeof(cell), 1, f)) != NULL ||","\t\t(s = xfwrite(\u0026Symbols, sizeof(cell), 1, f)) != NULL ||","\t\t(s = xfwrite(\u0026Symhash, sizeof(cell), 1, f)) != NULL","\t) {","\t\tfclose(f);","\t\treturn s;","\t}","\ti = 0;","\tv = Image_vars;","\twhile (v[i]) {","\t\tif ((s = xfwrite(v[i], sizeof(cell), 1, f)) != NULL) {","\t\t\tfclose(f);","\t\t\treturn s;","\t\t}","\t\ti++;","\t}","\tif (\tfwrite(Car, 1, Cons_pool_size*sizeof(cell), f)","\t\t != Cons_pool_size*sizeof(cell) ||","\t\tfwrite(Cdr, 1, Cons_pool_size*sizeof(cell), f)","\t\t != Cons_pool_size*sizeof(cell) ||","\t\tfwrite(Tag, 1, Cons_pool_size, f) != Cons_pool_size ||","\t\tfwrite(Vectors, 1, Vec_pool_size*sizeof(cell), f)","\t\t != Vec_pool_size*sizeof(cell)","\t) {","\t\tfclose(f);","\t\treturn \"image dump failed\";","\t}","\tfclose(f);","\treturn NULL;","}","","static char *xfread(void *buf, int siz, int n, FILE *f) {","\tif (fread(buf, siz, n, f) != n) {","\t\treturn \"image file read error\";","\t}","\treturn NULL;","}","","char *s9_load_image(char *path, char *magic) {","\tFILE\t\t*f;","\tcell\t\tn, **v;","\tint\t\ti;","\tstruct magic\tm;","\tint\t\timage_nodes, image_vcells;","\tchar\t\t*s;","","\tf = fopen(path, \"rb\");","\tif (f == NULL)","\t\treturn \"could not open file\";","\tif ((s = xfread(\u0026m, sizeof(m), 1, f)) != NULL)","\t\treturn s;","\tif (memcmp(m.id, magic, 16)) {","\t\tfclose(f);","\t\treturn \"magic match failed\";","\t}","\tif (memcmp(m.version, S9_VERSION, sizeof(m.version))) {","\t\tfclose(f);","\t\treturn \"wrong image version\";","\t}","\tif (m.cell_size[0]-'0' != sizeof(cell)) {","\t\tfclose(f);","\t\treturn \"wrong cell size\";","\t}","\tif (m.mantissa_size[0]-'0' != S9_MANTISSA_SEGMENTS) {","\t\tfclose(f);","\t\treturn \"wrong mantissa size\";","\t}","\tmemcpy(\u0026n, m.byte_order, sizeof(cell));","#ifdef S9_BITS_PER_WORD_64","\tif (n != 0x3132333435363738L) {","#else","\tif (n != 0x31323334L) {","#endif","\t\tfclose(f);","\t\treturn \"wrong byte order\";","\t}","\tmemcpy(\u0026n, m.prim_slots, sizeof(cell));","\tif (n != Last_prim) {","\t\tfclose(f);","\t\treturn \"wrong number of primitives\";","\t}","\tmemset(Tag, 0, Cons_pool_size);","\tif ((s = xfread(\u0026image_nodes, sizeof(int), 1, f)) != NULL)","\t\treturn s;","\tif ((s = xfread(\u0026image_vcells, sizeof(int), 1, f)) != NULL)","\t\treturn s;","\twhile (image_nodes \u003e Cons_pool_size) {","\t\tif (\tNode_limit \u0026\u0026","\t\t\tCons_pool_size + Cons_segment_size \u003e Node_limit","\t\t) {","\t\t\tfclose(f);","\t\t\treturn \"image cons pool too large\";","\t\t}","\t\tnew_cons_segment();","\t}","\twhile (image_vcells \u003e Vec_pool_size) {","\t\tif (\tVector_limit \u0026\u0026","\t\t\tVec_pool_size + Vec_segment_size \u003e Vector_limit","\t\t) {","\t\t\tfclose(f);","\t\t\treturn \"image vector pool too large\";","\t\t}","\t\tnew_vec_segment();","\t}","\tif (\t(s = xfread(\u0026Free_list, sizeof(cell), 1, f)) != NULL ||","\t\t(s = xfread(\u0026Free_vecs, sizeof(cell), 1, f)) != NULL ||","\t\t(s = xfread(\u0026Symbols, sizeof(cell), 1, f)) != NULL ||","\t\t(s = xfread(\u0026Symhash, sizeof(cell), 1, f)) != NULL","\t) {","\t\tfclose(f);","\t\treturn s;","\t}","\tv = Image_vars;","\ti = 0;","\twhile (v[i]) {","\t\tif ((s = xfread(v[i], sizeof(cell), 1, f)) != NULL)","\t\t\treturn s;","\t\ti++;","\t}","\tif (\t(fread(Car, 1, image_nodes*sizeof(cell), f)","\t\t  != image_nodes*sizeof(cell) ||","\t\t fread(Cdr, 1, image_nodes*sizeof(cell), f)","\t\t  != image_nodes*sizeof(cell) ||","\t\t fread(Tag, 1, image_nodes, f) != image_nodes ||","\t\t fread(Vectors, 1, image_vcells*sizeof(cell), f)","\t\t  != image_vcells*sizeof(cell) ||","\t\t fgetc(f) != EOF)","\t) {","\t\tfclose(f);","\t\treturn \"wrong file size\";","\t}","\tfclose(f);","\treturn NULL;","}","","/*"," * Initialization"," */","","void s9_exponent_chars(char *s) {","\tExponent_chars = s;","}","","void s9_image_vars(cell **v) {","\tImage_vars = v;","}","","void s9_add_image_vars(cell **v) {","\tint\ti, n, m;","\tcell\t**nv;","","\tif (Image_vars != NULL) {","\t\tfor (n=0; Image_vars[n] != NULL; n++)","\t\t\t;","\t\tfor (m=0; v[m] != NULL; m++)","\t\t\t;","\t\tnv = malloc((n+m+1) * sizeof(cell *));","\t\tif (nv == NULL)","\t\t\ts9_fatal(\"add_image_vars(): out of memory\");","\t\tn = 0;","\t\tfor (i = 0; Image_vars[i] != NULL; i++)","\t\t\tnv[n++] = Image_vars[i];","\t\tfor (i = 0; v[i] != NULL; i++)","\t\t\tnv[n++] = v[i];","\t\tnv[n] = NULL;","\t\tv = nv;","\t}","\tImage_vars = v;","}","","static void resetpools(void) {","\tCons_segment_size = S9_INITIAL_SEGMENT_SIZE;","\tVec_segment_size = S9_INITIAL_SEGMENT_SIZE;","\tCons_pool_size = 0,","\tVec_pool_size = 0;","\tCar = NULL,","\tCdr = NULL;","\tTag = NULL;","\tFree_list = NIL;","\tVectors = NULL;","\tFree_vecs = 0;","\tPrimitives = NULL;","\tMax_prims = 0;","}","","void s9_init(cell **extroots, cell *stack, int *stkptr) {","\tint\ti;","","#ifdef S9_BITS_PER_WORD_64","\tif (sizeof(cell) != 8)","\t\ts9_fatal(\"improper 64-bit build\");","#endif","\tGC_ext_roots = extroots;","\tGC_stack = stack;","\tGC_stkptr = stkptr;","\tfor (i=2; i\u003cS9_MAX_PORTS; i++)","\t\tPorts[i] = NULL;","\tPorts[0] = stdin;","\tPorts[1] = stdout;","\tPorts[2] = stderr;","\tPort_flags[0] = S9_LOCK_TAG;","\tPort_flags[1] = S9_LOCK_TAG;","\tPort_flags[2] = S9_LOCK_TAG;","\tInput_port = 0;","\tOutput_port = 1;","\tError_port = 2;","\tStr_outport = NULL;","\tStr_outport_len = 0;","\tStr_inport = NULL;","\tAbort_flag = 0;","\tresetpools();","\tNode_limit = S9_NODE_LIMIT * 1024L;","\tVector_limit = S9_VECTOR_LIMIT * 1024L;","\tStack = NIL,","\tTmp_car = NIL;","\tTmp_cdr = NIL;","\tTmp = NIL;","\tSymbols = NIL;","\tSymhash = NIL;","\tPrinter_limit = 0;","\tIO_error = 0;","\tExponent_chars = \"eE\";","\tRun_stats = 0;","\tCons_stats = 0;","\tMem_error_handler = NULL;","\tnew_cons_segment();","\tnew_vec_segment();","\ts9_gc();","\tProtect = s9_make_vector(PROT_STACK_LEN);","\tProtp = -1;","\tZero = make_init_integer(0);","\tOne = make_init_integer(1);","\tTwo = make_init_integer(2);","\tTen = make_init_integer(10);","\tNullvec = s9_new_vec(T_VECTOR, 0);","\tNullstr = s9_new_vec(T_STRING, 1);","\tBlank = new_atom(T_CHAR, new_atom(' ', NIL));","\tEpsilon = S9_make_quick_real(0, -S9_MANTISSA_SIZE, cdr(One));","}","","void s9_fini() {","\tint\ti;","","\tfor (i=2; i\u003cS9_MAX_PORTS; i++) {","\t\tif (Ports[i] != NULL)","\t\t\tfclose(Ports[i]);","\t\tPorts[i] = NULL;","\t}","\tif (Car) free(Car);","\tif (Cdr) free(Cdr);","\tif (Tag) free(Tag);","\tif (Vectors) free(Vectors);","\tif (Primitives) free(Primitives);","\tresetpools();","}","","/***********************************************************************","\t\t\tTest cases below","***********************************************************************/","","#ifdef TEST","volatile int\tMem_err = 0;","int\t\tErrors = 0;","","#define TESTFILE\t\"__testfile__\"","","void fail(char *s) {","\tprintf(\"Failed: %s\\n\", s);","\tErrors++;","}","","cell pcons(void) {","\tif (narg() != 2) fail(\"apply_prim(0)\");","\treturn cons(parg(1), parg(2));","}","","cell\tA, B, N;","","cell\tR;","int\tP;","","cell\t*Roots[] = { \u0026A, \u0026B, \u0026N, \u0026R, NULL };","","S9_PRIM Pr = { \"cons\", pcons, 2, 2, { T_ANY, T_LIST, T_ANY } };","","void mem_error(int src) {","\tMem_err = src;","}","","void test_types(void) {","\tcell\tn, m;","\tint\tof;","","\tif (!eof_p(END_OF_FILE)) fail(\"eof_p()\");","\tif (!undefined_p(UNDEFINED)) fail(\"undefined_p()\");","\tif (!unspecific_p(UNSPECIFIC)) fail(\"unspecific_p()\");","\tif (!s9_special_p(USER_SPECIALS)) fail(\"special_p()\");","\tif (!boolean_p(TRUE)) fail(\"boolean_p(TRUE)\");","\tif (!boolean_p(FALSE)) fail(\"boolean_p(FALSE)\");","\tn = s9_make_char('x');","\tif (!char_p(n)) fail(\"char_p()\");","\tif (char_value(n) != 'x') fail(\"char_value()\");","\tn = s9_make_port(0, T_INPUT_PORT);","\tif (!input_port_p(n)) fail(\"input_port_p()\");","\tif (port_no(n) != 0) fail(\"port_no(0)\");","\tn = s9_make_integer(12345);","\tif (!integer_p(n)) fail(\"integer_p()\");","\tif (s9_bignum_to_int(n, \u0026of) != 12345) fail(\"bignum_to_int()\");","\tn = cons(One, NIL);","\tn = cons(Zero, n);","\tif (!pair_p(n)) fail(\"pair_p(1)\");","\tif (!pair_p(cdr(n))) fail(\"pair_p(1)\");","\tif (car(n) != Zero) fail(\"list/1\");","\tif (cadr(n) != One) fail(\"list/2\");","\tif (cddr(n) != NIL) fail(\"list/NIL\");","\tn = s9_make_port(1, T_OUTPUT_PORT);","\tif (!output_port_p(n)) fail(\"output_port_p()\");","\tif (port_no(n) != 1) fail(\"port_no(1)\");","\tn = s9_make_primitive(\u0026Pr);","\tif (!primitive_p(n)) fail(\"primitive_p()\");","\tif (prim_slot(n) != 0) fail(\"prim_slot()\");","\tif (strcmp(prim_info(n)-\u003ename, \"cons\")) fail(\"prim_info()\");","\tif (!function_p(new_atom(T_FUNCTION, NIL))) fail(\"function_p()\");","\tn = s9_make_real(1, -5, s9_make_integer(12345));","\tif (!real_p(n)) fail(\"real_p()\");","\tif (s9_real_exponent(n) != -5) fail(\"real_exponent()\");","\tif (s9_bignum_to_int(s9_real_mantissa(n), \u0026of) != 12345)","\t\tfail(\"real_mantissa()\");","\tn = s9_make_string(\"hello, world!\", 13);","\tif (!string_p(n)) fail(\"string_p()\");","\tif (strcmp(string(n), \"hello, world!\")) fail(\"string()\");","\tif (string_len(n) != 14) fail(\"string_len()\");","\tn = s9_symbol_ref(\"foobarbaz\");","\tif (!symbol_p(n)) fail(\"symbol_p()\");","\tif (strcmp(symbol_name(n), \"foobarbaz\")) fail(\"symbol_name()\");","\tif (symbol_len(n) != 10) fail(\"symbol_len()\");","\tif (s9_symbol_ref(\"foobarbaz\") != n) fail(\"symbol_ref()\");","\tif (!syntax_p(new_atom(T_SYNTAX, NIL))) fail(\"syntax_p()\");","\tn = s9_make_vector(100);","\tvector(n)[0] = Zero;","\tvector(n)[99] = One;","\tif (!vector_p(n)) fail(\"vector_p()\");","\tif (vector(n)[0] != Zero) fail(\"vector(0)\");","\tif (vector(n)[99] != One) fail(\"vector(99)\");","\tif (vector_len(n) != 100) fail(\"vector_len()\");","\tif (!continuation_p(new_atom(T_CONTINUATION, NIL)))","\t\tfail(\"continuation_p()\");","\tn = s9_make_string(\"foo\", 3);","\tm = s9_copy_string(n);","\tif (strcmp(string(n), string(m))) fail(\"copy_string()\");","\tif (!atom_p(new_atom(0, NIL))) fail(\"atom_p()\");","\tn = s9_new_vec(T_STRING, 100);","\tif (!string_p(n)) fail(\"new_vec(1)\");","\tif (string_len(n) != 100) fail(\"new_vec(2)\");","\tprot(One);","\tprot(Two);","\tif (pref(0) != Two) fail(\"pref(1)\");","\tif (pref(1) != One) fail(\"pref(2)\");","\tif (unprot(1) != Two) fail(\"prot(2)\");","\tif (unprot(1) != One) fail(\"prot(1)\");","\tif (!constant_p(s9_cons3(NIL, NIL, S9_CONST_TAG)))","\t\tfail(\"constant_p()\");","\tn = s9_make_primitive(\u0026Pr);","\tprot(n);","\tm = cons(NIL, NIL); vector(R)[++P] = m;","\tm = s9_mkfix(1); vector(R)[++P] = m;","\tif (s9_typecheck(n) == NULL) fail(\"typecheck(1)\");","\tP = -1;","\tm = cons(One, NIL); vector(R)[++P] = m;","\tm = cons(Zero, NIL); vector(R)[++P] = m;","\tm = s9_mkfix(2); vector(R)[++P] = m;","\tif (s9_typecheck(n) == NULL) fail(\"typecheck(2)\");","\tP = -1;","\tm = cons(NIL, NIL); vector(R)[++P] = m;","\tm = cons(Zero, NIL); vector(R)[++P] = m;","\tm = s9_mkfix(2); vector(R)[++P] = m;","\tif (s9_typecheck(n) != NULL) fail(\"typecheck(3)\");","\tn = s9_apply_prim(n);","\tunprot(1);","\tif (car(n) != Zero) fail(\"apply_prim(1)\");","\tif (cdr(n) != NIL) fail(\"apply_prim(2)\");","\tif (s9_find_symbol(\"new-symbol\") != NIL) fail(\"find_symbol(1)\");","\tn = s9_make_symbol(\"new-symbol\", 10);","\tif (s9_find_symbol(\"new-symbol\") != NIL) fail(\"find_symbol(2)\");","\ts9_intern_symbol(n);","\tif (s9_find_symbol(\"new-symbol\") == NIL) fail(\"find_symbol(3)\");","\tm = s9_symbol_to_string(n);","\tif (!string_p(m) || strcmp(string(m), \"new-symbol\"))","\t\tfail(\"symbol_to_string()\");","\tif (s9_string_to_symbol(m) != n) fail(\"string_to_symbol(1)\");","\ts9_string_to_symbol(s9_make_string(\"xxyyzz\", 6));","\tif (s9_find_symbol(\"xxyyzz\") == NIL) fail(\"string_to_symbol(2)\");","\tif (s9_type_tag(Zero) != S9_T_INTEGER) fail(\"type_tag(1)\");","\tif (s9_type_tag(s9_make_string(\"\", 0)) != S9_T_STRING)","\t\tfail(\"type_tag(2)\");","\tif (s9_type_tag(s9_symbol_ref(\"foo\")) != S9_T_SYMBOL)","\t\tfail(\"type_tag(3)\");","\tif (s9_type_tag(S9_TRUE) != S9_T_BOOLEAN) fail(\"type_tag(4)\");","\tif (s9_type_tag(S9_NIL) != S9_T_NONE) fail(\"type_tag(5)\");","}","","void test_fixnum(void) {","\tint\tn;","","\tn = 1 \u003c\u003c (sizeof(int)*8-2);","\tA = s9_mkfix(n);","\tif (!s9_fix_p(A)) fail(\"mkfix(1)\");","\tif (s9_fixval(A) != n) fail(\"fixval(1)\");","\tA = s9_mkfix(-n);","\tif (!s9_fix_p(A)) fail(\"mkfix(2)\");","\tif (s9_fixval(A) != -n) fail(\"fixval(2)\");","}","","void test_bignum(void) {","\tcell\tn;","\tint\tof;","","#ifndef S9_BITS_PER_WORD_64","\tint\tv;","","\tv = INT_MAX;","\tA = s9_int_to_bignum(v);","\tif (!integer_p(A)) fail(\"s9_int_to_bignum(1)\");","\tif (s9_bignum_to_int(A, \u0026of) != v) fail(\"s9_bignum_to_int(1)\");","\tA = s9_int_to_bignum(-v);","\tif (!integer_p(A)) fail(\"s9_int_to_bignum(2)\");","\tif (s9_bignum_to_int(A, \u0026of) != -v) fail(\"s9_bignum_to_int(2)\");","\tA = s9_int_to_bignum(INT_MAX);","\tA = s9_bignum_add(A, One);","\ts9_bignum_to_int(A, \u0026of);","\tif (0 == of) fail(\"s9_bignum_to_int(3)\");","\tA = s9_string_to_bignum(\"123456789012345678901234567890\");","\ts9_bignum_to_int(A, \u0026of);","\tif (0 == of) fail(\"s9_bignum_to_int(4)\");","#endif","\tif (s9_bignum_to_int(Zero, \u0026of) != 0) fail(\"Zero\");","\tif (s9_bignum_to_int(One, \u0026of) != 1) fail(\"One\");","\tif (s9_bignum_to_int(Two, \u0026of) != 2) fail(\"Two\");","\tn = s9_make_integer(-123);","\tif (s9_bignum_to_int(s9_bignum_abs(n), \u0026of) != 123)","\t\tfail(\"bignum_abs()\");","\tA = s9_make_integer(1235);","\tB = s9_make_integer(5678);","\tif (s9_bignum_to_int(s9_bignum_add(A, B), \u0026of) != 6913)","\t\tfail(\"bignum_add()\");","\tN = s9_bignum_divide(B, A);","\tif (s9_bignum_to_int(car(N), \u0026of) != 4) fail(\"bignum_divide(1)\");","\tif (s9_bignum_to_int(cdr(N), \u0026of) != 738) fail(\"bignum_divide(2)\");","\tif (s9_bignum_equal_p(A, B)) fail(\"bignum_equal_p(1)\");","\tif (!s9_bignum_equal_p(A, A)) fail(\"bignum_equal_p(2)\");","\tif (s9_bignum_even_p(A)) fail(\"bignum_even_p(1)\");","\tif (!s9_bignum_even_p(B)) fail(\"bignum_even_p(2)\");","\tif (!s9_bignum_less_p(A, B)) fail(\"bignum_less_p(1)\");","\tif (s9_bignum_less_p(B, A)) fail(\"bignum_less_p(2)\");","\tif (s9_bignum_less_p(B, B)) fail(\"bignum_less_p(3)\");","\tN = s9_make_integer(123);","\tif (s9_bignum_to_int(s9_bignum_multiply(N, N), \u0026of) != 15129)","\t\tfail(\"bignum_multiply()\");","\tif (s9_bignum_to_int(s9_bignum_negate(A), \u0026of) != -1235)","\t\tfail(\"bignum_negate()\");","\tN = s9_bignum_shift_left(N, 7);","\tif (s9_bignum_to_int(N, \u0026of) != 1237) fail(\"bignum_shift_left()\");","\tN = s9_bignum_shift_right(A);","\tif (s9_bignum_to_int(car(N), \u0026of) != 123) fail(\"bignum_shift_right(1)\");","\tif (s9_bignum_to_int(cdr(N), \u0026of) != 5) fail(\"bignum_shift_right(2)\");","\tif (s9_bignum_to_int(s9_bignum_subtract(A, B), \u0026of) != -4443)","\t\tfail(\"bignum_subtract()\");","\tN = s9_bignum_to_string(A);","\tif (!string_p(N) || strcmp(string(N), \"1235\"))","\t\tfail(\"bignum_to_string()\");","}","","cell mant(cell x) {","\tint\tof;","","\treturn s9_bignum_to_int(s9_real_mantissa(x), \u0026of);","}","","cell result(cell r, cell xe, cell xm) {","\tint\tm = mant(r);","","\treturn xe == s9_real_exponent(r) \u0026\u0026 m == xm;","}","","void test_real(void) {","\tint\tof;","","\tif (!real_p(Epsilon)) fail(\"Epsilon\");","\tN = s9_make_real(1, 2, s9_make_integer(314));","\tif (Real_exponent(N) != 2) fail(\"Real_exponent()\");","\tA = s9_bignum_to_int(new_atom(T_INTEGER, Real_mantissa(N)), \u0026of);","\tif (A != 314) fail(\"Real_mantissa()\");","\tif (Real_negative_flag(N)) fail(\"Real_negative_flag()\");","\tif (Real_zero_p(N)) fail(\"Real_zero_p()\");","\tif (!Real_positive_p(N)) fail(\"Real_positive_p()\");","\tif (Real_negative_p(N)) fail(\"Real_negative_p(1)\");","\tN = Real_negate(N);","\tif (!Real_negative_p(N)) fail(\"Real_negative_p(2)\");","\tA = s9_make_real(1, 1, s9_make_integer(123));","\tB = s9_make_real(-1, -1, s9_make_integer(456));","\tif (s9_real_negative_p(s9_real_abs(B))) fail(\"real_abs()\");","\tN = s9_real_add(A, B);","\tif (!result(N, -1, 11844)) fail(\"real_add()\");","\tN = s9_real_divide(A, Two);","\tif (!result(N, 0, 615)) fail(\"real_divide()\");","\tif (s9_real_equal_p(A, B)) fail(\"real_equal_p(1)\");","\tif (!s9_real_equal_p(A, A)) fail(\"real_equal_p(2)\");","\tN = s9_real_floor(B);","\tif (!result(N, 0, -46)) fail(\"real_floor()\");","\tN = s9_real_trunc(B);","\tif (!result(N, 0, -45)) fail(\"real_floor()\");","\tN = s9_real_ceil(B);","\tif (!result(N, 0, -45)) fail(\"real_ceil()\");","\tif (!s9_real_integer_p(A)) fail(\"real_integer_p(1)\");","\tif (s9_real_integer_p(B)) fail(\"real_integer_p(2)\");","\tif (s9_real_less_p(A, B)) fail(\"real_less_p(1)\");","\tif (!s9_real_less_p(B, A)) fail(\"real_less_p(1)\");","\tif (s9_real_less_p(B, B)) fail(\"real_less_p(2)\");","\tN = s9_real_multiply(B, Two);","\tif (!result(N, -1, -912)) fail(\"real_multiply()\");","\tN = s9_real_negate(B);","\tif (!result(N, -1, 456)) fail(\"real_negate()\");","\tif (s9_real_zero_p(N)) fail(\"real_zero_p()\");","\tif (!s9_real_positive_p(N)) fail(\"real_positive_p()\");","\tif (s9_real_negative_p(N)) fail(\"real_negative_p(1)\");","\tN = s9_real_negate(N);","\tif (!s9_real_negative_p(N)) fail(\"real_negative_p(2)\");","\tN = s9_real_subtract(A, B);","\tif (!result(N, -1, 12756)) fail(\"real_subtract()\");","\tN = s9_real_to_bignum(A);","\tif (s9_bignum_to_int(N, \u0026of) != 1230) fail(\"real_to_bignum()\");","\tN = s9_real_multiply(Ten, Ten);","\tN = s9_real_sqrt(N);","\tif (!s9_real_equal_p(N, Ten)) fail(\"real_sqrt(1)\");","\tN = s9_make_real(1, -2, s9_make_integer(256));","\tN = s9_real_sqrt(N);","\tA = s9_make_real(1, -1, s9_make_integer(16));","\tif (!s9_real_equal_p(N, A)) fail(\"real_sqrt(2)\");","\tN = s9_real_power(Two, Ten);","\tif (!s9_real_equal_p(N, s9_make_integer(1024))) fail(\"real_power(1)\");","\tN = s9_real_power(Two, s9_real_negate(Two));","\tA = s9_make_real(1, -2, s9_make_integer(25));","\tif (!s9_real_equal_p(N, A)) fail(\"real_power(2)\");","\tA = s9_real_sqrt(Two);","\tB = s9_make_real(1, -1, s9_make_integer(5));","\tB = s9_real_power(Two, B);","\tif (!s9_real_equal_p(A, B)) fail(\"real_power(3)\");","\tA = s9_make_real(1, -1, s9_make_integer(1));","\tB = s9_real_power(Two, A);","}","","void print_test(char *name, void (*printer)(cell), cell n, char *s) {","\tint\tp, op, i;","\tchar\tb[100];","","\tp = s9_open_output_port(TESTFILE, 0);","\top = s9_output_port();","\ts9_set_output_port(p);","\t(*printer)(n);","\ts9_close_port(p);","\ts9_set_output_port(op);","\tp = s9_open_input_port(TESTFILE);","\top = s9_input_port();","\ts9_set_input_port(p);","\ti = s9_blockread(b, 100);","\tif (i \u003e 0)","\t\tb[i] = 0;","\ts9_close_port(p);","\ts9_set_input_port(op);","\tif (strcmp(s, b))","\t\tfail(name);","}","","void test_io(void) {","\tint\tc, i, p;","\tchar\tb[100];","","\tif (s9_input_port() != 0) fail(\"input_port(1)\");","\tif (s9_output_port() != 1) fail(\"output_port(1)\");","\tp = s9_open_output_port(TESTFILE, 0);","\ts9_set_output_port(p);","\ts9_prints(\"0123456789\");","\ts9_close_port(p);","\ts9_reset_std_ports();","\tp = s9_open_input_port(TESTFILE);","\ts9_set_input_port(p);","\tfor (i=0; i\u003c5; i++) {","\t\tif ((c = s9_readc()) != \"0123456789\"[i])","\t\t\tfail(\"readc(1)\");","\t}","\ts9_rejectc(c);","\tfor (i=4; i\u003c10; i++) {","\t\tif ((c = s9_readc()) != \"0123456789\"[i])","\t\t\tfail(\"readc(2)\");","\t}","\ts9_close_port(p);","\ts9_reset_std_ports();","\tp = s9_open_output_port(TESTFILE, 1);","\ts9_set_output_port(p);","\ts9_prints(\"0123456789\");","\ts9_close_port(p);","\ts9_reset_std_ports();","\tp = s9_open_input_port(TESTFILE);","\ts9_set_input_port(p);","\tif (s9_blockread(b, 20) \u003c 20) fail(\"blockread()\");","\ts9_close_port(p);","\ts9_reset_std_ports();","\tif (s9_input_port() != 0) fail(\"input_port(2)\");","\tif (s9_output_port() != 1) fail(\"output_port(2)\");","\tprint_test(\"print_bignum()\", s9_print_bignum,","\t\t\ts9_string_to_bignum(\"-12345678901234567890\"),","\t\t\t\"-12345678901234567890\");","\tprint_test(\"print_expanded_real()\", s9_print_expanded_real,","\t\t\ts9_make_real(1, -6, s9_make_integer(12345)),","\t\t\t\"0.012345\");","\tprint_test(\"print_sci_real()\", s9_print_sci_real,","\t\t\ts9_make_real(1, -6, s9_make_integer(12345)),","\t\t\t\"1.2345e-2\");","\tfor (i=0; i\u003cS9_MAX_PORTS*3; i++)","\t\tif (s9_open_input_port(TESTFILE) \u003c 0)","\t\t\tfail(\"port finalization\");","}","","void test_conv(void) {","\tint\tof;","","\tif (s9_integer_string_p(\"\")) fail(\"s9_integer_string_p(1)\");","\tif (s9_integer_string_p(\"-\")) fail(\"s9_integer_string_p(2)\");","\tif (!s9_integer_string_p(\"0\")) fail(\"s9_integer_string_p(3)\");","\tif (!s9_integer_string_p(\"-1\")) fail(\"s9_integer_string_p(4)\");","\tif (!s9_integer_string_p(\"+01234567890\"))","\t\tfail(\"s9_integer_string_p(5)\");","\tif (s9_string_numeric_p(\"\")) fail(\"s9_string_numeric_p(1)\");","\tif (s9_string_numeric_p(\"-\")) fail(\"s9_string_numeric_p(2)\");","\tif (!s9_string_numeric_p(\"0\")) fail(\"s9_string_numeric_p(3)\");","\tif (!s9_string_numeric_p(\"-1\")) fail(\"s9_string_numeric_p(4)\");","\tif (!s9_string_numeric_p(\"+01234567890\")) fail(\"string_numeric_p(5)\");","\tif (s9_string_numeric_p(\".\")) fail(\"s9_string_numeric_p(6)\");","\tif (s9_string_numeric_p(\"0e\")) fail(\"s9_string_numeric_p(7)\");","\tif (!s9_string_numeric_p(\".0\")) fail(\"s9_string_numeric_p(8)\");","\tif (!s9_string_numeric_p(\"0.\")) fail(\"s9_string_numeric_p(9)\");","\tif (!s9_string_numeric_p(\"1e0\")) fail(\"s9_string_numeric_p(10)\");","\tif (!s9_string_numeric_p(\"+1e-23\")) fail(\"s9_string_numeric_p(11)\");","\tif (!s9_string_numeric_p(\"-1e+23\")) fail(\"s9_string_numeric_p(12)\");","\tif (s9_bignum_to_int(s9_string_to_bignum(\"12345\"), \u0026of) != 12345)","\t\tfail(\"string_to_bignum()\");","\tN = s9_string_to_real(\"+12345.6e-7\");","\tif (!result(N, -8, 123456)) fail(\"string_to_real()\");","}","","void test_util(void) {","\tint\ti;","\tcell\ta, b;","","\tif (s9_asctol(\"12345\") != 12345) fail(\"asctol()\");","\tN = cons(NIL, NIL);","\tfor (i=0; i\u003c100; i++)","\t\tN = cons(NIL, N);","\tif (s9_length(N) != 101) fail(\"length()\");","\tN = s9_flat_copy(N, \u0026a);","\tif (s9_length(N) != 101) fail(\"flat_copy(1)\");","\tb = cons(NIL, NIL);","\tcdr(a) = b;","\tif (s9_length(N) != 102) fail(\"flat_copy(2)\");","}","","int main(void) {","\ts9_init(Roots, \u0026R, \u0026P);","\tR = NIL;","\tR = s9_make_vector(100);","\tP = -1;","\ts9_mem_error_handler(mem_error);","\ttest_types();","\ttest_fixnum();","\ttest_bignum();","\ttest_real();","\ttest_io();","\ttest_conv();","\ttest_util();","\ts9_fini();","\tremove(TESTFILE);","\tbye(Errors);","\treturn 0;","}","#endif /* TEST */",""],"s9core.h":["/*"," * S9core Toolkit, Mk IVd"," * By Nils M Holm, 2007-2019"," * In the public domain"," *"," * Under jurisdictions without a public domain, the CC0 applies."," * See the file CC0 for a copy of the license."," */","","#define S9_VERSION \"20190402\"","","/*"," * Ugly prelude to deal with some system-dependent stuff."," */","","#ifdef __NetBSD__"," #ifndef unix","  #define unix"," #endif","#endif","","#ifdef __unix"," #ifndef unix","  #define unix"," #endif","#endif","","#ifdef __linux"," #ifndef unix","  #define unix"," #endif","#endif","","#ifdef __GNUC__"," #ifndef unix","  #define unix"," #endif","#endif","","#ifdef __clang__"," #ifndef unix","  #define unix"," #endif","#endif","","#ifndef unix"," #ifndef plan9","  #error \"Either 'unix' or 'plan9' must be #defined.\""," #endif","#endif","","#ifdef _MSC_VER"," #if _MSC_VER \u003e 1200","  #ifndef _CRT_SECURE_NO_DEPRECATE","   #define _CRT_SECURE_NO_DEPRECATE","  #endif"," #endif"," #ifndef _POSIX_","  #define _POSIX_"," #endif","#endif","","#ifdef wasm"," #undef unix"," #include \"wasm.h\"","#endif","","#ifdef plan9"," #include \u003cu.h\u003e"," #include \u003clibc.h\u003e"," #include \u003cstdio.h\u003e"," #include \u003cctype.h\u003e"," #include \u003cape/limits.h\u003e"," #define size_t\tuvlong"," #define bye(x)\texits((x)? \"error\": NULL)"," #define ptrdiff_t vlong","#endif","","#ifdef unix"," #include \u003cstdlib.h\u003e"," #include \u003cstddef.h\u003e"," #include \u003cstdio.h\u003e"," #include \u003cstring.h\u003e"," #include \u003cctype.h\u003e"," #include \u003climits.h\u003e"," #define bye(x)\texit((x)? EXIT_FAILURE: EXIT_SUCCESS)","#endif","","/*"," * Tunable parameters"," */","","/* Default memory limits in K nodes and K cells; 0 = none */","#define S9_NODE_LIMIT\t14013","#define S9_VECTOR_LIMIT\t14013","","/* Initial memory pool sizes */","#define S9_INITIAL_SEGMENT_SIZE\t32768","","/* Primitive segment size (slots) */","#define S9_PRIM_SEG_SIZE\t256","","/* Maximum number of open I/O ports */","#define S9_MAX_PORTS\t\t32","","/* Use 64-bit cells (don't do this!) */","/* #define S9_BITS_PER_WORD_64 */","","/*"," * Non-tunable parameters"," */","","/* A cell must be large enough to hold an integer segment;"," * see S9_INT_SEG_LIMIT, below"," */","","#ifdef S9_BITS_PER_WORD_64"," #define s9_cell\tptrdiff_t","#else"," #define s9_cell\tint","#endif","","#ifdef S9_BITS_PER_WORD_64"," #define S9_DIGITS_PER_CELL\t18"," #define S9_INT_SEG_LIMIT\t1000000000000000000LL"," #define S9_MANTISSA_SEGMENTS\t1","#else"," #define S9_DIGITS_PER_CELL\t9"," #define S9_INT_SEG_LIMIT\t1000000000L"," #define S9_MANTISSA_SEGMENTS\t2","#endif","","#define S9_MANTISSA_SIZE\t(S9_MANTISSA_SEGMENTS * S9_DIGITS_PER_CELL)","","/*"," * Node tags"," */","","#define S9_ATOM_TAG\t0x01\t/* Atom, car = type, cdr = next */","#define S9_MARK_TAG\t0x02\t/* Mark */","#define S9_STATE_TAG\t0x04\t/* State */","#define S9_VECTOR_TAG\t0x08\t/* Vector, car = type, cdr = content */","#define S9_PORT_TAG\t0x10\t/* Atom is an I/O port (with ATOM_TAG) */","#define S9_USED_TAG\t0x20\t/* Port: in use */","#define S9_LOCK_TAG\t0x40\t/* Port: locked (do not finalize) */","#define S9_CONST_TAG\t0x80\t/* Node is immutable */","","/*"," * Special objects"," */","","#define s9_special_p(x)\t((x) \u003c 0)","#define S9_NIL\t\t(-1)","#define S9_TRUE\t\t(-2)","#define S9_FALSE\t(-3)","#define S9_END_OF_FILE\t(-4)","#define S9_UNDEFINED\t(-5)","#define S9_UNSPECIFIC\t(-6)","#define S9_VOID\t\t(-7)","","/*"," * Type tags"," */","","#define S9_T_ANY\t\t(-10)","#define S9_T_BOOLEAN\t\t(-11)","#define S9_T_CHAR\t\t(-12)","#define S9_T_INPUT_PORT\t\t(-13)","#define S9_T_INTEGER\t\t(-14)","#define S9_T_LIST\t\t(-17)","#define S9_T_OUTPUT_PORT\t(-15)","#define S9_T_PAIR\t\t(-16)","#define S9_T_PRIMITIVE\t\t(-18)","#define S9_T_FUNCTION\t\t(-19)","#define S9_T_REAL\t\t(-20)","#define S9_T_STRING\t\t(-21)","#define S9_T_SYMBOL\t\t(-22)","#define S9_T_SYNTAX\t\t(-23)","#define S9_T_VECTOR\t\t(-24)","#define S9_T_CONTINUATION\t(-25)","#define S9_T_FIXNUM\t\t(-26)","#define S9_T_NONE\t\t(-99)","","#define S9_USER_SPECIALS\t(-100)","","/*"," * Structures"," */","","struct S9_counter {","\tint\tn, n1k, n1m, n1g, n1t;","};","","#define s9_counter\tstruct S9_counter","","struct S9_primitive {","\tchar\t*name;","\ts9_cell\t(*handler)(void);","\tint\tmin_args;","\tint\tmax_args;\t/* -1 = variadic */","\tint\targ_types[3];","};","","#define S9_PRIM    struct S9_primitive","","/*"," * I/O"," */","","#define s9_nl()\t\ts9_prints(\"\\n\")","","/*"," * Nested lists"," */","","#define s9_car(x)          (S9_car[x])","#define s9_cdr(x)          (S9_cdr[x])","#define s9_caar(x)         (S9_car[S9_car[x]])","#define s9_cadr(x)         (S9_car[S9_cdr[x]])","#define s9_cdar(x)         (S9_cdr[S9_car[x]])","#define s9_cddr(x)         (S9_cdr[S9_cdr[x]])","#define s9_caaar(x)        (S9_car[S9_car[S9_car[x]]])","#define s9_caadr(x)        (S9_car[S9_car[S9_cdr[x]]])","#define s9_cadar(x)        (S9_car[S9_cdr[S9_car[x]]])","#define s9_caddr(x)        (S9_car[S9_cdr[S9_cdr[x]]])","#define s9_cdaar(x)        (S9_cdr[S9_car[S9_car[x]]])","#define s9_cdadr(x)        (S9_cdr[S9_car[S9_cdr[x]]])","#define s9_cddar(x)        (S9_cdr[S9_cdr[S9_car[x]]])","#define s9_cdddr(x)        (S9_cdr[S9_cdr[S9_cdr[x]]])","#define s9_caaaar(x)       (S9_car[S9_car[S9_car[S9_car[x]]]])","#define s9_caaadr(x)       (S9_car[S9_car[S9_car[S9_cdr[x]]]])","#define s9_caadar(x)       (S9_car[S9_car[S9_cdr[S9_car[x]]]])","#define s9_caaddr(x)       (S9_car[S9_car[S9_cdr[S9_cdr[x]]]])","#define s9_cadaar(x)       (S9_car[S9_cdr[S9_car[S9_car[x]]]])","#define s9_cadadr(x)       (S9_car[S9_cdr[S9_car[S9_cdr[x]]]])","#define s9_caddar(x)       (S9_car[S9_cdr[S9_cdr[S9_car[x]]]])","#define s9_cadddr(x)       (S9_car[S9_cdr[S9_cdr[S9_cdr[x]]]])","#define s9_cdaaar(x)       (S9_cdr[S9_car[S9_car[S9_car[x]]]])","#define s9_cdaadr(x)       (S9_cdr[S9_car[S9_car[S9_cdr[x]]]])","#define s9_cdadar(x)       (S9_cdr[S9_car[S9_cdr[S9_car[x]]]])","#define s9_cdaddr(x)       (S9_cdr[S9_car[S9_cdr[S9_cdr[x]]]])","#define s9_cddaar(x)       (S9_cdr[S9_cdr[S9_car[S9_car[x]]]])","#define s9_cddadr(x)       (S9_cdr[S9_cdr[S9_car[S9_cdr[x]]]])","#define s9_cdddar(x)       (S9_cdr[S9_cdr[S9_cdr[S9_car[x]]]])","#define s9_cddddr(x)       (S9_cdr[S9_cdr[S9_cdr[S9_cdr[x]]]])","","/*"," * Access to fields of atoms"," */","","#define s9_tag(n)\t\t(S9_tag[n])","","#define s9_string(n)\t\t((char *) \u0026Vectors[S9_cdr[n]])","#define s9_string_len(n)\t(Vectors[S9_cdr[n] - 1])","#define s9_symbol_name(n)\t(string(n))","#define s9_symbol_len(n)\t(string_len(n))","#define s9_vector(n)\t\t(\u0026Vectors[S9_cdr[n]])","#define s9_vector_link(n)\t(Vectors[S9_cdr[n] - 3])","#define s9_vector_index(n)\t(Vectors[S9_cdr[n] - 2])","#define s9_vector_size(k)\t(((k)+sizeof(s9_cell)-1) / \\","                                 sizeof(s9_cell) + 3)","#define s9_vector_len(n)\t(vector_size(string_len(n)) - 3)","","#define s9_fixval(x)\t\tcadr(x)","#define s9_small_int_value(x)\tcadr(x)","#define s9_port_no(n)\t\t(cadr(n))","#define s9_char_value(n)\t(cadr(n))","#define s9_prim_slot(n)\t\t(cadr(n))","#define s9_prim_info(n)\t\t(\u0026Primitives[prim_slot(n)])","","/*"," * Type predicates"," */","","#define s9_eof_p(n)\t\t((n) == S9_END_OF_FILE)","#define s9_undefined_p(n)\t((n) == S9_UNDEFINED)","#define s9_unspecific_p(n)\t((n) == S9_UNSPECIFIC)","","#define s9_boolean_p(n)\t\\","\t((n) == S9_TRUE || (n) == S9_FALSE)","","#define s9_integer_p(n) \\","\t(!s9_special_p(n) \u0026\u0026 (tag(n) \u0026 S9_ATOM_TAG) \u0026\u0026 car(n) == S9_T_INTEGER)","","#define s9_real_p(n) \\","\t(!s9_special_p(n) \u0026\u0026 (tag(n) \u0026 S9_ATOM_TAG) \u0026\u0026 car(n) == S9_T_REAL)","","#define s9_fix_p(n) \\","        (!s9_special_p(n) \u0026\u0026 (tag(n) \u0026 S9_ATOM_TAG) \u0026\u0026 T_FIXNUM == car(n))","","#define s9_number_p(n) \\","\t(!s9_special_p(n) \u0026\u0026 (tag(n) \u0026 S9_ATOM_TAG) \u0026\u0026 \\","\t (car(n) == S9_T_REAL || car(n) == S9_T_INTEGER))","","#define s9_primitive_p(n) \\","\t(!s9_special_p(n) \u0026\u0026 (tag(n) \u0026 S9_ATOM_TAG) \u0026\u0026 \\","\t car(n) == S9_T_PRIMITIVE)","","#define s9_function_p(n) \\","\t(!s9_special_p(n) \u0026\u0026 (tag(n) \u0026 S9_ATOM_TAG) \u0026\u0026 \\","\t car(n) == S9_T_FUNCTION)","","#define s9_continuation_p(n) \\","\t(!s9_special_p(n) \u0026\u0026 (tag(n) \u0026 S9_ATOM_TAG) \u0026\u0026 \\","\t car(n) == S9_T_CONTINUATION)","","#define s9_char_p(n) \\","\t(!s9_special_p(n) \u0026\u0026 (tag(n) \u0026 S9_ATOM_TAG) \u0026\u0026 car(n) == S9_T_CHAR)","","#define s9_syntax_p(n) \\","\t(!s9_special_p(n) \u0026\u0026 (tag(n) \u0026 S9_ATOM_TAG) \u0026\u0026 car(n) == S9_T_SYNTAX)","","#define s9_input_port_p(n) \\","\t(!s9_special_p(n) \u0026\u0026 (tag(n) \u0026 S9_ATOM_TAG) \u0026\u0026 \\","\t (tag(n) \u0026 S9_PORT_TAG) \u0026\u0026 car(n) == S9_T_INPUT_PORT)","","#define s9_output_port_p(n) \\","\t(!s9_special_p(n) \u0026\u0026 (tag(n) \u0026 S9_ATOM_TAG) \u0026\u0026 \\","\t (tag(n) \u0026 S9_PORT_TAG) \u0026\u0026 car(n) == S9_T_OUTPUT_PORT)","","#define s9_symbol_p(n) \\","\t(!s9_special_p(n) \u0026\u0026 (tag(n) \u0026 S9_VECTOR_TAG) \u0026\u0026 car(n) == S9_T_SYMBOL)","","#define s9_vector_p(n) \\","\t(!s9_special_p(n) \u0026\u0026 (tag(n) \u0026 S9_VECTOR_TAG) \u0026\u0026 car(n) == S9_T_VECTOR)","","#define s9_string_p(n) \\","\t(!s9_special_p(n) \u0026\u0026 (tag(n) \u0026 S9_VECTOR_TAG) \u0026\u0026 car(n) == S9_T_STRING)","","#define s9_constant_p(n) \\","\t(!s9_special_p(n) \u0026\u0026 (tag(n) \u0026 S9_CONST_TAG))","","#define s9_atom_p(n) \\","\t(s9_special_p(n) || (tag(n) \u0026 S9_ATOM_TAG) || (tag(n) \u0026 S9_VECTOR_TAG))","","#define s9_pair_p(x) (!s9_atom_p(x))","","#define s9_small_int_p(n) (NIL == cddr(n))","","#define s9_type_tag(n) \\","\t(S9_TRUE == (n)? S9_T_BOOLEAN: \\","\t S9_FALSE == (n)? S9_T_BOOLEAN: \\","\t (!s9_special_p(n) \u0026\u0026 (tag(n) \u0026 (S9_ATOM_TAG|S9_VECTOR_TAG))? car(n): \\","\t S9_T_NONE))","","/*"," * Allocators"," */","","#define s9_cons(pa, pd)\t\ts9_cons3((pa), (pd), 0)","#define s9_new_atom(pa, pd)\ts9_cons3((pa), (pd), S9_ATOM_TAG)","#define s9_save(n)\t\t(Stack = s9_cons((n), Stack))","","/*"," * Bignum arithmetics"," */","","#define s9_bignum_negative_p(a)\t((cadr(a)) \u003c 0)","#define s9_bignum_zero_p(a)\t((cadr(a)) == 0)","#define s9_bignum_positive_p(a)\t((cadr(a)) \u003e 0)","","/*"," * Real number structure"," */","","#define S9_real_flags(x)\t(cadr(x))","#define S9_real_exponent(x)\t(caddr(x))","#define S9_real_mantissa(x)\t(cdddr(x))","","#define S9_REAL_NEGATIVE   0x01","","#define S9_real_negative_flag(x)\t(S9_real_flags(x) \u0026 S9_REAL_NEGATIVE)","","/*"," * Real-number arithmetics"," */","","#define S9_real_zero_p(x) \\","\t(car(S9_real_mantissa(x)) == 0 \u0026\u0026 cdr(S9_real_mantissa(x)) == S9_NIL)","","#define S9_real_negative_p(x) \\","\t(S9_real_negative_flag(x) \u0026\u0026 !S9_real_zero_p(x))","","#define S9_real_positive_p(x) \\","\t(!S9_real_negative_flag(x) \u0026\u0026 !S9_real_zero_p(x))","","#define S9_real_negate(a) \\","\tS9_make_quick_real(S9_real_flags(a) \u0026 S9_REAL_NEGATIVE?\t\\","\t\t\tS9_real_flags(a) \u0026 ~S9_REAL_NEGATIVE: \\","\t\t\tS9_real_flags(a) |  S9_REAL_NEGATIVE, \\","\t\t\tS9_real_exponent(a), S9_real_mantissa(a))","","/*"," * Globals"," */","","extern s9_cell\t*S9_car,","\t\t*S9_cdr;","extern char\t*S9_tag;","","extern s9_cell\t*S9_vectors;","","extern s9_cell\tS9_stack;","","extern s9_cell\t*S9_gc_stack;","extern int\t*S9_gc_stkptr;","","extern S9_PRIM\t*S9_primitives;","","extern s9_cell\tS9_zero,","\t\tS9_one,","\t\tS9_two,","\t\tS9_ten;","","extern s9_cell\tS9_epsilon;","","extern FILE\t*S9_ports[];","","extern int\tS9_input_port,","\t\tS9_output_port,","\t\tS9_error_port;","","/*"," * Prototypes"," */","","#ifdef plan9","int\tsystem(char *s);","#endif","","void\ts9_abort(void);","int\ts9_aborted(void);","void\ts9_add_image_vars(s9_cell **v);","s9_cell\ts9_apply_prim(s9_cell f);","s9_cell\ts9_argv_to_list(char **argv);","long\ts9_asctol(char *s);","s9_cell\ts9_bignum_abs(s9_cell a);","s9_cell\ts9_bignum_add(s9_cell a, s9_cell b);","s9_cell\ts9_bignum_divide(s9_cell a, s9_cell b);","int\ts9_bignum_equal_p(s9_cell a, s9_cell b);","int\ts9_bignum_even_p(s9_cell a);","int\ts9_bignum_less_p(s9_cell a, s9_cell b);","s9_cell\ts9_bignum_multiply(s9_cell a, s9_cell b);","s9_cell\ts9_bignum_negate(s9_cell a);","s9_cell\ts9_bignum_shift_left(s9_cell a, int fill);","s9_cell\ts9_bignum_shift_right(s9_cell a);","s9_cell\ts9_bignum_subtract(s9_cell a, s9_cell b);","s9_cell\ts9_bignum_to_int(s9_cell x, int *of);","s9_cell\ts9_bignum_to_real(s9_cell a);","s9_cell\ts9_bignum_to_string(s9_cell x);","int\ts9_blockread(char *s, int k);","void\ts9_blockwrite(char *s, int k);","void\ts9_close_port(int port);","void\ts9_close_input_string(void);","s9_cell\ts9_cons3(s9_cell pcar, s9_cell pcdr, int ptag);","int\ts9_conses(s9_cell a);","void\ts9_cons_stats(int x);","s9_cell\ts9_copy_string(s9_cell x);","void\ts9_count(s9_counter *c);","void\ts9_countn(s9_counter *c, int n);","char\t*s9_dump_image(char *path, char *magic);","int\ts9_error_port(void);","void\ts9_exponent_chars(char *s);","void\ts9_fatal(char *msg);","s9_cell\ts9_find_symbol(char *s);","s9_cell\ts9_flat_copy(s9_cell n, s9_cell *lastp);","void\ts9_flush(void);","int\ts9_gc(void);","int\ts9_gcv(void);","void\ts9_gc_verbosity(int n);","void\ts9_get_counters(s9_counter **nc, s9_counter **cc, s9_counter **vc,","\t\t\ts9_counter **gc);","void\ts9_mem_error_handler(void (*h)(int src));","void\ts9_image_vars(s9_cell **v);","int\ts9_input_port(void);","int\ts9_inport_open_p(void);","int\ts9_integer_string_p(char *s);","s9_cell\ts9_intern_symbol(s9_cell y);","s9_cell\ts9_int_to_bignum(int v);","int\ts9_io_status(void);","void\ts9_io_reset(void);","int\ts9_length(s9_cell n);","char\t*s9_load_image(char *path, char *magic);","int\ts9_lock_port(int port);","s9_cell\ts9_make_char(int c);","s9_cell\ts9_make_integer(s9_cell i);","s9_cell\ts9_make_norm_real(int flags, s9_cell exp, s9_cell mant);","s9_cell\ts9_make_port(int portno, s9_cell type);","s9_cell\ts9_make_primitive(S9_PRIM *p);","s9_cell\tS9_make_real(int flags, s9_cell exp, s9_cell mant);","s9_cell\ts9_make_real(int sign, s9_cell exp, s9_cell mant);","s9_cell\ts9_make_string(char *s, int k);","s9_cell\ts9_make_symbol(char *s, int k);","s9_cell\ts9_make_vector(int k);","s9_cell\ts9_mkfix(int i);","int\ts9_new_port(void);","s9_cell\ts9_new_vec(s9_cell type, int size);","int\ts9_open_input_port(char *path);","char\t*s9_open_input_string(char *s);","int\ts9_open_output_port(char *path, int append);","int\ts9_output_port(void);","int\ts9_outport_open_p(void);","int\ts9_port_eof(int p);","void\ts9_prints(char *s);","int\ts9_printer_limit(void);","void\ts9_print_bignum(s9_cell n);","void\ts9_print_expanded_real(s9_cell n);","void\ts9_print_real(s9_cell n);","void\ts9_print_sci_real(s9_cell n);","int\ts9_readc(void);","s9_cell\ts9_read_counter(s9_counter *c);","s9_cell\ts9_real_abs(s9_cell a);","s9_cell\ts9_real_add(s9_cell a, s9_cell b);","int\ts9_real_approx_p(s9_cell a, s9_cell b);","s9_cell\ts9_real_ceil(s9_cell x);","s9_cell\ts9_real_divide(s9_cell a, s9_cell b);","int\ts9_real_equal_p(s9_cell a, s9_cell b);","s9_cell\ts9_real_exponent(s9_cell x);","s9_cell\ts9_real_floor(s9_cell x);","s9_cell\ts9_real_integer_p(s9_cell x);","int\ts9_real_less_p(s9_cell a, s9_cell b);","s9_cell\ts9_real_mantissa(s9_cell x);","s9_cell\ts9_real_multiply(s9_cell a, s9_cell b);","s9_cell\ts9_real_negate(s9_cell a);","s9_cell\ts9_real_negative_p(s9_cell a);","s9_cell\ts9_real_positive_p(s9_cell a);","s9_cell\ts9_real_power(s9_cell x, s9_cell y);","s9_cell\ts9_real_round(s9_cell x);","s9_cell\ts9_real_sqrt(s9_cell x);","s9_cell\ts9_real_subtract(s9_cell a, s9_cell b);","s9_cell\ts9_real_to_bignum(s9_cell r);","s9_cell\ts9_real_to_string(s9_cell r, int mode);","s9_cell\ts9_real_trunc(s9_cell x);","s9_cell\ts9_real_zero_p(s9_cell a);","void\ts9_rejectc(int c);","void\ts9_reset(void);","void\ts9_reset_counter(s9_counter *c);","void\ts9_reset_std_ports(void);","void\ts9_run_stats(int x);","void\ts9_fini(void);","void\ts9_init(s9_cell **extroots, s9_cell *stack, int *stkptr);","s9_cell\ts9_set_input_port(s9_cell port);","void\ts9_set_node_limit(int k);","s9_cell\ts9_set_output_port(s9_cell port);","void\ts9_set_printer_limit(int k);","void\ts9_set_vector_limit(int k);","int\ts9_string_numeric_p(char *s);","s9_cell\ts9_string_to_bignum(char *s);","s9_cell\ts9_string_to_number(char *s);","s9_cell\ts9_string_to_real(char *s);","s9_cell\ts9_string_to_symbol(s9_cell x);","s9_cell\ts9_symbol_ref(char *s);","s9_cell\ts9_symbol_table(void);","s9_cell\ts9_symbol_to_string(s9_cell x);","char\t*s9_typecheck(s9_cell f);","int\ts9_unlock_port(int port);","s9_cell\ts9_unsave(int k);","void\ts9_writec(int c);",""],"s9ext.h":["/*"," * Scheme 9 from Empty Space, Refactored"," * By Nils M Holm, 2007-2019"," * In the public domain"," *"," * Interface for extension procedures."," */","","extern cell\tRts;","extern int\tSp;","","#define parg(n)\tcar(vector(*GC_stack)[*GC_stkptr-(n)])","#define narg()\tfixval(vector(*GC_stack)[*GC_stkptr])","","#define BOL T_BOOLEAN  ","#define CHR T_CHAR     ","#define INP T_INPUT_PORT","#define INT T_INTEGER  ","#define LST T_LIST     ","#define OUP T_OUTPUT_PORT","#define PAI T_PAIR     ","#define FUN T_FUNCTION ","#define REA T_REAL     ","#define STR T_STRING   ","#define SYM T_SYMBOL   ","#define VEC T_VECTOR   ","#define ___ T_ANY","","void add_primitives(char *name, S9_PRIM *p);","void error(char *msg, cell expr);","cell integer_value(char *src, cell x);",""],"s9import.h":["/*"," * S9core Toolkit, Mk IVd"," * By Nils M Holm, 2007-2019"," * In the public domain"," *"," * Under jurisdictions without a public domain, the CC0 applies."," * See the file CC0 for a copy of the license."," */","","/*"," * Remove S9_ and s9_ prefixes from common definitions"," */","","#define cell\ts9_cell","#define counter\ts9_counter","","#define special_p\ts9_special_p","","#define NIL\t\tS9_NIL","#define TRUE\t\tS9_TRUE","#define FALSE\t\tS9_FALSE","#define END_OF_FILE\tS9_END_OF_FILE","#define UNDEFINED\tS9_UNDEFINED","#define UNSPECIFIC\tS9_UNSPECIFIC","#define VOID\t\tS9_VOID","","#define T_ANY\t\tS9_T_ANY","#define T_BOOLEAN\tS9_T_BOOLEAN","#define T_CHAR\t\tS9_T_CHAR","#define T_INPUT_PORT\tS9_T_INPUT_PORT","#define T_INTEGER\tS9_T_INTEGER","#define T_LIST\t\tS9_T_LIST","#define T_OUTPUT_PORT\tS9_T_OUTPUT_PORT","#define T_PAIR\t\tS9_T_PAIR","#define T_PRIMITIVE\tS9_T_PRIMITIVE","#define T_FUNCTION\tS9_T_FUNCTION","#define T_REAL\t\tS9_T_REAL","#define T_STRING\tS9_T_STRING","#define T_SYMBOL\tS9_T_SYMBOL","#define T_SYNTAX\tS9_T_SYNTAX","#define T_VECTOR\tS9_T_VECTOR","#define T_CONTINUATION\tS9_T_CONTINUATION","#define T_FIXNUM\tS9_T_FIXNUM","#define T_NONE\t\tS9_T_NONE","","#define USER_SPECIALS\tS9_USER_SPECIALS","","#define nl\ts9_nl","","#define string\t\ts9_string","#define string_len\ts9_string_len","#define symbol_name\ts9_symbol_name","#define symbol_len\ts9_symbol_len","#define vector\t\ts9_vector","#define vector_link\ts9_vector_link","#define vector_index\ts9_vector_index","#define vector_size\ts9_vector_size","#define vector_len\ts9_vector_len","#define port_no\t\ts9_port_no","#define fixval\t\ts9_fixval","#define small_int_value\ts9_small_int_value","#define char_value\ts9_char_value","#define prim_slot\ts9_prim_slot","#define prim_info\ts9_prim_info","","#define tag\ts9_tag","","#define car\ts9_car","#define cdr\ts9_cdr","#define caar\ts9_caar","#define cadr\ts9_cadr","#define cdar\ts9_cdar","#define cddr\ts9_cddr","#define caaar\ts9_caaar","#define caadr\ts9_caadr","#define cadar\ts9_cadar","#define caddr\ts9_caddr","#define cdaar\ts9_cdaar","#define cdadr\ts9_cdadr","#define cddar\ts9_cddar","#define cdddr\ts9_cdddr","#define caaaar\ts9_caaaar","#define caaadr\ts9_caaadr","#define caadar\ts9_caadar","#define caaddr\ts9_caaddr","#define cadaar\ts9_cadaar","#define cadadr\ts9_cadadr","#define caddar\ts9_caddar","#define cadddr\ts9_cadddr","#define cdaaar\ts9_cdaaar","#define cdaadr\ts9_cdaadr","#define cdadar\ts9_cdadar","#define cdaddr\ts9_cdaddr","#define cddaar\ts9_cddaar","#define cddadr\ts9_cddadr","#define cdddar\ts9_cdddar","#define cddddr\ts9_cddddr","","#define Car\t\tS9_car","#define Cdr\t\tS9_cdr","#define Tag\t\tS9_tag","#define Vectors\t\tS9_vectors","#define Nullvec\t\tS9_nullvec","#define Stack\t\tS9_stack","#define Primitives\tS9_primitives","#define Zero\t\tS9_zero","#define One\t\tS9_one","#define Two\t\tS9_two","#define Ten\t\tS9_ten","#define Epsilon\t\tS9_epsilon","#define Ports\t\tS9_ports","#define Input_port\tS9_input_port","#define Output_port\tS9_output_port","#define Error_port\tS9_error_port","","#define eof_p\t\ts9_eof_p","#define undefined_p\ts9_undefined_p","#define unspecific_p\ts9_unspecific_p","#define boolean_p\ts9_boolean_p","#define constant_p\ts9_constant_p","#define integer_p\ts9_integer_p","#define number_p\ts9_number_p","#define primitive_p\ts9_primitive_p","#define function_p\ts9_function_p","#define continuation_p\ts9_continuation_p","#define real_p\t\ts9_real_p","#define fix_p\t\ts9_fix_p","#define char_p\t\ts9_char_p","#define syntax_p\ts9_syntax_p","#define input_port_p\ts9_input_port_p","#define output_port_p\ts9_output_port_p","#define symbol_p\ts9_symbol_p","#define vector_p\ts9_vector_p","#define string_p\ts9_string_p","#define atom_p\t\ts9_atom_p","#define pair_p\t\ts9_pair_p","#define small_int_p\ts9_small_int_p","#define type_tag\ts9_type_tag","","#define cons\t\ts9_cons","#define new_atom\ts9_new_atom","#define save\t\ts9_save","","#define bignum_negative_p\ts9_bignum_negative_p","#define bignum_zero_p\t\ts9_bignum_zero_p","#define bignum_positive_p\ts9_bignum_positive_p","","#define Make_real\t\tS9_make_real","#define Real_flags\t\tS9_real_flags","#define Real_exponent\t\tS9_real_exponent","#define Real_mantissa\t\tS9_real_mantissa","#define REAL_NEGATIVE\t\tS9_REAL_NEGATIVE","#define Real_negative_flag\tS9_real_negative_flag","#define Real_zero_p\t\tS9_real_zero_p","#define Real_negative_p\t\tS9_real_negative_p","#define Real_positive_p\t\tS9_real_positive_p","#define Real_negate\t\tS9_real_negate","","#define GC_stack\tS9_gc_stack","#define GC_stkptr\tS9_gc_stkptr","","#ifndef S9_S9CORE"," #define apply_prim\t\ts9_apply_prim"," #define argv_to_list\t\ts9_argv_to_list"," #define asctol\t\t\ts9_asctol"," #define bignum_abs\t\ts9_bignum_abs"," #define bignum_add\t\ts9_bignum_add"," #define bignum_divide\t\ts9_bignum_divide"," #define bignum_equal_p\t\ts9_bignum_equal_p"," #define bignum_even_p\t\ts9_bignum_even_p"," #define bignum_less_p\t\ts9_bignum_less_p"," #define bignum_multiply\ts9_bignum_multiply"," #define bignum_negate\t\ts9_bignum_negate"," #define bignum_shift_left\ts9_bignum_shift_left"," #define bignum_shift_right\ts9_bignum_shift_right"," #define bignum_subtract\ts9_bignum_subtract"," #define bignum_to_int\t\ts9_bignum_to_int"," #define bignum_to_real\t\ts9_bignum_to_real"," #define bignum_to_string\ts9_bignum_to_string"," #define blockread\t\ts9_blockread"," #define blockwrite\t\ts9_blockwrite"," #define close_input_string\ts9_close_input_string"," #define close_port\t\ts9_close_port"," #define cons3\t\t\ts9_cons3"," #define conses\t\t\ts9_conses"," #define cons_stats\t\ts9_cons_stats"," #define copy_string\t\ts9_copy_string"," #define count\t\t\ts9_count"," #define dump_image\t\ts9_dump_image"," #define error_port\t\ts9_error_port"," #define exponent_chars\t\ts9_exponent_chars"," #define fatal\t\t\ts9_fatal"," #define find_symbol\t\ts9_find_symbol"," #define flat_copy\t\ts9_flat_copy"," #define flush\t\t\ts9_flush"," #define gc\t\t\ts9_gc"," #define gc_verbosity\t\ts9_gc_verbosity"," #define gcv\t\t\ts9_gcv"," #define get_counters\t\ts9_get_counters"," #define image_vars\t\ts9_image_vars"," #define input_port\t\ts9_input_port"," #define inport_open_p\t\ts9_inport_open_p"," #define integer_string_p\ts9_integer_string_p"," #define intern_symbol\t\ts9_intern_symbol"," #define int_to_bignum\t\ts9_int_to_bignum"," #define io_reset\t\ts9_io_reset"," #define io_status\t\ts9_io_status"," #define length\t\t\ts9_length"," #define load_image\t\ts9_load_image"," #define lock_port\t\ts9_lock_port"," #define make_char\t\ts9_make_char"," #define make_integer\t\ts9_make_integer"," #define make_port\t\ts9_make_port"," #define make_primitive\t\ts9_make_primitive"," #define make_real\t\ts9_make_real"," #define make_string\t\ts9_make_string"," #define make_symbol\t\ts9_make_symbol"," #define make_vector\t\ts9_make_vector"," #define mem_error_handler\ts9_mem_error_handler"," #define mkfix\t\t\ts9_mkfix"," #define new_port\t\ts9_new_port"," #define new_vec\t\ts9_new_vec"," #define open_input_port\ts9_open_input_port"," #define open_input_string\ts9_open_input_string"," #define open_output_port\ts9_open_output_port"," #define output_port\t\ts9_output_port"," #define outport_open_p\t\ts9_outport_open_p"," #define port_eof\t\ts9_port_eof"," #define print_bignum\t\ts9_print_bignum"," #define print_expanded_real\ts9_print_expanded_real"," #define print_real\t\ts9_print_real"," #define print_sci_real\t\ts9_print_sci_real"," #define printer_limit\t\ts9_printer_limit"," #define prints\t\t\ts9_prints"," #define read_counter\t\ts9_read_counter"," #define readc\t\t\ts9_readc"," #define real_abs\t\ts9_real_abs"," #define real_add\t\ts9_real_add"," #define real_approx_p\t\ts9_real_approx_p"," #define real_ceil\t\ts9_real_ceil"," #define real_divide\t\ts9_real_divide"," #define real_equal_p\t\ts9_real_equal_p"," #define real_exponent\t\ts9_real_exponent"," #define real_floor\t\ts9_real_floor"," #define real_integer_p\t\ts9_real_integer_p"," #define real_less_p\t\ts9_real_less_p"," #define real_mantissa\t\ts9_real_mantissa"," #define real_multiply\t\ts9_real_multiply"," #define real_negate\t\ts9_real_negate"," #define real_negative_p\ts9_real_negative_p"," #define real_positive_p\ts9_real_positive_p"," #define real_power\t\ts9_real_power"," #define real_round\t\ts9_real_round"," #define real_sqrt\t\ts9_real_sqrt"," #define real_subtract\t\ts9_real_subtract"," #define real_to_bignum\t\ts9_real_to_bignum"," #define real_to_string\t\ts9_real_to_string"," #define real_trunc\t\ts9_real_trunc"," #define real_zero_p\t\ts9_real_zero_p"," #define rejectc\t\ts9_rejectc"," #define reset_counter\t\ts9_reset_counter"," #define reset_std_ports\ts9_reset_std_ports"," #define run_stats\t\ts9_run_stats"," #define set_input_port\t\ts9_set_input_port"," #define set_node_limit\t\ts9_set_node_limit"," #define set_output_port\ts9_set_output_port"," #define set_printer_limit\ts9_set_printer_limit"," #define set_vector_limit\ts9_set_vector_limit"," #define string_numeric_p\ts9_string_numeric_p"," #define string_to_bignum\ts9_string_to_bignum"," #define string_to_number\ts9_string_to_number"," #define string_to_real\t\ts9_string_to_real"," #define string_to_symbol\ts9_string_to_symbol"," #define symbol_ref\t\ts9_symbol_ref"," #define symbol_table\t\ts9_symbol_table"," #define symbol_to_string\ts9_symbol_to_string"," #define typecheck\t\ts9_typecheck"," #define unlock_port\t\ts9_unlock_port"," #define unsave\t\t\ts9_unsave"," #define writec\t\t\ts9_writec","#endif","",""],"wasm.c":["#include \"wasm.h\"","","void bye(int x){}","int abs(int x){return (x\u003c0)?-x:x; }","long int labs(long int x){return (x\u003c0)?-x:x;}","int fflush(FILE *f){ return 0; };","int fclose(FILE *f){ return 0; };","void clearerr(FILE *f){};","size_t strlen(const char *s){"," const char *a = s;"," for (; *s; s++);"," return s-a;","}","int memcmp(const void *vl, const void *vr, size_t n){"," const unsigned char *l=vl, *r=vr;"," for (; n \u0026\u0026 *l == *r; n--, l++, r++);"," return n ? *l-*r : 0;","}","int strcmp(const char *l, const char *r){"," for (; *l==*r \u0026\u0026 *l; l++, r++);"," return *(unsigned char *)l - *(unsigned char *)r;","}","int strncmp(const char *_l, const char *_r, size_t n) { //musl"," const unsigned char *l=(void *)_l, *r=(void *)_r;"," if (!n--) return 0;"," for (; *l \u0026\u0026 *r \u0026\u0026 n \u0026\u0026 *l == *r ; l++, r++, n--);"," return *l - *r;","}","char *strcpy(char *d, const char *s){int i;"," for(i=0;;i++){d[i]=s[i];if(s[i]==0)break;}"," return d;","}","char *strncpy(char *dst, const char *src, size_t n){"," memset(dst, 0, n);"," memcpy(dst, src, strlen(src));"," return dst;","}","char *strcat(char *restrict dest, const char *restrict src){"," strcpy(dest + strlen(dest), src);"," return dest;","}","char *strchr(const char *s, int c){ do{ if(*s == c){return (char*)s;} }while(*s++); return 0; }","/*","void *memchr(const void *src, int c, size_t n){"," const unsigned char *s = src;"," c = (unsigned char)c;"," for (; n \u0026\u0026 *s != c; s++, n--);"," return n ? (void *)s : 0;","}","size_t strspn(const char *s1, const char *s2){"," const char *s = s1;"," const char *c;"," while(*s1){","  for (c = s2; *c; c++){","   if (*s1==*c)break;","  }","  if (*c=='\\0')break;","  s1++;"," }"," return s1-s;","}","int clock(void){ return 0; }","void exit(int x){ }","int system(char *s){ return 1; }","*/","void *realloc(void *ptr, size_t n){"," void *r=malloc(n);"," memcpy(r,ptr,n); "," // TODO: free"," return r;","}","char *strcati(char *s, int i){"," char b[32];"," itoa(i, b, 10);"," s[0] = '\\0';"," return strcat(s, b);","}","void reverse(char s[]){"," int i, j;"," char c;"," for (i = 0, j = strlen(s)-1; i\u003cj; i++, j--){","  c = s[i];","  s[i] = s[j];","  s[j] = c;"," }","}","void itoa(int n, char s[], int radix){"," int i, sign;"," if ((sign = n) \u003c 0) n = -n;"," i = 0;"," do { s[i++] = n % 10 + '0'; } while ((n /= 10) \u003e 0);"," if (sign \u003c 0) s[i++] = '-';"," s[i] = '\\0';"," reverse(s);","}","char *getenv(const char *name) { return NULL; }","int atoi(const char *s){"," int r = 0;"," for (int i = 0; s[i] != '\\0'; ++i) r = r * 10 + s[i]-'0';"," return r;","}","","// https://android.googlesource.com/platform/bionic/+/ics-mr0/libc/string/strtok.c (BSD)","char *strtok_r(char *s, const char *delim, char **last){","\tchar *spanp;","\tint c, sc;","\tchar *tok;","\tif (s == NULL \u0026\u0026 (s = *last) == NULL)","\t\treturn (NULL);","cont:","\tc = *s++;","\tfor (spanp = (char *)delim; (sc = *spanp++) != 0;) {","\t\tif (c == sc)","\t\t\tgoto cont;","\t}","\tif (c == 0) {","\t\t*last = NULL;","\t\treturn (NULL);","\t}","\ttok = s - 1;","\tfor (;;) {","\t\tc = *s++;","\t\tspanp = (char *)delim;","\t\tdo {","\t\t\tif ((sc = *spanp++) == c) {","\t\t\t\tif (c == 0)","\t\t\t\t\ts = NULL;","\t\t\t\telse","\t\t\t\t\ts[-1] = 0;","\t\t\t\t*last = s;","\t\t\t\treturn (tok);","\t\t\t}","\t\t} while (sc != 0);","\t}","}","char *strtok(char *s, const char *delim){","\tstatic char *last;","\treturn strtok_r(s, delim, \u0026last);","}",""],"wasm.h":["#define SAFE","#define NULL 0","#define EOF -1","#define INT_MAX 2147483647","#define INT_MIN -2147483647","#define size_t unsigned long","#define FILE unsigned long","#define stdin (FILE*)0","#define stdout (FILE*)1","#define stderr (FILE*)2","#define clock_t unsigned long","#define CLOCKS_PER_SEC 1000   /*js: Date.now()*/","extern void wprint(char *);","extern void *malloc(size_t);","extern void free(void *);","//extern long atol(char *);","int atoi(const char *s);","#define atol atoi","//extern int getc(FILE*);","#define getc fgetc","extern int ungetc(int, FILE*);","extern int putc(int, FILE *);","extern int fgetc(FILE *);","extern size_t fwrite(const void*, size_t, size_t, FILE*);","extern size_t fread(void*, size_t, size_t, FILE*);","extern FILE *fopen(const char*, const char*);","extern int feof(FILE *);","extern int remove(const char*);","extern int rand(void);","extern clock_t clock(void);","extern unsigned int __heap_base;","int fflush (FILE *);","#define memcpy __builtin_memcpy","#define memset __builtin_memset","#define memmove __builtin_memmove","void bye(int);","void *realloc(void *, size_t);","long labs(long);","int abs(int);","#define isdigit(x) ((x) \u003e= '0' \u0026\u0026 (x) \u003c= '9')","#define isupper(x) ((x) \u003e= 'A' \u0026\u0026 (x) \u003c= 'Z')","#define islower(x) ((x) \u003e= 'Z' \u0026\u0026 (x) \u003c= 'z')","#define isalpha(x) (isupper(x)||islower(x))","#define tolower(x) (isupper(x)?(x)+32:(x))","int fclose(FILE*);","void clearerr(FILE *);","void itoa(int, char[], int);","size_t strlen(const char *str);","int strcmp(const char *l, const char *r);","int strncmp(const char *_l, const char *_r, size_t n);","char *strcpy(char *d, const char *s);","char *strncpy(char *dst, const char *src, size_t n);","char *strchr(const char *s, int c);","char *strcat(char *restrict dest, const char *restrict src);","int memcmp(const void *vl, const void *vr, size_t n);","char *strcati(char *s, int);","char *getenv(const char *);","char *strtok(char *restrict str, const char *restrict delim);",""]}
