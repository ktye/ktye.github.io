let  /*k*/

atom  =x=>"number"===typeof x||"string"===typeof(x)&&1==x.length,
atomic=f=>(x,y)=>atom(x)?(atom(y)?f(x,y):y.map(y=>atomic(f)(x,y))):atom(y)?x.map(x=>atomic(f)(x,y)):x.map((x,i)=>atomic(f)(x,y[i])),
curry =(f,a,i)=>(i=a.map((x,i)=>x==undefined?i:-1).filter(x=>-1<x),(...x)=>(x.forEach((x,j)=>a[i[j]]=x),f(...a))), 
rec   =f=>x=>atom(x)?f(x):x.map(rec(f)),

each  =f=>(...x)=>1==x.length?(atom(x[0])?f(x[0]):x[0].map(x=>f(x))):flip(x).map(x=>f(...x)),
over  =f=>(...x)=>1<x.length?fold(f,...x):x[0].reduce((a,x,i)=>i?f(x,a):a),
fold  =f=>(...x)=>flip(x.slice(1)).reduce((a,x,i)=>i?f(...x[i],a):a,x[0]),
scan  =f=>x=>x.length?((x=x.slice()).reduce((a,b,i)=>x[i]=i?f(b,a):a,x[0]),x):x,
left  =f=>(y,x)=>atom(x)?f(x,y):x.map((x,i)=>f(y,x)),
right =f=>(y,x)=>atom(y)?f(x,y):(y=("string"===typeof y?y.split(""):y).map((y,i)=>f(y,x))).every(x=>"string"==typeof x)?y.join(""):y  ,
both  =f=>(y,x)=>atom(x)?right(f)(x,y):atom(y)?left(f)(y,x):x.map((x,i)=>f(y[i],x)),
prior =(f,y)=>x=>x.map((x,i,a)=>f(i?a[i-1]:y?y:a[0],x)),

id    =x=>x,
type  =x=>x.constructor.name,
neg   =rec(x=>-x),
sqr   =rec(x=>x*x),
sqrt  =rec(Math.sqrt),
flip  =x=>atom(x)?x:Array(over(max)(each(count)(x))).fill(0).map((_,i)=>x.map(x=>atom(x)?x:x[i])),
rev   =x=>atom(x)?x:x.toReversed(),
up    =x=>til(count(x)).sort((a,b)=>(a=x[a])<(b=x[b])?-1:a>b?1:0),
down  =x=>til(count(x)).sort((a,b)=>(a=x[a])>(b=x[b])?-1:a<b?1:0),
freq  =x=>x.reduce((r,x)=>{r[x]=r[x]?r[x]+1:1;r},{}),
not   =rec(x=>+!x),
value =x=>(typeof x==="string")?eval(parse(x)):x.constructor===Object?Object.values(x):x,
til   =x=>atom(x)?Array(x<0?0:x).fill(0).map((_,i)=>i):where(x),
where =x=>(atom(x)?list(x):x).flatMap((x,i)=>Array(x).fill(i)),
first =x=>atom(x)?x:x.length?x[0]:0,
uniq  =x=>atom(x)?rand(x):x.filter((y,i)=>i===x.indexOf(y)),
rand  =x=>atom(x)?Array(x).fill(0).map(Math.random):x.toSorted((a,b)=>0.5-Math.random()),
sort=(x,f)=>x.toSorted(f),
count =x=>atom(x)?1:x.length,
floor =rec(Math.floor),
list  =x=>[x],
string=x=>Array.isArray(x)||ArrayBuffer.isView(x)?x.every(x=>!isNaN(x))?x.map(String).join(" "):"("+x.map(string).join(";")+")":typeof x==="function"?String(x):JSON.stringify(x),
//string=x=>(typeof x==="string"||typeof x==="object")?JSON.stringify(x):(atom(x)||typeof x==="function")?String(x):x.every(x=>!isNaN(x))?x.map(String).join(" "):"("+x.map(string).join(";")+")",

dex   =(y,x)=>y,
add   =atomic((y,x)=>x+y),
sub   =atomic((y,x)=>x-y),
mul   =atomic((y,x)=>x*y),
div   =atomic((y,x)=>x/y),
mod   =atomic((y,x)=>x?(y%=x,y+x*+(y<0)):y),
idiv  =atomic((y,x)=>x?~~((y-(x-1)*+(y<0))/x):y),
min   =atomic(Math.min),
max   =atomic(Math.max),
less  =atomic((y,x)=>+(x<y)),
more  =atomic((y,x)=>+(x>y)),
eql   =atomic((y,x)=>+(x==y)),

match =(y,x)=>(type(x)!=type(y))?0:(atom(x)?+(x==y):(x.length!=y.length)?0:+x.every((x,i)=>match(x,y[i]))),
dict  =(y,x)=>x.reduce((r,x,i)=>(r[x]=y[i],r),{}),
at    =(y,x)=>"function"===typeof x?x(y):atom(x)?x:Array.isArray(y)||ArrayBuffer.isView(y)?right(at)(y,x):(y=x[y])!==undefined?y:"string"==typeof x?" ":0,
amend =(y,f,i,x)=>{x=x.slice();(atom(i)?[i]:i).forEach((i,j)=>x[i]=(f?f:dex)(atom(y)?y:y[j],x[i]));return x},
find  =(y,x)=>atom(y)?(-1<(y=x.indexOf(y))?y:x.length):right(find)(y,x),
cut   =(y,x)=>atom(x)?(x<0?cut(y,0|y.length/-x):cut(y,mul(0|y.length/x,til(x)))):[...x].map((x,i,a)=>y.slice(x,a[i<a.length-1?1+i:a.length])),
take  =(y,x)=>atom(x)?at(x<0?add(y.length+x,til(-x)):til(x),y):x.filter(x=>y.includes(x)),
drop  =(y,x)=>atom(x)?(x<0?y.slice(0,x):y.slice(x)):x.filter(x=>!y.includes(x)),
cat   =(y,x)=>atom(x)?cat(list(x),y):x.concat(y),
print =(...x)=>2===x.length?(console.log(x[1]+"$",x[0]),x[0]):(console.log(...rev(x)),1==x.length?x[0]:x),
split =(y,x)=>y.split(x),
join  =(y,x)=>y.join(x),
dec   =(y,x)=>y.slice(1).reduce((r,y,i)=>y+mul(at(x,i),r),first(y)),
enc   =(y,x)=>rev(rev(x).map(x=>{let t=mod(x,y);y=idiv(x,y);return t}))
