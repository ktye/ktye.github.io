///.k///

fftn:{[n]l:*&|2\\n;e:angle[1;-(i:!n)*360.%n]; (2//|2\\i;2^/:!l;|&'~!l#2;e@|(h/2*)\:!h:n%2)}
fft: {[f;x]{[x;p;k;e]@[x;k,j;(x[k]+x[j]*e),x[k]-x[j:k+p]*e]}/[x f 0;f 1;f 2;f 3]}
/see https://github.com/ktye/i/tree/master/%2B/mat/fft

f:fftn 1024

wh:512*512
right:511+512*!512
img:wh#0



/F is called for each buffer 1024 sound samples(floats) and returns a new image(ints)

F:{[x;scale;lg]                                    
 r:((:;log)lg)abs 512#fft[f;0a+x]
 img::img[1+!wh]                                   /roll
 img::@[img;right;|color@_255&0|scale(0 255)'r]}   /x y'z scales z from x to y



color:,/(-16580608 -16515072 -16384000 -16318463 -16187135 -16056063 -15859454 -15728126
 -15597053 -15465724 -15334652 -15203323 -15006714 -14875385 -14744056 -14612983
 -14481654 -14285045 -14153715 -14022642 -13825777 -13694704 -13497838 -13366765
 -13235436 -13038826 -12907753 -12711143 -12580070 -12383204 -12252131 -12121057
 -11924448 -11793630 -11662556 -11531482 -11400409 -11269335 -11138517 -11007443
 -10876370 -10745296 -10680014 -10548940 -10483403 -10417865 -10352327 -10221253
 -10155716 -10090178 -10090176 -10024639 -9958845 -9893307 -9893306 -9827512
 -9827510 -9761717 -9761715 -9695921 -9695920 -9695662 -9630125 -9629867
 -9629865 -9629608 -9629350 -9563813 -9563555 -9563553 -9563296 -9563038
 -9563037 -9562779 -9562778 -9562520 -9562262 -9562261 -9562003 -9562002
 -9561744 -9627278 -9627021 -9626763 -9626762 -9626504 -9626502 -9691781
 -9691779 -9691522 -9756800 -9756799 -9756541 -9822075 -9821818 -9821816
 -9887095 -9887093 -9886835 -9952114 -9952112 -10017391 -10017389 -10082667
 -10082666 -10147944 -10213223 -10213221 -10278500 -10278498 -10343776 -10409055
 -10409053 -10474332 -10539866 -10539609 -10604887 -10670421 -10735700 -10800978
 -10800721 -10866255 -10931534 -10996812 -11062347 -11127625 -11127368 -11192646
 -11257925 -11323459 -11388738 -11454017 -11519295 -11584574 -11649852 -11715131
 -11780409 -11845944 -11911223 -11976501 -12041780 -12107059 -12172081 -12302896
 -12368175 -12433454 -12498732 -12564011 -12629290 -12694569 -12759591 -12890406
 -12955685 -13020964 -13085987 -13151266 -13216545 -13347104 -13412382 -13477661
 -13542684 -13607963 -13738778 -13803802 -13869081 -13934104 -13999383 -14129942
 -14195221 -14260244 -14325523 -14456083 -14521106 -14586385 -14716944 -14782224
 -14847247 -14912270 -15043086 -15108109 -15173133 -15303948 -15368971 -15433995
 -15564554 -15629834 -15694857 -15825417 -15890440 -15955720 -16020744 -16151303
 -16216327 -16215815 -16281094 -16346118 -16345606 -16345094 -16344581 -16344069
 -16343557 -16277765 -16277253 -16211205 -16079621 -16013573 -15881989 -15815941
 -15684357 -15552773 -15421189 -15289861 -15158277 -15026693 -14895109 -14763525
 -14566406 -14434822 -14303238 -14106118 -13974535 -13842951 -13645831 -13514248
 -13317128 -13120008 -12922889 -12791305 -12594186 -12397066 -12199947 -12002827
 -11805708 -11543308 -11346189 -11083533 -10886413 -10623758 -10426638 -10163983
 -9901583 -9638927 -9376271 -9113871 -8785679 -8523023 -8260622 -7998222
 -7735565 -7473164 -7210763 -6948106 -6685705 -6423303 -6226438 -5964036)
///.js///

let a=false     //AudioContext
let ctx=ge("spec").getContext("2d")
let img=ctx.getImageData(0,0,512,512)
let rate


ge("button").onclick=function(e){
 e.target.enabled=false
 if(a===false)navigator.mediaDevices.getUserMedia({audio:true,video:false}).then(record)
 else         a.close().then(()=>{e.target.enabled=true;e.target.textContent="start recording";a=false})
}
function record(stream){
 console.log("record")
 a=new AudioContext()
 let s=a.createMediaStreamSource(stream);
 let p=a.createScriptProcessor(1024,1,1);
 rate=a.sampleRate
 setlabels()
 ge("rate").textContent=""+rate
 
 s.connect(p);
 p.connect(a.destination);
 ge("button").textContent="stop"
 ge("button").enabled=true

 let n=0
 let d=false
 p.onaudioprocess=function(e){
  let b=e.inputBuffer
  if(d)d.set(b.getChannelData(0))
  else d=new Float64Array(b.getChannelData(0))
  let scale=new Float64Array([+ge("zmin").value,+ge("zmax").value])
  let lg=(ge("lg").checked?1:0)
  k("F",d,scale,lg).then(r=>{
   img.data.set(new Uint8ClampedArray(r.buffer))
   ctx.putImageData(img,0,0)
})}}

function setlabels(){
 let c=ge("labels").getContext("2d")
 c.font = "14px monospace";
 for(let i=0;i<4;i++){c.textBaseline=("top middle middle bottom".split(" "))[i];c.fillText(((3-i)*rate/6000)+" kHz", 10, i*170); }
}

ge("lg").onchange=function(e){ge("zmin").step=(e.target.checked?1:0.001);ge("zmax").step=(e.target.checked?1:0.001)}
///.css///
#main{display:flex;margin:20px}
#spec{background:grey}
.center{text-align:center}
.rotate{transform:rotate(-90deg)}
.column{flex:50%}
///.html///

<div class="column">
 <table>
  <tr><th></th><th>spectrogram</th><td></td></tr>
  <tr><td class="rotate">freq</td>
      <td><canvas id="spec"   width=512 height=512></canvas></td>
      <td><canvas id="labels" width=128 height=512></canvas</tr>
  <tr><td></td><td class="center">time</td><td></td></tr>
 </table>
</div>



<div class="column">
 <table>
  <tr><th>src</th><td>press cntrl-k to see the source (k/js/css/html)</td></tr>
  <tr><th>rate</th><td><span id="rate"></span> Hz</td></tr>
  <tr><th>min</th><td><input id="zmin" type="number" step="1" value="-10"></input></td></tr>
  <tr><th>max</th><td><input id="zmax" type="number" step="1" value="1"></input></td></tr>
  <tr><th>log</th><td><input id="lg" type="checkbox" checked="true"></input></td></tr>
 </table>
 <br/>
 <p><button id="button" style="font-size:large">start recording</button></p>
</div>

