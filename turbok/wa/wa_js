//wa.js opcode table is generated by ../ai/wa.mk, source is wa_js
//A compiles a(text) to webassembly(uint8array)
let A=(_=>{
let o,O=x=>o.push(...(Array.isArray(x)?x:[x])),E=(l,x)=>{throw new Error("wa: line "+l+": "+x)},
lebu=(x,r,b)=>{r=[];do{b=x&127;r.push((x>>>=7)?b|=128:b)}while(x);return r},                                                         //unsigned i32
lebs=(x,r,b)=>{x|=0;r=[];while(1){b=x&127;x>>=7;if(x==0&&!(b&64)||(x==-1&&(b&64))){r.push(b);break};r.push(b|128)};return r},        //signed i32
lebn=(x,r,b)=>{r=[];while(1){b=Number(x&127n);x>>=7n;if(x==0n&&!(b&64)||(x==-1n&&(b&64))){r.push(b);break};r.push(b|128)};return r}  //signed BitInt

sect=(x,y)=>y.length?(O(x),O(lebu(y.length)),O(y)):0,
vect=x=>[...lebu(x.length),...x.flat()],
typs={"":0,g:1,i:127,j:126,e:125,f:124},
expo=(n,j)=>n.map((x,i)=>[...lebu(x.length),...x.split("").map(x=>x.charCodeAt(0)),2*!i,...lebu(j[i])]),
locs=x=>[0], //todo encode locals

/*o-p-s*/

wa=x=>{
 //parse asm 
 let a,n=0,s,e="",c=[],p=_=>((n?funs.push({sig:addsig(s),code:c,name:n,export:e}):0),[n,s,e,c]=[0,"","",[]]),
 sigs=[],addsig=x=>(sigs.includes(x)?x:sigs.push(x),x), //e.g. ["i:ii",":ij",..]
 funs=[]          //{sig:"i:ii",code:[1,2,..],name:"a","export":"A"}
 x.split("\n").forEach((x,line)=>{
  im=x=>(2>x.length)?E(line,x[0]+" expect immediate"):x[1]
  int=x=>Number.isInteger(x)?x:E(line,"expect integer")
  try{x=x.trim();if(x.length){a=(x.includes(" ")?x.split(" "):[x]);
   ((1<a.length)&&(a[1].includes(":")))?(p(),n=a[0],s=a[1],e=((3>a.length)?"":(3==a.length)?a[0]:a[3]))
   :("get"==a[0])?c.push(32,...lebu(int(Number(im(a)))))
   :(x in ops)?(Array.isArray(ops[x])?c.push(...ops[x]):c.push(ops[x]))
   :           E(line,"unknown op "+a[0])
  }}catch(e) { E(line,e.message) }
 });p()

 //emit
 o=[0,97,115,109,1,0,0,0] 
 sect( 1,vect(sigs.map((x,r,a)=>([r,a]=x.split(":"),[96,a.length,...a.split("").map(x=>typs[x]),r.length,...r.split("").map(x=>typs[x])]))))
 sect( 2,[]) //imports..
 sect( 3,vect(funs.map(x=>lebu(sigs.indexOf(x.sig))))),
 sect( 4,[]) //table..
 sect( 5,[1,0,1]) //memory: 1segment, unshared, 1block
 sect( 6,[]) //global..
 sect( 7,vect(expo(["memory",...funs.filter(x=>x.export.length>0).map(x=>x.export)], //names
                   [0,...funs.map((x,i)=>(x.export.length?i:-1)).filter(x=>x>=0)]))) //index
 sect( 8,[]) //start
 sect( 9,[]) //elements(indirect function table)
 sect(10,vect(funs.map(x=>((x=[...locs(x),...x.code,11]),[...lebu(x.length),...x])))) //code
 sect(11,[]) //data
 return new Uint8Array(o)}

 return wa})()
